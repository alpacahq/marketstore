package executor

import (
	"github.com/stretchr/testify/assert"
	"runtime"
	"testing"
	"time"
)

var mem runtime.MemStats

func AllocatedHeap() uint64 {
	runtime.ReadMemStats(&mem)
	return mem.HeapAlloc
}

func TimeAndHeap(n int, f func()) (t int64, h uint64) {
	ah_before := AllocatedHeap()
	time_before := time.Now().UnixNano()

	// execute n times
	for k := 0; k < n; k++ {
		f()
	}

	time_after := time.Now().UnixNano()
	ah_after := AllocatedHeap()
	return time_after - time_before, ah_after - ah_before
}

// TestRewriteBuffer checks the compatibility of C and Go implementations of rewrite buffer
func TestRewriteBuffer(t *testing.T) {
	// --- given ---
	variableRecordLength := uint32(12)       // e.g. Ask(4bytes) + Bid(4bytes) + IntervalTicks(4byte)
	numVarRecords := uint32(4)               // 4 records in 1 interval
	intervalsPerDay := uint32(86400)         // timeframe: 1Sec
	intervalStartEpoch := uint64(1546300800) // 2019-01-01 00:00:00

	buffer := []byte{
		0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x99, 0x99, 0x99, 0x19, 0x00, 0x00, 0x40, 0x40,
		0x00, 0x00, 0x80, 0x40, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xc0, 0x40,
		0xcc, 0xcc, 0xcc, 0x4c, 0x00, 0x00, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x41, 0x66, 0x66, 0x66, 0x66,
	}

	// --- when ---
	resultBuffer := RewriteBuffer(buffer, variableRecordLength, numVarRecords, intervalsPerDay, intervalStartEpoch)

	// --- then ---
	expected := []byte{
		0x80, 0xad, 0x2a, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40,
		0x00, 0xe1, 0xf5, 0x05, 0x80, 0xad, 0x2a, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40,
		0x00, 0x00, 0x80, 0x40, 0x00, 0xc2, 0xeb, 0x0b, 0x80, 0xad, 0x2a, 0x5c, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xc0, 0x40, 0x00, 0xa3, 0xe1, 0x11, 0x80, 0xad, 0x2a, 0x5c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x41, 0x00, 0x84, 0xd7, 0x17,
	}
	assert.Equal(t, expected, resultBuffer)
}

func TestGetTimeFromTicks(t *testing.T) {
	// --- given ---
	intervalStart := uint64(1546300800) // 2019-01-01 00:00:00
	intervalsPerDay := uint32(86400)    // timeframe: 1sec
	intervalTicks := uint32(4)

	// --- when ---
	second, nanosecond := GetTimeFromTicks(intervalStart, intervalsPerDay, intervalTicks)

	// --- given ---
	assert.Equal(t, uint64(1546300800), second)
	assert.Equal(t, uint32(1), nanosecond)
}

func Benchmark_TestRewriteBuffer_Go(b *testing.B) {
	// --- given ---
	variableRecordLength := uint32(12)       // e.g. Ask(4bytes) + Bid(4bytes) + IntervalTicks(4byte)
	numVarRecords := uint32(4)               // 4 records in 1 interval
	intervalsPerDay := uint32(86400)         // timeframe: 1Sec
	intervalStartEpoch := uint64(1546300800) // 2019-01-01 00:00:00

	buffer := []byte{
		0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x99, 0x99, 0x99, 0x19, 0x00, 0x00, 0x40, 0x40,
		0x00, 0x00, 0x80, 0x40, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0xa0, 0x40, 0x00, 0x00, 0xc0, 0x40,
		0xcc, 0xcc, 0xcc, 0x4c, 0x00, 0x00, 0xe0, 0x40, 0x00, 0x00, 0x00, 0x41, 0x66, 0x66, 0x66, 0x66,
	}

	b.ResetTimer()
	for k := 0; k < b.N; k++ {
		_ = RewriteBuffer(buffer, variableRecordLength, numVarRecords, intervalsPerDay, intervalStartEpoch)
	}
}
