// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package streaming

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming(in *jlexer.Lexer, out *Trade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ev":
			out.EventType = string(in.String())
		case "sym":
			out.Symbol = string(in.String())
		case "i":
			out.ID = string(in.String())
		case "x":
			out.Exchange = int32(in.Int32())
		case "p":
			out.Price = float64(in.Float64())
		case "s":
			out.Size = int64(in.Int64())
		case "t":
			out.Timestamp = int64(in.Int64())
		case "c":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]int32, 0, 16)
					} else {
						out.Conditions = []int32{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int32
					v1 = int32(in.Int32())
					out.Conditions = append(out.Conditions, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "z":
			out.Tape = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming(out *jwriter.Writer, in Trade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ev\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"sym\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Int32(int32(in.Exchange))
	}
	{
		const prefix string = ",\"p\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		if in.Conditions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Conditions {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Int32(int32(in.Tape))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming(l, v)
}
func easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming1(in *jlexer.Lexer, out *Quote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ev":
			out.EventType = string(in.String())
		case "sym":
			out.Symbol = string(in.String())
		case "bx":
			out.BidExchange = int32(in.Int32())
		case "bp":
			out.BidPrice = float64(in.Float64())
		case "bs":
			out.BidSize = int64(in.Int64())
		case "ax":
			out.AskExchange = int32(in.Int32())
		case "ap":
			out.AskPrice = float64(in.Float64())
		case "as":
			out.AskSize = int64(in.Int64())
		case "c":
			out.Condition = int32(in.Int32())
		case "t":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming1(out *jwriter.Writer, in Quote) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ev\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"sym\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"bx\":"
		out.RawString(prefix)
		out.Int32(int32(in.BidExchange))
	}
	{
		const prefix string = ",\"bp\":"
		out.RawString(prefix)
		out.Float64(float64(in.BidPrice))
	}
	{
		const prefix string = ",\"bs\":"
		out.RawString(prefix)
		out.Int64(int64(in.BidSize))
	}
	{
		const prefix string = ",\"ax\":"
		out.RawString(prefix)
		out.Int32(int32(in.AskExchange))
	}
	{
		const prefix string = ",\"ap\":"
		out.RawString(prefix)
		out.Float64(float64(in.AskPrice))
	}
	{
		const prefix string = ",\"as\":"
		out.RawString(prefix)
		out.Int64(int64(in.AskSize))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.Int32(int32(in.Condition))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Quote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Quote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Quote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Quote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming1(l, v)
}
func easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming2(in *jlexer.Lexer, out *Aggregate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ev":
			out.EventType = string(in.String())
		case "sym":
			out.Symbol = string(in.String())
		case "v":
			out.Volume = int64(in.Int64())
		case "av":
			out.AccumVolume = int64(in.Int64())
		case "op":
			out.OfficialOpen = float64(in.Float64())
		case "vw":
			out.VWAP = float64(in.Float64())
		case "o":
			out.Open = float64(in.Float64())
		case "c":
			out.Close = float64(in.Float64())
		case "h":
			out.High = float64(in.Float64())
		case "l":
			out.Low = float64(in.Float64())
		case "a":
			out.Average = float64(in.Float64())
		case "s":
			out.EpochMillis = int64(in.Int64())
		case "e":
			out.EndTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming2(out *jwriter.Writer, in Aggregate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ev\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"sym\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.Int64(int64(in.Volume))
	}
	{
		const prefix string = ",\"av\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccumVolume))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.Float64(float64(in.OfficialOpen))
	}
	{
		const prefix string = ",\"vw\":"
		out.RawString(prefix)
		out.Float64(float64(in.VWAP))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.Float64(float64(in.Open))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.Float64(float64(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Float64(float64(in.High))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Float64(float64(in.Low))
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Float64(float64(in.Average))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int64(int64(in.EpochMillis))
	}
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Aggregate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Aggregate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCef4e921EncodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Aggregate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Aggregate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCef4e921DecodeGithubComAlpacahqMarketstoreV4ContribPolygonStreaming2(l, v)
}
