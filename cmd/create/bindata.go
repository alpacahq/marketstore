// Code generated by go-bindata.
// sources:
// default.yml
// DO NOT EDIT!

package create

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _defaultYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdc\x46\x0c\xbd\xeb\x57\x10\xd2\xa5\x35\x20\xaf\xdc\xc6\x2d\x3c\x37\x27\x4d\xea\x83\x53\x1b\x70\x1b\x34\x27\x81\x92\x28\xed\x60\x47\x43\x85\x43\x79\xbd\x45\x7e\x7c\x31\x5a\xaf\xbd\x5f\x0e\x6c\x9d\x24\xbe\xa7\xf7\xf8\x31\x9c\x0c\xf2\xd7\x3e\x49\x06\x97\xa3\x72\xde\x91\x27\x41\xa5\x06\x7a\x94\x05\x69\x50\x16\x82\x9a\x7d\x6b\xbb\x51\x50\x2d\xfb\xd3\xe4\x6d\xba\xc2\xac\xd0\x58\xa1\x5a\x59\x56\xc0\x2d\xe8\x9c\xa0\x41\xc5\x0a\x03\x25\x11\x2e\x9f\x60\x33\x01\x49\x06\xce\x06\x25\x0f\x03\x8b\x42\x3e\xfd\x31\xbd\xd2\xc3\xc0\x81\x1a\xa8\x56\x3b\x2a\x10\x48\xee\x49\x92\xf5\x5f\x65\xa4\x1a\x38\xbf\xb8\xf8\x35\x2a\x71\x07\x8e\xee\xc9\xc1\x4f\xd6\xb7\xfc\x7d\x89\xe2\xbf\x93\x08\xcb\xcf\x89\xe3\xae\x9c\x30\x03\x11\x4b\x32\xf8\x36\x92\xac\xb0\x72\x04\x39\xa0\x73\xbc\x0c\xbb\x46\xca\x50\xd1\xc4\xb2\xd4\x80\xce\x85\xc7\x6e\x0e\x08\xb5\xb3\xe4\x35\x76\xca\x53\x1d\xdb\x94\x3c\x29\x19\x50\x19\x29\xc9\x92\xa0\x3c\x94\x9d\x60\x4d\xe5\x40\x62\xb9\x31\x50\x24\x59\xb2\x44\x57\x0a\x2b\x2a\x95\xd6\x2b\xc9\x3d\x3a\x03\xe7\x49\x96\x90\x8f\xbf\x97\xd8\x34\x4f\x12\x8f\x21\xa1\x9e\xef\xc9\x40\x8b\x2e\x6c\x85\x1d\x06\x2d\x17\x9e\x97\xfe\x19\xca\x40\x6d\x4f\xff\xb1\x27\x03\xe9\x65\x4f\x62\x6b\x9c\xfd\x45\xcb\xf2\x2b\xcb\x22\x9d\x08\x37\x43\x4c\x18\xdd\xa6\xe9\x73\x0e\x0a\x2d\xcb\x41\x7b\x37\x63\x29\x23\xc3\x40\xea\xb8\x46\x17\xdf\xd7\x3a\x1f\xa7\x2c\xa0\xa1\x6a\xec\x3a\xeb\x3b\x18\x06\xe1\x16\xd0\x37\x30\x27\x14\xad\x08\x15\xc8\x37\x03\x5b\xaf\x21\xc9\x60\x54\xeb\xac\x5a\x0a\xe5\x28\x6e\x5b\xcf\x9c\x5f\x5c\xbc\x4b\x93\x37\x9c\xb4\x68\xff\x80\xfd\xe0\x08\x54\x6c\xd7\x91\x40\xcf\xcd\xe8\x28\x4c\xa9\xfd\xe3\xf3\x9a\xfb\x3e\x8e\x48\x19\xd6\xed\x7a\xcb\x41\x5e\x37\x72\x2d\x1c\x4c\x92\x01\x40\xfe\x68\x60\x80\x7d\x63\xc3\x02\xbb\xee\x34\xf0\x04\x01\xb0\x37\x90\x9e\xcc\xce\x3e\x5b\x3f\xbb\xb9\xba\xfe\xf0\x25\x7d\x04\xd6\xab\x64\x1e\xbf\x00\x1a\x0a\x6a\xfd\xb4\x58\xe1\x39\x1a\xd5\xcf\x3f\x5b\xbf\x13\x38\x3b\x8c\x5c\xed\x7e\xfe\xb1\x97\x58\x50\x21\xec\x0f\xb2\x3a\x99\x9d\xbc\x94\x4e\x6b\x9d\x92\x18\xf0\x18\x1a\xfc\x96\x64\x50\x75\x4b\x96\xc5\x91\xa2\xbb\x06\x1f\x5a\xa2\x86\xe4\x59\xdf\x63\x4f\x06\xfe\x6c\xf0\xe1\x13\x69\x3d\x9f\x4e\xcc\x31\x97\x69\x35\xca\xa0\x18\xd7\x34\xfd\xa5\x38\xfb\x3d\x2f\x2e\xf2\xe2\x0c\x8a\xc2\x14\x45\xba\x5f\x85\x43\xab\xcf\x26\x1b\x9b\xbb\x18\xbe\x1b\xab\x50\x8b\xad\x9e\xac\x0e\xcd\xe2\xb3\x39\x74\x06\xb6\x8e\x58\x51\x14\x3b\x24\xe5\xc1\xd6\x06\x2a\x94\x50\xc6\xea\x76\x40\x54\x15\x5b\x8d\x4a\x65\x27\x3c\x0e\x06\xa6\xa9\xee\x50\xc2\x1c\x07\xda\xf5\xcd\x21\x87\x8f\x03\xd7\xf3\x9d\x68\x8c\x5b\xaf\xbf\xbd\x3b\xe0\xde\x0c\xe4\x0f\xa8\xad\x63\x3c\x46\xbe\xb2\xdd\xa1\xee\x4b\xe4\x6b\x5e\xbe\x9a\xfb\xc1\x71\xbc\x3a\x5e\xc9\xfe\xc2\x6e\xec\x7f\x4c\x7f\x9e\xe5\xc0\x6e\xd5\xb1\xdf\x9e\xe6\x66\x9e\xb7\x6b\x68\x2b\x7e\x6c\x92\x00\x38\xd8\x72\x41\x2b\x03\x2b\x1e\xa5\x7c\xfc\xda\xe3\xc4\x4b\x6b\x7d\xa7\xcc\x55\x87\x60\x66\x33\x1c\xec\xe9\xc6\xdc\xf2\x1e\x3d\xac\xfa\x8a\x5d\xd8\x77\x5a\x17\x72\x79\x79\x7b\x7d\x14\xb8\xbb\xfd\xba\x57\x5d\x65\xb5\xa7\x17\xb6\xe2\xfd\x84\x7d\x9a\xb0\x37\xac\xc5\xd9\xde\x5a\xbc\x90\x6e\x0e\xa7\xff\xbe\xff\xfb\x29\x30\xd5\x1f\xef\xfd\x56\x26\xf3\x34\x5e\x1d\x69\xf2\x7f\x00\x00\x00\xff\xff\x5a\x0d\xb7\x16\x11\x08\x00\x00")

func defaultYmlBytes() ([]byte, error) {
	return bindataRead(
		_defaultYml,
		"default.yml",
	)
}

func defaultYml() (*asset, error) {
	bytes, err := defaultYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "default.yml", size: 2065, mode: os.FileMode(420), modTime: time.Unix(1548668816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"default.yml": defaultYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"default.yml": &bintree{defaultYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
