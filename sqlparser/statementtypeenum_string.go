// Code generated by "stringer -type=StatementTypeEnum,PrimaryExpressionEnum"; DO NOT EDIT.

package sqlparser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_STMT-1]
	_ = x[CREATE_TABLE_STMT-2]
	_ = x[CREATE_TABLE_AS_SELECT_STMT-3]
	_ = x[DROP_TABLE_STMT-4]
	_ = x[INSERT_INTO_STMT-5]
	_ = x[DELETE_STMT-6]
	_ = x[RENAME_TABLE_STMT-7]
	_ = x[RENAME_COLUMN_STMT-8]
	_ = x[ADD_COLUMN_STMT-9]
	_ = x[CREATE_VIEW_STMT-10]
	_ = x[DROP_VIEW_STMT-11]
	_ = x[CALL_STMT-12]
	_ = x[GRANT_STMT-13]
	_ = x[REVOKE_STMT-14]
	_ = x[EXPLAIN_STMT-15]
	_ = x[SHOW_CREATE_TABLE_STMT-16]
	_ = x[SHOW_CREATE_VIEW_STMT-17]
	_ = x[SHOW_TABLES_STMT-18]
	_ = x[SHOW_SCHEMAS_STMT-19]
	_ = x[SHOW_CATALOGS_STMT-20]
	_ = x[SHOW_COLUMNS_STMT-21]
	_ = x[SHOW_FUNCTIONS_STMT-22]
	_ = x[SHOW_SESSION_STMT-23]
	_ = x[SET_SESSION_STMT-24]
	_ = x[RESET_SESSION_STMT-25]
	_ = x[START_TRANSACTION_STMT-26]
	_ = x[COMMIT_STMT-27]
	_ = x[ROLLBACK_STMT-28]
	_ = x[SHOW_PARTITIONS_STMT-29]
	_ = x[PREPARE_STMT-30]
	_ = x[DEALLOCATE_STMT-31]
	_ = x[EXECUTE_STMT-32]
	_ = x[DESCRIBE_INPUT_STMT-33]
	_ = x[DESCRIBE_OUTPUT_STMT-34]
}

const _StatementTypeEnum_name = "QUERY_STMTCREATE_TABLE_STMTCREATE_TABLE_AS_SELECT_STMTDROP_TABLE_STMTINSERT_INTO_STMTDELETE_STMTRENAME_TABLE_STMTRENAME_COLUMN_STMTADD_COLUMN_STMTCREATE_VIEW_STMTDROP_VIEW_STMTCALL_STMTGRANT_STMTREVOKE_STMTEXPLAIN_STMTSHOW_CREATE_TABLE_STMTSHOW_CREATE_VIEW_STMTSHOW_TABLES_STMTSHOW_SCHEMAS_STMTSHOW_CATALOGS_STMTSHOW_COLUMNS_STMTSHOW_FUNCTIONS_STMTSHOW_SESSION_STMTSET_SESSION_STMTRESET_SESSION_STMTSTART_TRANSACTION_STMTCOMMIT_STMTROLLBACK_STMTSHOW_PARTITIONS_STMTPREPARE_STMTDEALLOCATE_STMTEXECUTE_STMTDESCRIBE_INPUT_STMTDESCRIBE_OUTPUT_STMT"

var _StatementTypeEnum_index = [...]uint16{0, 10, 27, 54, 69, 85, 96, 113, 131, 146, 162, 176, 185, 195, 206, 218, 240, 261, 277, 294, 312, 329, 348, 365, 381, 399, 421, 432, 445, 465, 477, 492, 504, 523, 543}

func (i StatementTypeEnum) String() string {
	i -= 1
	if i >= StatementTypeEnum(len(_StatementTypeEnum_index)-1) {
		return "StatementTypeEnum(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _StatementTypeEnum_name[_StatementTypeEnum_index[i]:_StatementTypeEnum_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NULL_LITERAL-1]
	_ = x[PARAMETER-2]
	_ = x[STRING_LITERAL-3]
	_ = x[BINARY_LITERAL-4]
	_ = x[DECIMAL_LITERAL-5]
	_ = x[INTEGER_LITERAL-6]
	_ = x[BOOLEAN_LITERAL-7]
	_ = x[TYPE_CONSTRUCTOR-8]
	_ = x[INTERVAL_LITERAL-9]
	_ = x[POSITION-10]
	_ = x[ROW_CONSTRUCTOR-11]
	_ = x[FUNCTION_CALL-12]
	_ = x[LAMBDA-13]
	_ = x[SUBQUERY_EXPRESSION-14]
	_ = x[EXISTS-15]
	_ = x[SIMPLE_CASE-16]
	_ = x[SEARCHED_CASE-17]
	_ = x[CAST-18]
	_ = x[ARRAY_CONSTRUCTOR-19]
	_ = x[SUBSCRIPT-20]
	_ = x[COLUMN_REFERENCE-21]
	_ = x[DEREFERENCE-22]
	_ = x[SPECIAL_DATE_TIME_FUNCTION-23]
	_ = x[SUBSTRING-24]
	_ = x[NORMALIZE-25]
	_ = x[EXTRACT-26]
	_ = x[PARENTHESIZED_EXPRESSION-27]
}

const _PrimaryExpressionEnum_name = "NULL_LITERALPARAMETERSTRING_LITERALBINARY_LITERALDECIMAL_LITERALINTEGER_LITERALBOOLEAN_LITERALTYPE_CONSTRUCTORINTERVAL_LITERALPOSITIONROW_CONSTRUCTORFUNCTION_CALLLAMBDASUBQUERY_EXPRESSIONEXISTSSIMPLE_CASESEARCHED_CASECASTARRAY_CONSTRUCTORSUBSCRIPTCOLUMN_REFERENCEDEREFERENCESPECIAL_DATE_TIME_FUNCTIONSUBSTRINGNORMALIZEEXTRACTPARENTHESIZED_EXPRESSION"

var _PrimaryExpressionEnum_index = [...]uint16{0, 12, 21, 35, 49, 64, 79, 94, 110, 126, 134, 149, 162, 168, 187, 193, 204, 217, 221, 238, 247, 263, 274, 300, 309, 318, 325, 349}

func (i PrimaryExpressionEnum) String() string {
	i -= 1
	if i >= PrimaryExpressionEnum(len(_PrimaryExpressionEnum_index)-1) {
		return "PrimaryExpressionEnum(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _PrimaryExpressionEnum_name[_PrimaryExpressionEnum_index[i]:_PrimaryExpressionEnum_index[i+1]]
}
