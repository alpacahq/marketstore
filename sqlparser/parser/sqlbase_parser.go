// Code generated from parser/SQLBase.g4 by ANTLR 4.9.2. DO NOT EDIT.

package parser // SQLBase

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 213, 950,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 3, 2, 3, 2, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 3, 103, 10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 3, 109,
	10, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 115, 10, 3, 12, 3, 14, 3, 118, 11,
	3, 3, 3, 3, 3, 5, 3, 122, 10, 3, 3, 3, 5, 3, 125, 10, 3, 3, 4, 5, 4, 128,
	10, 4, 3, 4, 3, 4, 3, 5, 3, 5, 5, 5, 134, 10, 5, 3, 5, 3, 5, 3, 5, 7, 5,
	139, 10, 5, 12, 5, 14, 5, 142, 11, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3,
	6, 7, 6, 150, 10, 6, 12, 6, 14, 6, 153, 11, 6, 5, 6, 155, 10, 6, 3, 6,
	3, 6, 5, 6, 159, 10, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 5, 7, 167,
	10, 7, 3, 7, 7, 7, 170, 10, 7, 12, 7, 14, 7, 173, 11, 7, 3, 8, 3, 8, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 7, 8, 182, 10, 8, 12, 8, 14, 8, 185, 11, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 5, 8, 191, 10, 8, 3, 9, 3, 9, 5, 9, 195, 10, 9,
	3, 9, 3, 9, 5, 9, 199, 10, 9, 3, 10, 3, 10, 5, 10, 203, 10, 10, 3, 10,
	3, 10, 3, 10, 7, 10, 208, 10, 10, 12, 10, 14, 10, 211, 11, 10, 3, 10, 3,
	10, 3, 10, 3, 10, 7, 10, 217, 10, 10, 12, 10, 14, 10, 220, 11, 10, 5, 10,
	222, 10, 10, 3, 10, 3, 10, 5, 10, 226, 10, 10, 3, 10, 3, 10, 3, 10, 5,
	10, 231, 10, 10, 3, 10, 3, 10, 5, 10, 235, 10, 10, 3, 11, 5, 11, 238, 10,
	11, 3, 11, 3, 11, 3, 11, 7, 11, 243, 10, 11, 12, 11, 14, 11, 246, 11, 11,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 254, 10, 12, 12, 12, 14,
	12, 257, 11, 12, 5, 12, 259, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12,
	3, 12, 7, 12, 267, 10, 12, 12, 12, 14, 12, 270, 11, 12, 5, 12, 272, 10,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 281, 10, 12,
	12, 12, 14, 12, 284, 11, 12, 3, 12, 3, 12, 5, 12, 288, 10, 12, 3, 13, 3,
	13, 3, 13, 3, 13, 7, 13, 294, 10, 13, 12, 13, 14, 13, 297, 11, 13, 5, 13,
	299, 10, 13, 3, 13, 3, 13, 5, 13, 303, 10, 13, 3, 14, 3, 14, 3, 14, 3,
	14, 7, 14, 309, 10, 14, 12, 14, 14, 14, 312, 11, 14, 5, 14, 314, 10, 14,
	3, 14, 3, 14, 5, 14, 318, 10, 14, 3, 15, 3, 15, 5, 15, 322, 10, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 5, 17, 333,
	10, 17, 3, 17, 5, 17, 336, 10, 17, 3, 17, 3, 17, 3, 17, 3, 17, 3, 17, 5,
	17, 343, 10, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 350, 10, 18,
	3, 18, 3, 18, 3, 18, 5, 18, 355, 10, 18, 7, 18, 357, 10, 18, 12, 18, 14,
	18, 360, 11, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19,
	3, 19, 3, 19, 5, 19, 372, 10, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3,
	20, 3, 20, 7, 20, 381, 10, 20, 12, 20, 14, 20, 384, 11, 20, 3, 20, 3, 20,
	5, 20, 388, 10, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 5,
	21, 397, 10, 21, 3, 22, 3, 22, 5, 22, 401, 10, 22, 3, 22, 3, 22, 5, 22,
	405, 10, 22, 5, 22, 407, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 7, 23, 413,
	10, 23, 12, 23, 14, 23, 416, 11, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7, 24, 430, 10, 24, 12,
	24, 14, 24, 433, 11, 24, 3, 24, 3, 24, 3, 24, 5, 24, 438, 10, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 5, 24, 444, 10, 24, 3, 25, 3, 25, 5, 25, 448, 10,
	25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 457, 10, 26,
	3, 26, 3, 26, 3, 26, 7, 26, 462, 10, 26, 12, 26, 14, 26, 465, 11, 26, 3,
	27, 3, 27, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28,
	3, 28, 5, 28, 479, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5,
	28, 487, 10, 28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 7, 28, 494, 10, 28,
	12, 28, 14, 28, 497, 11, 28, 3, 28, 3, 28, 3, 28, 5, 28, 502, 10, 28, 3,
	28, 3, 28, 3, 28, 3, 28, 3, 28, 3, 28, 5, 28, 510, 10, 28, 3, 28, 3, 28,
	3, 28, 3, 28, 5, 28, 516, 10, 28, 3, 28, 3, 28, 5, 28, 520, 10, 28, 3,
	28, 3, 28, 3, 28, 5, 28, 525, 10, 28, 3, 28, 3, 28, 3, 28, 5, 28, 530,
	10, 28, 3, 29, 3, 29, 3, 29, 3, 29, 5, 29, 536, 10, 29, 3, 29, 3, 29, 3,
	29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 3, 29, 7, 29, 547, 10, 29, 12, 29,
	14, 29, 550, 11, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 566, 10, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 6, 30, 580, 10, 30, 13, 30, 14, 30, 581, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 7, 30, 591, 10, 30, 12, 30, 14, 30, 594, 11, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 603, 10, 30, 3, 30,
	5, 30, 606, 10, 30, 3, 30, 3, 30, 3, 30, 5, 30, 611, 10, 30, 3, 30, 3,
	30, 3, 30, 7, 30, 616, 10, 30, 12, 30, 14, 30, 619, 11, 30, 5, 30, 621,
	10, 30, 3, 30, 3, 30, 5, 30, 625, 10, 30, 3, 30, 5, 30, 628, 10, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 638, 10, 30,
	12, 30, 14, 30, 641, 11, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 6,
	30, 659, 10, 30, 13, 30, 14, 30, 660, 3, 30, 3, 30, 5, 30, 665, 10, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 6, 30, 671, 10, 30, 13, 30, 14, 30, 672, 3,
	30, 3, 30, 5, 30, 677, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 700, 10, 30, 12, 30, 14, 30, 703,
	11, 30, 5, 30, 705, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 5, 30, 714, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 720, 10, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 726, 10, 30, 3, 30, 3, 30, 3, 30, 3,
	30, 5, 30, 732, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	5, 30, 741, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5,
	30, 750, 10, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 765, 10, 30, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 775, 10, 30, 12, 30, 14,
	30, 778, 11, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 786,
	10, 31, 3, 32, 3, 32, 3, 33, 3, 33, 3, 34, 3, 34, 5, 34, 794, 10, 34, 3,
	34, 3, 34, 3, 34, 3, 34, 5, 34, 800, 10, 34, 3, 35, 3, 35, 3, 36, 3, 36,
	3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3,
	36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36, 7, 36, 825,
	10, 36, 12, 36, 14, 36, 828, 11, 36, 3, 36, 3, 36, 3, 36, 3, 36, 3, 36,
	3, 36, 3, 36, 7, 36, 837, 10, 36, 12, 36, 14, 36, 840, 11, 36, 3, 36, 3,
	36, 5, 36, 844, 10, 36, 5, 36, 846, 10, 36, 3, 36, 3, 36, 7, 36, 850, 10,
	36, 12, 36, 14, 36, 853, 11, 36, 3, 37, 3, 37, 5, 37, 857, 10, 37, 3, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 5, 38, 864, 10, 38, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3, 41,
	3, 41, 3, 41, 3, 41, 3, 41, 7, 41, 884, 10, 41, 12, 41, 14, 41, 887, 11,
	41, 5, 41, 889, 10, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 7, 41, 896,
	10, 41, 12, 41, 14, 41, 899, 11, 41, 5, 41, 901, 10, 41, 3, 41, 5, 41,
	904, 10, 41, 3, 41, 3, 41, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3, 42, 3,
	42, 3, 42, 5, 42, 916, 10, 42, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43, 3, 43,
	3, 43, 5, 43, 925, 10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 931, 10,
	44, 3, 45, 3, 45, 3, 45, 7, 45, 936, 10, 45, 12, 45, 14, 45, 939, 11, 45,
	3, 46, 3, 46, 3, 46, 3, 46, 3, 46, 5, 46, 946, 10, 46, 3, 47, 3, 47, 3,
	47, 2, 8, 12, 34, 50, 56, 58, 70, 48, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
	58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
	2, 20, 3, 2, 136, 138, 3, 2, 46, 47, 3, 2, 43, 44, 4, 2, 15, 15, 18, 18,
	3, 2, 140, 142, 3, 2, 30, 31, 3, 2, 40, 41, 3, 2, 196, 197, 3, 2, 196,
	200, 3, 2, 180, 183, 3, 2, 190, 195, 3, 2, 15, 17, 3, 2, 58, 63, 3, 2,
	89, 90, 3, 2, 92, 93, 3, 2, 119, 120, 3, 2, 121, 123, 18, 2, 13, 13, 15,
	17, 29, 29, 34, 34, 48, 49, 51, 64, 86, 90, 92, 95, 100, 100, 102, 104,
	110, 123, 126, 134, 139, 143, 148, 168, 172, 178, 180, 186, 2, 1082, 2,
	94, 3, 2, 2, 2, 4, 124, 3, 2, 2, 2, 6, 127, 3, 2, 2, 2, 8, 131, 3, 2, 2,
	2, 10, 143, 3, 2, 2, 2, 12, 160, 3, 2, 2, 2, 14, 190, 3, 2, 2, 2, 16, 192,
	3, 2, 2, 2, 18, 200, 3, 2, 2, 2, 20, 237, 3, 2, 2, 2, 22, 287, 3, 2, 2,
	2, 24, 302, 3, 2, 2, 2, 26, 317, 3, 2, 2, 2, 28, 319, 3, 2, 2, 2, 30, 328,
	3, 2, 2, 2, 32, 342, 3, 2, 2, 2, 34, 344, 3, 2, 2, 2, 36, 371, 3, 2, 2,
	2, 38, 387, 3, 2, 2, 2, 40, 389, 3, 2, 2, 2, 42, 398, 3, 2, 2, 2, 44, 408,
	3, 2, 2, 2, 46, 443, 3, 2, 2, 2, 48, 447, 3, 2, 2, 2, 50, 456, 3, 2, 2,
	2, 52, 466, 3, 2, 2, 2, 54, 529, 3, 2, 2, 2, 56, 535, 3, 2, 2, 2, 58, 764,
	3, 2, 2, 2, 60, 785, 3, 2, 2, 2, 62, 787, 3, 2, 2, 2, 64, 789, 3, 2, 2,
	2, 66, 791, 3, 2, 2, 2, 68, 801, 3, 2, 2, 2, 70, 845, 3, 2, 2, 2, 72, 856,
	3, 2, 2, 2, 74, 863, 3, 2, 2, 2, 76, 865, 3, 2, 2, 2, 78, 870, 3, 2, 2,
	2, 80, 876, 3, 2, 2, 2, 82, 915, 3, 2, 2, 2, 84, 924, 3, 2, 2, 2, 86, 930,
	3, 2, 2, 2, 88, 932, 3, 2, 2, 2, 90, 945, 3, 2, 2, 2, 92, 947, 3, 2, 2,
	2, 94, 95, 5, 4, 3, 2, 95, 96, 7, 10, 2, 2, 96, 3, 3, 2, 2, 2, 97, 125,
	5, 6, 4, 2, 98, 99, 7, 105, 2, 2, 99, 100, 7, 107, 2, 2, 100, 102, 5, 88,
	45, 2, 101, 103, 5, 44, 23, 2, 102, 101, 3, 2, 2, 2, 102, 103, 3, 2, 2,
	2, 103, 104, 3, 2, 2, 2, 104, 105, 5, 6, 4, 2, 105, 125, 3, 2, 2, 2, 106,
	108, 7, 115, 2, 2, 107, 109, 7, 116, 2, 2, 108, 107, 3, 2, 2, 2, 108, 109,
	3, 2, 2, 2, 109, 121, 3, 2, 2, 2, 110, 111, 7, 3, 2, 2, 111, 116, 5, 86,
	44, 2, 112, 113, 7, 4, 2, 2, 113, 115, 5, 86, 44, 2, 114, 112, 3, 2, 2,
	2, 115, 118, 3, 2, 2, 2, 116, 114, 3, 2, 2, 2, 116, 117, 3, 2, 2, 2, 117,
	119, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 119, 120, 7, 5, 2, 2, 120, 122,
	3, 2, 2, 2, 121, 110, 3, 2, 2, 2, 121, 122, 3, 2, 2, 2, 122, 123, 3, 2,
	2, 2, 123, 125, 5, 4, 3, 2, 124, 97, 3, 2, 2, 2, 124, 98, 3, 2, 2, 2, 124,
	106, 3, 2, 2, 2, 125, 5, 3, 2, 2, 2, 126, 128, 5, 8, 5, 2, 127, 126, 3,
	2, 2, 2, 127, 128, 3, 2, 2, 2, 128, 129, 3, 2, 2, 2, 129, 130, 5, 10, 6,
	2, 130, 7, 3, 2, 2, 2, 131, 133, 7, 96, 2, 2, 132, 134, 7, 97, 2, 2, 133,
	132, 3, 2, 2, 2, 133, 134, 3, 2, 2, 2, 134, 135, 3, 2, 2, 2, 135, 140,
	5, 28, 15, 2, 136, 137, 7, 4, 2, 2, 137, 139, 5, 28, 15, 2, 138, 136, 3,
	2, 2, 2, 139, 142, 3, 2, 2, 2, 140, 138, 3, 2, 2, 2, 140, 141, 3, 2, 2,
	2, 141, 9, 3, 2, 2, 2, 142, 140, 3, 2, 2, 2, 143, 154, 5, 12, 7, 2, 144,
	145, 7, 26, 2, 2, 145, 146, 7, 21, 2, 2, 146, 151, 5, 16, 9, 2, 147, 148,
	7, 4, 2, 2, 148, 150, 5, 16, 9, 2, 149, 147, 3, 2, 2, 2, 150, 153, 3, 2,
	2, 2, 151, 149, 3, 2, 2, 2, 151, 152, 3, 2, 2, 2, 152, 155, 3, 2, 2, 2,
	153, 151, 3, 2, 2, 2, 154, 144, 3, 2, 2, 2, 154, 155, 3, 2, 2, 2, 155,
	158, 3, 2, 2, 2, 156, 157, 7, 28, 2, 2, 157, 159, 7, 205, 2, 2, 158, 156,
	3, 2, 2, 2, 158, 159, 3, 2, 2, 2, 159, 11, 3, 2, 2, 2, 160, 161, 8, 7,
	1, 2, 161, 162, 5, 14, 8, 2, 162, 171, 3, 2, 2, 2, 163, 164, 12, 3, 2,
	2, 164, 166, 9, 2, 2, 2, 165, 167, 5, 30, 16, 2, 166, 165, 3, 2, 2, 2,
	166, 167, 3, 2, 2, 2, 167, 168, 3, 2, 2, 2, 168, 170, 5, 12, 7, 4, 169,
	163, 3, 2, 2, 2, 170, 173, 3, 2, 2, 2, 171, 169, 3, 2, 2, 2, 171, 172,
	3, 2, 2, 2, 172, 13, 3, 2, 2, 2, 173, 171, 3, 2, 2, 2, 174, 191, 5, 18,
	10, 2, 175, 176, 7, 101, 2, 2, 176, 191, 5, 88, 45, 2, 177, 178, 7, 98,
	2, 2, 178, 183, 5, 48, 25, 2, 179, 180, 7, 4, 2, 2, 180, 182, 5, 48, 25,
	2, 181, 179, 3, 2, 2, 2, 182, 185, 3, 2, 2, 2, 183, 181, 3, 2, 2, 2, 183,
	184, 3, 2, 2, 2, 184, 191, 3, 2, 2, 2, 185, 183, 3, 2, 2, 2, 186, 187,
	7, 3, 2, 2, 187, 188, 5, 10, 6, 2, 188, 189, 7, 5, 2, 2, 189, 191, 3, 2,
	2, 2, 190, 174, 3, 2, 2, 2, 190, 175, 3, 2, 2, 2, 190, 177, 3, 2, 2, 2,
	190, 186, 3, 2, 2, 2, 191, 15, 3, 2, 2, 2, 192, 194, 5, 48, 25, 2, 193,
	195, 9, 3, 2, 2, 194, 193, 3, 2, 2, 2, 194, 195, 3, 2, 2, 2, 195, 198,
	3, 2, 2, 2, 196, 197, 7, 42, 2, 2, 197, 199, 9, 4, 2, 2, 198, 196, 3, 2,
	2, 2, 198, 199, 3, 2, 2, 2, 199, 17, 3, 2, 2, 2, 200, 202, 7, 11, 2, 2,
	201, 203, 5, 30, 16, 2, 202, 201, 3, 2, 2, 2, 202, 203, 3, 2, 2, 2, 203,
	204, 3, 2, 2, 2, 204, 209, 5, 32, 17, 2, 205, 206, 7, 4, 2, 2, 206, 208,
	5, 32, 17, 2, 207, 205, 3, 2, 2, 2, 208, 211, 3, 2, 2, 2, 209, 207, 3,
	2, 2, 2, 209, 210, 3, 2, 2, 2, 210, 221, 3, 2, 2, 2, 211, 209, 3, 2, 2,
	2, 212, 213, 7, 12, 2, 2, 213, 218, 5, 34, 18, 2, 214, 215, 7, 4, 2, 2,
	215, 217, 5, 34, 18, 2, 216, 214, 3, 2, 2, 2, 217, 220, 3, 2, 2, 2, 218,
	216, 3, 2, 2, 2, 218, 219, 3, 2, 2, 2, 219, 222, 3, 2, 2, 2, 220, 218,
	3, 2, 2, 2, 221, 212, 3, 2, 2, 2, 221, 222, 3, 2, 2, 2, 222, 225, 3, 2,
	2, 2, 223, 224, 7, 19, 2, 2, 224, 226, 5, 50, 26, 2, 225, 223, 3, 2, 2,
	2, 225, 226, 3, 2, 2, 2, 226, 230, 3, 2, 2, 2, 227, 228, 7, 20, 2, 2, 228,
	229, 7, 21, 2, 2, 229, 231, 5, 20, 11, 2, 230, 227, 3, 2, 2, 2, 230, 231,
	3, 2, 2, 2, 231, 234, 3, 2, 2, 2, 232, 233, 7, 27, 2, 2, 233, 235, 5, 50,
	26, 2, 234, 232, 3, 2, 2, 2, 234, 235, 3, 2, 2, 2, 235, 19, 3, 2, 2, 2,
	236, 238, 5, 30, 16, 2, 237, 236, 3, 2, 2, 2, 237, 238, 3, 2, 2, 2, 238,
	239, 3, 2, 2, 2, 239, 244, 5, 22, 12, 2, 240, 241, 7, 4, 2, 2, 241, 243,
	5, 22, 12, 2, 242, 240, 3, 2, 2, 2, 243, 246, 3, 2, 2, 2, 244, 242, 3,
	2, 2, 2, 244, 245, 3, 2, 2, 2, 245, 21, 3, 2, 2, 2, 246, 244, 3, 2, 2,
	2, 247, 288, 5, 24, 13, 2, 248, 249, 7, 25, 2, 2, 249, 258, 7, 3, 2, 2,
	250, 255, 5, 88, 45, 2, 251, 252, 7, 4, 2, 2, 252, 254, 5, 88, 45, 2, 253,
	251, 3, 2, 2, 2, 254, 257, 3, 2, 2, 2, 255, 253, 3, 2, 2, 2, 255, 256,
	3, 2, 2, 2, 256, 259, 3, 2, 2, 2, 257, 255, 3, 2, 2, 2, 258, 250, 3, 2,
	2, 2, 258, 259, 3, 2, 2, 2, 259, 260, 3, 2, 2, 2, 260, 288, 7, 5, 2, 2,
	261, 262, 7, 24, 2, 2, 262, 271, 7, 3, 2, 2, 263, 268, 5, 88, 45, 2, 264,
	265, 7, 4, 2, 2, 265, 267, 5, 88, 45, 2, 266, 264, 3, 2, 2, 2, 267, 270,
	3, 2, 2, 2, 268, 266, 3, 2, 2, 2, 268, 269, 3, 2, 2, 2, 269, 272, 3, 2,
	2, 2, 270, 268, 3, 2, 2, 2, 271, 263, 3, 2, 2, 2, 271, 272, 3, 2, 2, 2,
	272, 273, 3, 2, 2, 2, 273, 288, 7, 5, 2, 2, 274, 275, 7, 22, 2, 2, 275,
	276, 7, 23, 2, 2, 276, 277, 7, 3, 2, 2, 277, 282, 5, 26, 14, 2, 278, 279,
	7, 4, 2, 2, 279, 281, 5, 26, 14, 2, 280, 278, 3, 2, 2, 2, 281, 284, 3,
	2, 2, 2, 282, 280, 3, 2, 2, 2, 282, 283, 3, 2, 2, 2, 283, 285, 3, 2, 2,
	2, 284, 282, 3, 2, 2, 2, 285, 286, 7, 5, 2, 2, 286, 288, 3, 2, 2, 2, 287,
	247, 3, 2, 2, 2, 287, 248, 3, 2, 2, 2, 287, 261, 3, 2, 2, 2, 287, 274,
	3, 2, 2, 2, 288, 23, 3, 2, 2, 2, 289, 298, 7, 3, 2, 2, 290, 295, 5, 48,
	25, 2, 291, 292, 7, 4, 2, 2, 292, 294, 5, 48, 25, 2, 293, 291, 3, 2, 2,
	2, 294, 297, 3, 2, 2, 2, 295, 293, 3, 2, 2, 2, 295, 296, 3, 2, 2, 2, 296,
	299, 3, 2, 2, 2, 297, 295, 3, 2, 2, 2, 298, 290, 3, 2, 2, 2, 298, 299,
	3, 2, 2, 2, 299, 300, 3, 2, 2, 2, 300, 303, 7, 5, 2, 2, 301, 303, 5, 48,
	25, 2, 302, 289, 3, 2, 2, 2, 302, 301, 3, 2, 2, 2, 303, 25, 3, 2, 2, 2,
	304, 313, 7, 3, 2, 2, 305, 310, 5, 88, 45, 2, 306, 307, 7, 4, 2, 2, 307,
	309, 5, 88, 45, 2, 308, 306, 3, 2, 2, 2, 309, 312, 3, 2, 2, 2, 310, 308,
	3, 2, 2, 2, 310, 311, 3, 2, 2, 2, 311, 314, 3, 2, 2, 2, 312, 310, 3, 2,
	2, 2, 313, 305, 3, 2, 2, 2, 313, 314, 3, 2, 2, 2, 314, 315, 3, 2, 2, 2,
	315, 318, 7, 5, 2, 2, 316, 318, 5, 88, 45, 2, 317, 304, 3, 2, 2, 2, 317,
	316, 3, 2, 2, 2, 318, 27, 3, 2, 2, 2, 319, 321, 5, 90, 46, 2, 320, 322,
	5, 44, 23, 2, 321, 320, 3, 2, 2, 2, 321, 322, 3, 2, 2, 2, 322, 323, 3,
	2, 2, 2, 323, 324, 7, 14, 2, 2, 324, 325, 7, 3, 2, 2, 325, 326, 5, 6, 4,
	2, 326, 327, 7, 5, 2, 2, 327, 29, 3, 2, 2, 2, 328, 329, 9, 5, 2, 2, 329,
	31, 3, 2, 2, 2, 330, 335, 5, 48, 25, 2, 331, 333, 7, 14, 2, 2, 332, 331,
	3, 2, 2, 2, 332, 333, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 336, 5, 90,
	46, 2, 335, 332, 3, 2, 2, 2, 335, 336, 3, 2, 2, 2, 336, 343, 3, 2, 2, 2,
	337, 338, 5, 88, 45, 2, 338, 339, 7, 202, 2, 2, 339, 340, 7, 198, 2, 2,
	340, 343, 3, 2, 2, 2, 341, 343, 7, 198, 2, 2, 342, 330, 3, 2, 2, 2, 342,
	337, 3, 2, 2, 2, 342, 341, 3, 2, 2, 2, 343, 33, 3, 2, 2, 2, 344, 345, 8,
	18, 1, 2, 345, 346, 5, 40, 21, 2, 346, 358, 3, 2, 2, 2, 347, 349, 12, 4,
	2, 2, 348, 350, 5, 36, 19, 2, 349, 348, 3, 2, 2, 2, 349, 350, 3, 2, 2,
	2, 350, 351, 3, 2, 2, 2, 351, 352, 7, 76, 2, 2, 352, 354, 5, 34, 18, 2,
	353, 355, 5, 38, 20, 2, 354, 353, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355,
	357, 3, 2, 2, 2, 356, 347, 3, 2, 2, 2, 357, 360, 3, 2, 2, 2, 358, 356,
	3, 2, 2, 2, 358, 359, 3, 2, 2, 2, 359, 35, 3, 2, 2, 2, 360, 358, 3, 2,
	2, 2, 361, 372, 7, 79, 2, 2, 362, 363, 7, 80, 2, 2, 363, 372, 7, 78, 2,
	2, 364, 365, 7, 81, 2, 2, 365, 372, 7, 78, 2, 2, 366, 367, 7, 82, 2, 2,
	367, 372, 7, 78, 2, 2, 368, 372, 7, 77, 2, 2, 369, 372, 7, 83, 2, 2, 370,
	372, 7, 80, 2, 2, 371, 361, 3, 2, 2, 2, 371, 362, 3, 2, 2, 2, 371, 364,
	3, 2, 2, 2, 371, 366, 3, 2, 2, 2, 371, 368, 3, 2, 2, 2, 371, 369, 3, 2,
	2, 2, 371, 370, 3, 2, 2, 2, 372, 37, 3, 2, 2, 2, 373, 374, 7, 85, 2, 2,
	374, 388, 5, 50, 26, 2, 375, 376, 7, 84, 2, 2, 376, 377, 7, 3, 2, 2, 377,
	382, 5, 90, 46, 2, 378, 379, 7, 4, 2, 2, 379, 381, 5, 90, 46, 2, 380, 378,
	3, 2, 2, 2, 381, 384, 3, 2, 2, 2, 382, 380, 3, 2, 2, 2, 382, 383, 3, 2,
	2, 2, 383, 385, 3, 2, 2, 2, 384, 382, 3, 2, 2, 2, 385, 386, 7, 5, 2, 2,
	386, 388, 3, 2, 2, 2, 387, 373, 3, 2, 2, 2, 387, 375, 3, 2, 2, 2, 388,
	39, 3, 2, 2, 2, 389, 396, 5, 42, 22, 2, 390, 391, 7, 143, 2, 2, 391, 392,
	9, 6, 2, 2, 392, 393, 7, 3, 2, 2, 393, 394, 5, 48, 25, 2, 394, 395, 7,
	5, 2, 2, 395, 397, 3, 2, 2, 2, 396, 390, 3, 2, 2, 2, 396, 397, 3, 2, 2,
	2, 397, 41, 3, 2, 2, 2, 398, 406, 5, 46, 24, 2, 399, 401, 7, 14, 2, 2,
	400, 399, 3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 402, 3, 2, 2, 2, 402,
	404, 5, 90, 46, 2, 403, 405, 5, 44, 23, 2, 404, 403, 3, 2, 2, 2, 404, 405,
	3, 2, 2, 2, 405, 407, 3, 2, 2, 2, 406, 400, 3, 2, 2, 2, 406, 407, 3, 2,
	2, 2, 407, 43, 3, 2, 2, 2, 408, 409, 7, 3, 2, 2, 409, 414, 5, 90, 46, 2,
	410, 411, 7, 4, 2, 2, 411, 413, 5, 90, 46, 2, 412, 410, 3, 2, 2, 2, 413,
	416, 3, 2, 2, 2, 414, 412, 3, 2, 2, 2, 414, 415, 3, 2, 2, 2, 415, 417,
	3, 2, 2, 2, 416, 414, 3, 2, 2, 2, 417, 418, 7, 5, 2, 2, 418, 45, 3, 2,
	2, 2, 419, 444, 5, 88, 45, 2, 420, 421, 7, 3, 2, 2, 421, 422, 5, 6, 4,
	2, 422, 423, 7, 5, 2, 2, 423, 444, 3, 2, 2, 2, 424, 425, 7, 146, 2, 2,
	425, 426, 7, 3, 2, 2, 426, 431, 5, 48, 25, 2, 427, 428, 7, 4, 2, 2, 428,
	430, 5, 48, 25, 2, 429, 427, 3, 2, 2, 2, 430, 433, 3, 2, 2, 2, 431, 429,
	3, 2, 2, 2, 431, 432, 3, 2, 2, 2, 432, 434, 3, 2, 2, 2, 433, 431, 3, 2,
	2, 2, 434, 437, 7, 5, 2, 2, 435, 436, 7, 96, 2, 2, 436, 438, 7, 147, 2,
	2, 437, 435, 3, 2, 2, 2, 437, 438, 3, 2, 2, 2, 438, 444, 3, 2, 2, 2, 439,
	440, 7, 3, 2, 2, 440, 441, 5, 34, 18, 2, 441, 442, 7, 5, 2, 2, 442, 444,
	3, 2, 2, 2, 443, 419, 3, 2, 2, 2, 443, 420, 3, 2, 2, 2, 443, 424, 3, 2,
	2, 2, 443, 439, 3, 2, 2, 2, 444, 47, 3, 2, 2, 2, 445, 448, 5, 50, 26, 2,
	446, 448, 5, 56, 29, 2, 447, 445, 3, 2, 2, 2, 447, 446, 3, 2, 2, 2, 448,
	49, 3, 2, 2, 2, 449, 450, 8, 26, 1, 2, 450, 451, 5, 56, 29, 2, 451, 452,
	5, 54, 28, 2, 452, 457, 3, 2, 2, 2, 453, 454, 7, 33, 2, 2, 454, 457, 5,
	50, 26, 5, 455, 457, 5, 52, 27, 2, 456, 449, 3, 2, 2, 2, 456, 453, 3, 2,
	2, 2, 456, 455, 3, 2, 2, 2, 457, 463, 3, 2, 2, 2, 458, 459, 12, 4, 2, 2,
	459, 460, 9, 7, 2, 2, 460, 462, 5, 48, 25, 2, 461, 458, 3, 2, 2, 2, 462,
	465, 3, 2, 2, 2, 463, 461, 3, 2, 2, 2, 463, 464, 3, 2, 2, 2, 464, 51, 3,
	2, 2, 2, 465, 463, 3, 2, 2, 2, 466, 467, 9, 8, 2, 2, 467, 53, 3, 2, 2,
	2, 468, 469, 5, 62, 32, 2, 469, 470, 5, 56, 29, 2, 470, 530, 3, 2, 2, 2,
	471, 472, 5, 62, 32, 2, 472, 473, 5, 64, 33, 2, 473, 474, 7, 3, 2, 2, 474,
	475, 5, 6, 4, 2, 475, 476, 7, 5, 2, 2, 476, 530, 3, 2, 2, 2, 477, 479,
	7, 33, 2, 2, 478, 477, 3, 2, 2, 2, 478, 479, 3, 2, 2, 2, 479, 480, 3, 2,
	2, 2, 480, 481, 7, 36, 2, 2, 481, 482, 5, 56, 29, 2, 482, 483, 7, 31, 2,
	2, 483, 484, 5, 56, 29, 2, 484, 530, 3, 2, 2, 2, 485, 487, 7, 33, 2, 2,
	486, 485, 3, 2, 2, 2, 486, 487, 3, 2, 2, 2, 487, 488, 3, 2, 2, 2, 488,
	489, 7, 32, 2, 2, 489, 490, 7, 3, 2, 2, 490, 495, 5, 56, 29, 2, 491, 492,
	7, 4, 2, 2, 492, 494, 5, 56, 29, 2, 493, 491, 3, 2, 2, 2, 494, 497, 3,
	2, 2, 2, 495, 493, 3, 2, 2, 2, 495, 496, 3, 2, 2, 2, 496, 498, 3, 2, 2,
	2, 497, 495, 3, 2, 2, 2, 498, 499, 7, 5, 2, 2, 499, 530, 3, 2, 2, 2, 500,
	502, 7, 33, 2, 2, 501, 500, 3, 2, 2, 2, 501, 502, 3, 2, 2, 2, 502, 503,
	3, 2, 2, 2, 503, 504, 7, 32, 2, 2, 504, 505, 7, 3, 2, 2, 505, 506, 5, 6,
	4, 2, 506, 507, 7, 5, 2, 2, 507, 530, 3, 2, 2, 2, 508, 510, 7, 33, 2, 2,
	509, 508, 3, 2, 2, 2, 509, 510, 3, 2, 2, 2, 510, 511, 3, 2, 2, 2, 511,
	512, 7, 37, 2, 2, 512, 515, 5, 56, 29, 2, 513, 514, 7, 45, 2, 2, 514, 516,
	5, 56, 29, 2, 515, 513, 3, 2, 2, 2, 515, 516, 3, 2, 2, 2, 516, 530, 3,
	2, 2, 2, 517, 519, 7, 38, 2, 2, 518, 520, 7, 33, 2, 2, 519, 518, 3, 2,
	2, 2, 519, 520, 3, 2, 2, 2, 520, 521, 3, 2, 2, 2, 521, 530, 7, 39, 2, 2,
	522, 524, 7, 38, 2, 2, 523, 525, 7, 33, 2, 2, 524, 523, 3, 2, 2, 2, 524,
	525, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526, 527, 7, 18, 2, 2, 527, 528,
	7, 12, 2, 2, 528, 530, 5, 56, 29, 2, 529, 468, 3, 2, 2, 2, 529, 471, 3,
	2, 2, 2, 529, 478, 3, 2, 2, 2, 529, 486, 3, 2, 2, 2, 529, 501, 3, 2, 2,
	2, 529, 509, 3, 2, 2, 2, 529, 517, 3, 2, 2, 2, 529, 522, 3, 2, 2, 2, 530,
	55, 3, 2, 2, 2, 531, 532, 8, 29, 1, 2, 532, 536, 5, 58, 30, 2, 533, 534,
	9, 9, 2, 2, 534, 536, 5, 56, 29, 5, 535, 531, 3, 2, 2, 2, 535, 533, 3,
	2, 2, 2, 536, 548, 3, 2, 2, 2, 537, 538, 12, 4, 2, 2, 538, 539, 9, 10,
	2, 2, 539, 547, 5, 56, 29, 5, 540, 541, 12, 3, 2, 2, 541, 542, 7, 201,
	2, 2, 542, 547, 5, 56, 29, 4, 543, 544, 12, 6, 2, 2, 544, 545, 7, 29, 2,
	2, 545, 547, 5, 60, 31, 2, 546, 537, 3, 2, 2, 2, 546, 540, 3, 2, 2, 2,
	546, 543, 3, 2, 2, 2, 547, 550, 3, 2, 2, 2, 548, 546, 3, 2, 2, 2, 548,
	549, 3, 2, 2, 2, 549, 57, 3, 2, 2, 2, 550, 548, 3, 2, 2, 2, 551, 552, 8,
	30, 1, 2, 552, 765, 7, 39, 2, 2, 553, 765, 7, 203, 2, 2, 554, 765, 7, 204,
	2, 2, 555, 765, 7, 206, 2, 2, 556, 765, 7, 205, 2, 2, 557, 765, 5, 52,
	27, 2, 558, 559, 5, 74, 38, 2, 559, 560, 7, 203, 2, 2, 560, 765, 3, 2,
	2, 2, 561, 765, 5, 66, 34, 2, 562, 765, 7, 6, 2, 2, 563, 566, 5, 90, 46,
	2, 564, 566, 7, 189, 2, 2, 565, 563, 3, 2, 2, 2, 565, 564, 3, 2, 2, 2,
	566, 567, 3, 2, 2, 2, 567, 765, 7, 203, 2, 2, 568, 569, 7, 49, 2, 2, 569,
	570, 7, 3, 2, 2, 570, 571, 5, 56, 29, 2, 571, 572, 7, 32, 2, 2, 572, 573,
	5, 56, 29, 2, 573, 574, 7, 5, 2, 2, 574, 765, 3, 2, 2, 2, 575, 576, 7,
	3, 2, 2, 576, 579, 5, 48, 25, 2, 577, 578, 7, 4, 2, 2, 578, 580, 5, 48,
	25, 2, 579, 577, 3, 2, 2, 2, 580, 581, 3, 2, 2, 2, 581, 579, 3, 2, 2, 2,
	581, 582, 3, 2, 2, 2, 582, 583, 3, 2, 2, 2, 583, 584, 7, 5, 2, 2, 584,
	765, 3, 2, 2, 2, 585, 586, 7, 95, 2, 2, 586, 587, 7, 3, 2, 2, 587, 592,
	5, 48, 25, 2, 588, 589, 7, 4, 2, 2, 589, 591, 5, 48, 25, 2, 590, 588, 3,
	2, 2, 2, 591, 594, 3, 2, 2, 2, 592, 590, 3, 2, 2, 2, 592, 593, 3, 2, 2,
	2, 593, 595, 3, 2, 2, 2, 594, 592, 3, 2, 2, 2, 595, 596, 7, 5, 2, 2, 596,
	765, 3, 2, 2, 2, 597, 598, 5, 88, 45, 2, 598, 599, 7, 3, 2, 2, 599, 600,
	7, 198, 2, 2, 600, 602, 7, 5, 2, 2, 601, 603, 5, 78, 40, 2, 602, 601, 3,
	2, 2, 2, 602, 603, 3, 2, 2, 2, 603, 605, 3, 2, 2, 2, 604, 606, 5, 80, 41,
	2, 605, 604, 3, 2, 2, 2, 605, 606, 3, 2, 2, 2, 606, 765, 3, 2, 2, 2, 607,
	608, 5, 88, 45, 2, 608, 620, 7, 3, 2, 2, 609, 611, 5, 30, 16, 2, 610, 609,
	3, 2, 2, 2, 610, 611, 3, 2, 2, 2, 611, 612, 3, 2, 2, 2, 612, 617, 5, 48,
	25, 2, 613, 614, 7, 4, 2, 2, 614, 616, 5, 48, 25, 2, 615, 613, 3, 2, 2,
	2, 616, 619, 3, 2, 2, 2, 617, 615, 3, 2, 2, 2, 617, 618, 3, 2, 2, 2, 618,
	621, 3, 2, 2, 2, 619, 617, 3, 2, 2, 2, 620, 610, 3, 2, 2, 2, 620, 621,
	3, 2, 2, 2, 621, 622, 3, 2, 2, 2, 622, 624, 7, 5, 2, 2, 623, 625, 5, 78,
	40, 2, 624, 623, 3, 2, 2, 2, 624, 625, 3, 2, 2, 2, 625, 627, 3, 2, 2, 2,
	626, 628, 5, 80, 41, 2, 627, 626, 3, 2, 2, 2, 627, 628, 3, 2, 2, 2, 628,
	765, 3, 2, 2, 2, 629, 630, 5, 90, 46, 2, 630, 631, 7, 7, 2, 2, 631, 632,
	5, 48, 25, 2, 632, 765, 3, 2, 2, 2, 633, 634, 7, 3, 2, 2, 634, 639, 5,
	90, 46, 2, 635, 636, 7, 4, 2, 2, 636, 638, 5, 90, 46, 2, 637, 635, 3, 2,
	2, 2, 638, 641, 3, 2, 2, 2, 639, 637, 3, 2, 2, 2, 639, 640, 3, 2, 2, 2,
	640, 642, 3, 2, 2, 2, 641, 639, 3, 2, 2, 2, 642, 643, 7, 5, 2, 2, 643,
	644, 7, 7, 2, 2, 644, 645, 5, 48, 25, 2, 645, 765, 3, 2, 2, 2, 646, 647,
	7, 3, 2, 2, 647, 648, 5, 6, 4, 2, 648, 649, 7, 5, 2, 2, 649, 765, 3, 2,
	2, 2, 650, 651, 7, 35, 2, 2, 651, 652, 7, 3, 2, 2, 652, 653, 5, 6, 4, 2,
	653, 654, 7, 5, 2, 2, 654, 765, 3, 2, 2, 2, 655, 656, 7, 71, 2, 2, 656,
	658, 5, 56, 29, 2, 657, 659, 5, 76, 39, 2, 658, 657, 3, 2, 2, 2, 659, 660,
	3, 2, 2, 2, 660, 658, 3, 2, 2, 2, 660, 661, 3, 2, 2, 2, 661, 664, 3, 2,
	2, 2, 662, 663, 7, 74, 2, 2, 663, 665, 5, 48, 25, 2, 664, 662, 3, 2, 2,
	2, 664, 665, 3, 2, 2, 2, 665, 666, 3, 2, 2, 2, 666, 667, 7, 75, 2, 2, 667,
	765, 3, 2, 2, 2, 668, 670, 7, 71, 2, 2, 669, 671, 5, 76, 39, 2, 670, 669,
	3, 2, 2, 2, 671, 672, 3, 2, 2, 2, 672, 670, 3, 2, 2, 2, 672, 673, 3, 2,
	2, 2, 673, 676, 3, 2, 2, 2, 674, 675, 7, 74, 2, 2, 675, 677, 5, 48, 25,
	2, 676, 674, 3, 2, 2, 2, 676, 677, 3, 2, 2, 2, 677, 678, 3, 2, 2, 2, 678,
	679, 7, 75, 2, 2, 679, 765, 3, 2, 2, 2, 680, 681, 7, 124, 2, 2, 681, 682,
	7, 3, 2, 2, 682, 683, 5, 48, 25, 2, 683, 684, 7, 14, 2, 2, 684, 685, 5,
	70, 36, 2, 685, 686, 7, 5, 2, 2, 686, 765, 3, 2, 2, 2, 687, 688, 7, 125,
	2, 2, 688, 689, 7, 3, 2, 2, 689, 690, 5, 48, 25, 2, 690, 691, 7, 14, 2,
	2, 691, 692, 5, 70, 36, 2, 692, 693, 7, 5, 2, 2, 693, 765, 3, 2, 2, 2,
	694, 695, 7, 148, 2, 2, 695, 704, 7, 8, 2, 2, 696, 701, 5, 48, 25, 2, 697,
	698, 7, 4, 2, 2, 698, 700, 5, 48, 25, 2, 699, 697, 3, 2, 2, 2, 700, 703,
	3, 2, 2, 2, 701, 699, 3, 2, 2, 2, 701, 702, 3, 2, 2, 2, 702, 705, 3, 2,
	2, 2, 703, 701, 3, 2, 2, 2, 704, 696, 3, 2, 2, 2, 704, 705, 3, 2, 2, 2,
	705, 706, 3, 2, 2, 2, 706, 765, 7, 9, 2, 2, 707, 765, 5, 90, 46, 2, 708,
	765, 7, 65, 2, 2, 709, 713, 7, 66, 2, 2, 710, 711, 7, 3, 2, 2, 711, 712,
	7, 205, 2, 2, 712, 714, 7, 5, 2, 2, 713, 710, 3, 2, 2, 2, 713, 714, 3,
	2, 2, 2, 714, 765, 3, 2, 2, 2, 715, 719, 7, 67, 2, 2, 716, 717, 7, 3, 2,
	2, 717, 718, 7, 205, 2, 2, 718, 720, 7, 5, 2, 2, 719, 716, 3, 2, 2, 2,
	719, 720, 3, 2, 2, 2, 720, 765, 3, 2, 2, 2, 721, 725, 7, 68, 2, 2, 722,
	723, 7, 3, 2, 2, 723, 724, 7, 205, 2, 2, 724, 726, 7, 5, 2, 2, 725, 722,
	3, 2, 2, 2, 725, 726, 3, 2, 2, 2, 726, 765, 3, 2, 2, 2, 727, 731, 7, 69,
	2, 2, 728, 729, 7, 3, 2, 2, 729, 730, 7, 205, 2, 2, 730, 732, 7, 5, 2,
	2, 731, 728, 3, 2, 2, 2, 731, 732, 3, 2, 2, 2, 732, 765, 3, 2, 2, 2, 733,
	734, 7, 48, 2, 2, 734, 735, 7, 3, 2, 2, 735, 736, 5, 56, 29, 2, 736, 737,
	7, 12, 2, 2, 737, 740, 5, 56, 29, 2, 738, 739, 7, 50, 2, 2, 739, 741, 5,
	56, 29, 2, 740, 738, 3, 2, 2, 2, 740, 741, 3, 2, 2, 2, 741, 742, 3, 2,
	2, 2, 742, 743, 7, 5, 2, 2, 743, 765, 3, 2, 2, 2, 744, 745, 7, 179, 2,
	2, 745, 746, 7, 3, 2, 2, 746, 749, 5, 56, 29, 2, 747, 748, 7, 4, 2, 2,
	748, 750, 9, 11, 2, 2, 749, 747, 3, 2, 2, 2, 749, 750, 3, 2, 2, 2, 750,
	751, 3, 2, 2, 2, 751, 752, 7, 5, 2, 2, 752, 765, 3, 2, 2, 2, 753, 754,
	7, 70, 2, 2, 754, 755, 7, 3, 2, 2, 755, 756, 5, 90, 46, 2, 756, 757, 7,
	12, 2, 2, 757, 758, 5, 56, 29, 2, 758, 759, 7, 5, 2, 2, 759, 765, 3, 2,
	2, 2, 760, 761, 7, 3, 2, 2, 761, 762, 5, 48, 25, 2, 762, 763, 7, 5, 2,
	2, 763, 765, 3, 2, 2, 2, 764, 551, 3, 2, 2, 2, 764, 553, 3, 2, 2, 2, 764,
	554, 3, 2, 2, 2, 764, 555, 3, 2, 2, 2, 764, 556, 3, 2, 2, 2, 764, 557,
	3, 2, 2, 2, 764, 558, 3, 2, 2, 2, 764, 561, 3, 2, 2, 2, 764, 562, 3, 2,
	2, 2, 764, 565, 3, 2, 2, 2, 764, 568, 3, 2, 2, 2, 764, 575, 3, 2, 2, 2,
	764, 585, 3, 2, 2, 2, 764, 597, 3, 2, 2, 2, 764, 607, 3, 2, 2, 2, 764,
	629, 3, 2, 2, 2, 764, 633, 3, 2, 2, 2, 764, 646, 3, 2, 2, 2, 764, 650,
	3, 2, 2, 2, 764, 655, 3, 2, 2, 2, 764, 668, 3, 2, 2, 2, 764, 680, 3, 2,
	2, 2, 764, 687, 3, 2, 2, 2, 764, 694, 3, 2, 2, 2, 764, 707, 3, 2, 2, 2,
	764, 708, 3, 2, 2, 2, 764, 709, 3, 2, 2, 2, 764, 715, 3, 2, 2, 2, 764,
	721, 3, 2, 2, 2, 764, 727, 3, 2, 2, 2, 764, 733, 3, 2, 2, 2, 764, 744,
	3, 2, 2, 2, 764, 753, 3, 2, 2, 2, 764, 760, 3, 2, 2, 2, 765, 776, 3, 2,
	2, 2, 766, 767, 12, 14, 2, 2, 767, 768, 7, 8, 2, 2, 768, 769, 5, 56, 29,
	2, 769, 770, 7, 9, 2, 2, 770, 775, 3, 2, 2, 2, 771, 772, 12, 12, 2, 2,
	772, 773, 7, 202, 2, 2, 773, 775, 5, 90, 46, 2, 774, 766, 3, 2, 2, 2, 774,
	771, 3, 2, 2, 2, 775, 778, 3, 2, 2, 2, 776, 774, 3, 2, 2, 2, 776, 777,
	3, 2, 2, 2, 777, 59, 3, 2, 2, 2, 778, 776, 3, 2, 2, 2, 779, 780, 7, 55,
	2, 2, 780, 781, 7, 64, 2, 2, 781, 786, 5, 66, 34, 2, 782, 783, 7, 55, 2,
	2, 783, 784, 7, 64, 2, 2, 784, 786, 7, 203, 2, 2, 785, 779, 3, 2, 2, 2,
	785, 782, 3, 2, 2, 2, 786, 61, 3, 2, 2, 2, 787, 788, 9, 12, 2, 2, 788,
	63, 3, 2, 2, 2, 789, 790, 9, 13, 2, 2, 790, 65, 3, 2, 2, 2, 791, 793, 7,
	57, 2, 2, 792, 794, 9, 9, 2, 2, 793, 792, 3, 2, 2, 2, 793, 794, 3, 2, 2,
	2, 794, 795, 3, 2, 2, 2, 795, 796, 7, 203, 2, 2, 796, 799, 5, 68, 35, 2,
	797, 798, 7, 139, 2, 2, 798, 800, 5, 68, 35, 2, 799, 797, 3, 2, 2, 2, 799,
	800, 3, 2, 2, 2, 800, 67, 3, 2, 2, 2, 801, 802, 9, 14, 2, 2, 802, 69, 3,
	2, 2, 2, 803, 804, 8, 36, 1, 2, 804, 805, 7, 148, 2, 2, 805, 806, 7, 192,
	2, 2, 806, 807, 5, 70, 36, 2, 807, 808, 7, 194, 2, 2, 808, 846, 3, 2, 2,
	2, 809, 810, 7, 149, 2, 2, 810, 811, 7, 192, 2, 2, 811, 812, 5, 70, 36,
	2, 812, 813, 7, 4, 2, 2, 813, 814, 5, 70, 36, 2, 814, 815, 7, 194, 2, 2,
	815, 846, 3, 2, 2, 2, 816, 817, 7, 95, 2, 2, 817, 818, 7, 3, 2, 2, 818,
	819, 5, 90, 46, 2, 819, 826, 5, 70, 36, 2, 820, 821, 7, 4, 2, 2, 821, 822,
	5, 90, 46, 2, 822, 823, 5, 70, 36, 2, 823, 825, 3, 2, 2, 2, 824, 820, 3,
	2, 2, 2, 825, 828, 3, 2, 2, 2, 826, 824, 3, 2, 2, 2, 826, 827, 3, 2, 2,
	2, 827, 829, 3, 2, 2, 2, 828, 826, 3, 2, 2, 2, 829, 830, 7, 5, 2, 2, 830,
	846, 3, 2, 2, 2, 831, 843, 5, 74, 38, 2, 832, 833, 7, 3, 2, 2, 833, 838,
	5, 72, 37, 2, 834, 835, 7, 4, 2, 2, 835, 837, 5, 72, 37, 2, 836, 834, 3,
	2, 2, 2, 837, 840, 3, 2, 2, 2, 838, 836, 3, 2, 2, 2, 838, 839, 3, 2, 2,
	2, 839, 841, 3, 2, 2, 2, 840, 838, 3, 2, 2, 2, 841, 842, 7, 5, 2, 2, 842,
	844, 3, 2, 2, 2, 843, 832, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 846,
	3, 2, 2, 2, 845, 803, 3, 2, 2, 2, 845, 809, 3, 2, 2, 2, 845, 816, 3, 2,
	2, 2, 845, 831, 3, 2, 2, 2, 846, 851, 3, 2, 2, 2, 847, 848, 12, 7, 2, 2,
	848, 850, 7, 148, 2, 2, 849, 847, 3, 2, 2, 2, 850, 853, 3, 2, 2, 2, 851,
	849, 3, 2, 2, 2, 851, 852, 3, 2, 2, 2, 852, 71, 3, 2, 2, 2, 853, 851, 3,
	2, 2, 2, 854, 857, 7, 205, 2, 2, 855, 857, 5, 70, 36, 2, 856, 854, 3, 2,
	2, 2, 856, 855, 3, 2, 2, 2, 857, 73, 3, 2, 2, 2, 858, 864, 7, 187, 2, 2,
	859, 864, 7, 188, 2, 2, 860, 864, 7, 54, 2, 2, 861, 864, 7, 189, 2, 2,
	862, 864, 5, 90, 46, 2, 863, 858, 3, 2, 2, 2, 863, 859, 3, 2, 2, 2, 863,
	860, 3, 2, 2, 2, 863, 861, 3, 2, 2, 2, 863, 862, 3, 2, 2, 2, 864, 75, 3,
	2, 2, 2, 865, 866, 7, 72, 2, 2, 866, 867, 5, 48, 25, 2, 867, 868, 7, 73,
	2, 2, 868, 869, 5, 48, 25, 2, 869, 77, 3, 2, 2, 2, 870, 871, 7, 86, 2,
	2, 871, 872, 7, 3, 2, 2, 872, 873, 7, 19, 2, 2, 873, 874, 5, 50, 26, 2,
	874, 875, 7, 5, 2, 2, 875, 79, 3, 2, 2, 2, 876, 877, 7, 87, 2, 2, 877,
	888, 7, 3, 2, 2, 878, 879, 7, 88, 2, 2, 879, 880, 7, 21, 2, 2, 880, 885,
	5, 48, 25, 2, 881, 882, 7, 4, 2, 2, 882, 884, 5, 48, 25, 2, 883, 881, 3,
	2, 2, 2, 884, 887, 3, 2, 2, 2, 885, 883, 3, 2, 2, 2, 885, 886, 3, 2, 2,
	2, 886, 889, 3, 2, 2, 2, 887, 885, 3, 2, 2, 2, 888, 878, 3, 2, 2, 2, 888,
	889, 3, 2, 2, 2, 889, 900, 3, 2, 2, 2, 890, 891, 7, 26, 2, 2, 891, 892,
	7, 21, 2, 2, 892, 897, 5, 16, 9, 2, 893, 894, 7, 4, 2, 2, 894, 896, 5,
	16, 9, 2, 895, 893, 3, 2, 2, 2, 896, 899, 3, 2, 2, 2, 897, 895, 3, 2, 2,
	2, 897, 898, 3, 2, 2, 2, 898, 901, 3, 2, 2, 2, 899, 897, 3, 2, 2, 2, 900,
	890, 3, 2, 2, 2, 900, 901, 3, 2, 2, 2, 901, 903, 3, 2, 2, 2, 902, 904,
	5, 82, 42, 2, 903, 902, 3, 2, 2, 2, 903, 904, 3, 2, 2, 2, 904, 905, 3,
	2, 2, 2, 905, 906, 7, 5, 2, 2, 906, 81, 3, 2, 2, 2, 907, 908, 9, 15, 2,
	2, 908, 916, 5, 84, 43, 2, 909, 910, 9, 15, 2, 2, 910, 911, 7, 36, 2, 2,
	911, 912, 5, 84, 43, 2, 912, 913, 7, 31, 2, 2, 913, 914, 5, 84, 43, 2,
	914, 916, 3, 2, 2, 2, 915, 907, 3, 2, 2, 2, 915, 909, 3, 2, 2, 2, 916,
	83, 3, 2, 2, 2, 917, 918, 7, 91, 2, 2, 918, 925, 9, 16, 2, 2, 919, 920,
	7, 94, 2, 2, 920, 925, 7, 95, 2, 2, 921, 922, 5, 48, 25, 2, 922, 923, 9,
	16, 2, 2, 923, 925, 3, 2, 2, 2, 924, 917, 3, 2, 2, 2, 924, 919, 3, 2, 2,
	2, 924, 921, 3, 2, 2, 2, 925, 85, 3, 2, 2, 2, 926, 927, 7, 117, 2, 2, 927,
	931, 9, 17, 2, 2, 928, 929, 7, 118, 2, 2, 929, 931, 9, 18, 2, 2, 930, 926,
	3, 2, 2, 2, 930, 928, 3, 2, 2, 2, 931, 87, 3, 2, 2, 2, 932, 937, 5, 90,
	46, 2, 933, 934, 7, 202, 2, 2, 934, 936, 5, 90, 46, 2, 935, 933, 3, 2,
	2, 2, 936, 939, 3, 2, 2, 2, 937, 935, 3, 2, 2, 2, 937, 938, 3, 2, 2, 2,
	938, 89, 3, 2, 2, 2, 939, 937, 3, 2, 2, 2, 940, 946, 7, 207, 2, 2, 941,
	946, 7, 208, 2, 2, 942, 946, 7, 209, 2, 2, 943, 946, 7, 210, 2, 2, 944,
	946, 5, 92, 47, 2, 945, 940, 3, 2, 2, 2, 945, 941, 3, 2, 2, 2, 945, 942,
	3, 2, 2, 2, 945, 943, 3, 2, 2, 2, 945, 944, 3, 2, 2, 2, 946, 91, 3, 2,
	2, 2, 947, 948, 9, 19, 2, 2, 948, 93, 3, 2, 2, 2, 119, 102, 108, 116, 121,
	124, 127, 133, 140, 151, 154, 158, 166, 171, 183, 190, 194, 198, 202, 209,
	218, 221, 225, 230, 234, 237, 244, 255, 258, 268, 271, 282, 287, 295, 298,
	302, 310, 313, 317, 321, 332, 335, 342, 349, 354, 358, 371, 382, 387, 396,
	400, 404, 406, 414, 431, 437, 443, 447, 456, 463, 478, 486, 495, 501, 509,
	515, 519, 524, 529, 535, 546, 548, 565, 581, 592, 602, 605, 610, 617, 620,
	624, 627, 639, 660, 664, 672, 676, 701, 704, 713, 719, 725, 731, 740, 749,
	764, 774, 776, 785, 793, 799, 826, 838, 843, 845, 851, 856, 863, 885, 888,
	897, 900, 903, 915, 924, 930, 937, 945,
}
var literalNames = []string{
	"", "'('", "','", "')'", "'?'", "'->'", "'['", "']'", "';'", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "'='", "", "'<'",
	"'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'||'", "'.'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "SEMICOLON", "SELECT", "FROM", "ADD", "AS",
	"ALL", "SOME", "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", "SETS",
	"CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", "AT", "OR", "AND", "IN",
	"NOT", "NO", "EXISTS", "BETWEEN", "LIKE", "IS", "NULL", "TRUE", "FALSE",
	"NULLS", "FIRST", "LAST", "ESCAPE", "ASC", "DESC", "SUBSTRING", "POSITION",
	"FOR", "TINYINT", "SMALLINT", "INTEGER", "DATE", "TIME", "TIMESTAMP", "INTERVAL",
	"YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", "ZONE", "CURRENT_DATE",
	"CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "LOCALTIMESTAMP", "EXTRACT",
	"CASE", "WHEN", "THEN", "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER",
	"LEFT", "RIGHT", "FULL", "NATURAL", "USING", "ON", "FILTER", "OVER", "PARTITION",
	"RANGE", "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", "ROW",
	"WITH", "RECURSIVE", "VALUES", "CREATE", "SCHEMA", "TABLE", "COMMENT",
	"VIEW", "REPLACE", "INSERT", "DELETE", "INTO", "CONSTRAINT", "DESCRIBE",
	"GRANT", "REVOKE", "PRIVILEGES", "PUBLIC", "OPTION", "EXPLAIN", "ANALYZE",
	"FORMAT", "TYPE", "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", "VALIDATE",
	"CAST", "TRY_CAST", "SHOW", "TABLES", "SCHEMAS", "CATALOGS", "COLUMNS",
	"COLUMN", "USE", "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT",
	"INTERSECT", "TO", "SYSTEM", "BERNOULLI", "POISSONIZED", "TABLESAMPLE",
	"ALTER", "RENAME", "UNNEST", "ORDINALITY", "ARRAY", "MAP", "SET", "RESET",
	"SESSION", "DATA", "START", "TRANSACTION", "COMMIT", "ROLLBACK", "WORK",
	"ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", "COMMITTED", "UNCOMMITTED",
	"READ", "WRITE", "ONLY", "CALL", "PREPARE", "DEALLOCATE", "EXECUTE", "INPUT",
	"OUTPUT", "CASCADE", "RESTRICT", "INCLUDING", "EXCLUDING", "PROPERTIES",
	"NORMALIZE", "NFD", "NFC", "NFKD", "NFKC", "IF", "NULLIF", "COALESCE",
	"TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION",
	"EQ", "NEQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH",
	"PERCENT", "CONCAT", "DOT", "STRING", "BINARY_LITERAL", "INTEGER_VALUE",
	"DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER",
	"BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS",
}

var ruleNames = []string{
	"statements", "statement", "query", "with", "queryNoWith", "queryTerm",
	"queryPrimary", "sortItem", "querySpecification", "groupBy", "groupingElement",
	"groupingExpressions", "groupingSet", "namedQuery", "setQuantifier", "selectItem",
	"relation", "joinType", "joinCriteria", "sampledRelation", "aliasedRelation",
	"columnAliases", "relationPrimary", "expression", "booleanExpression",
	"booleanliteral", "predicate", "valueExpression", "primaryExpression",
	"timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", "interval",
	"intervalField", "type_t", "typeParameter", "baseType", "whenClause", "filter",
	"over", "windowFrame", "frameBound", "explainOption", "qualifiedName",
	"identifier", "nonReserved",
}

type SQLBaseParser struct {
	*antlr.BaseParser
}

// NewSQLBaseParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SQLBaseParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSQLBaseParser(input antlr.TokenStream) *SQLBaseParser {
	this := new(SQLBaseParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SQLBase.g4"

	return this
}

// SQLBaseParser tokens.
const (
	SQLBaseParserEOF                      = antlr.TokenEOF
	SQLBaseParserT__0                     = 1
	SQLBaseParserT__1                     = 2
	SQLBaseParserT__2                     = 3
	SQLBaseParserT__3                     = 4
	SQLBaseParserT__4                     = 5
	SQLBaseParserT__5                     = 6
	SQLBaseParserT__6                     = 7
	SQLBaseParserSEMICOLON                = 8
	SQLBaseParserSELECT                   = 9
	SQLBaseParserFROM                     = 10
	SQLBaseParserADD                      = 11
	SQLBaseParserAS                       = 12
	SQLBaseParserALL                      = 13
	SQLBaseParserSOME                     = 14
	SQLBaseParserANY                      = 15
	SQLBaseParserDISTINCT                 = 16
	SQLBaseParserWHERE                    = 17
	SQLBaseParserGROUP                    = 18
	SQLBaseParserBY                       = 19
	SQLBaseParserGROUPING                 = 20
	SQLBaseParserSETS                     = 21
	SQLBaseParserCUBE                     = 22
	SQLBaseParserROLLUP                   = 23
	SQLBaseParserORDER                    = 24
	SQLBaseParserHAVING                   = 25
	SQLBaseParserLIMIT                    = 26
	SQLBaseParserAT                       = 27
	SQLBaseParserOR                       = 28
	SQLBaseParserAND                      = 29
	SQLBaseParserIN                       = 30
	SQLBaseParserNOT                      = 31
	SQLBaseParserNO                       = 32
	SQLBaseParserEXISTS                   = 33
	SQLBaseParserBETWEEN                  = 34
	SQLBaseParserLIKE                     = 35
	SQLBaseParserIS                       = 36
	SQLBaseParserNULL                     = 37
	SQLBaseParserTRUE                     = 38
	SQLBaseParserFALSE                    = 39
	SQLBaseParserNULLS                    = 40
	SQLBaseParserFIRST                    = 41
	SQLBaseParserLAST                     = 42
	SQLBaseParserESCAPE                   = 43
	SQLBaseParserASC                      = 44
	SQLBaseParserDESC                     = 45
	SQLBaseParserSUBSTRING                = 46
	SQLBaseParserPOSITION                 = 47
	SQLBaseParserFOR                      = 48
	SQLBaseParserTINYINT                  = 49
	SQLBaseParserSMALLINT                 = 50
	SQLBaseParserINTEGER                  = 51
	SQLBaseParserDATE                     = 52
	SQLBaseParserTIME                     = 53
	SQLBaseParserTIMESTAMP                = 54
	SQLBaseParserINTERVAL                 = 55
	SQLBaseParserYEAR                     = 56
	SQLBaseParserMONTH                    = 57
	SQLBaseParserDAY                      = 58
	SQLBaseParserHOUR                     = 59
	SQLBaseParserMINUTE                   = 60
	SQLBaseParserSECOND                   = 61
	SQLBaseParserZONE                     = 62
	SQLBaseParserCURRENT_DATE             = 63
	SQLBaseParserCURRENT_TIME             = 64
	SQLBaseParserCURRENT_TIMESTAMP        = 65
	SQLBaseParserLOCALTIME                = 66
	SQLBaseParserLOCALTIMESTAMP           = 67
	SQLBaseParserEXTRACT                  = 68
	SQLBaseParserCASE                     = 69
	SQLBaseParserWHEN                     = 70
	SQLBaseParserTHEN                     = 71
	SQLBaseParserELSE                     = 72
	SQLBaseParserEND                      = 73
	SQLBaseParserJOIN                     = 74
	SQLBaseParserCROSS                    = 75
	SQLBaseParserOUTER                    = 76
	SQLBaseParserINNER                    = 77
	SQLBaseParserLEFT                     = 78
	SQLBaseParserRIGHT                    = 79
	SQLBaseParserFULL                     = 80
	SQLBaseParserNATURAL                  = 81
	SQLBaseParserUSING                    = 82
	SQLBaseParserON                       = 83
	SQLBaseParserFILTER                   = 84
	SQLBaseParserOVER                     = 85
	SQLBaseParserPARTITION                = 86
	SQLBaseParserRANGE                    = 87
	SQLBaseParserROWS                     = 88
	SQLBaseParserUNBOUNDED                = 89
	SQLBaseParserPRECEDING                = 90
	SQLBaseParserFOLLOWING                = 91
	SQLBaseParserCURRENT                  = 92
	SQLBaseParserROW                      = 93
	SQLBaseParserWITH                     = 94
	SQLBaseParserRECURSIVE                = 95
	SQLBaseParserVALUES                   = 96
	SQLBaseParserCREATE                   = 97
	SQLBaseParserSCHEMA                   = 98
	SQLBaseParserTABLE                    = 99
	SQLBaseParserCOMMENT                  = 100
	SQLBaseParserVIEW                     = 101
	SQLBaseParserREPLACE                  = 102
	SQLBaseParserINSERT                   = 103
	SQLBaseParserDELETE                   = 104
	SQLBaseParserINTO                     = 105
	SQLBaseParserCONSTRAINT               = 106
	SQLBaseParserDESCRIBE                 = 107
	SQLBaseParserGRANT                    = 108
	SQLBaseParserREVOKE                   = 109
	SQLBaseParserPRIVILEGES               = 110
	SQLBaseParserPUBLIC                   = 111
	SQLBaseParserOPTION                   = 112
	SQLBaseParserEXPLAIN                  = 113
	SQLBaseParserANALYZE                  = 114
	SQLBaseParserFORMAT                   = 115
	SQLBaseParserTYPE                     = 116
	SQLBaseParserTEXT                     = 117
	SQLBaseParserGRAPHVIZ                 = 118
	SQLBaseParserLOGICAL                  = 119
	SQLBaseParserDISTRIBUTED              = 120
	SQLBaseParserVALIDATE                 = 121
	SQLBaseParserCAST                     = 122
	SQLBaseParserTRY_CAST                 = 123
	SQLBaseParserSHOW                     = 124
	SQLBaseParserTABLES                   = 125
	SQLBaseParserSCHEMAS                  = 126
	SQLBaseParserCATALOGS                 = 127
	SQLBaseParserCOLUMNS                  = 128
	SQLBaseParserCOLUMN                   = 129
	SQLBaseParserUSE                      = 130
	SQLBaseParserPARTITIONS               = 131
	SQLBaseParserFUNCTIONS                = 132
	SQLBaseParserDROP                     = 133
	SQLBaseParserUNION                    = 134
	SQLBaseParserEXCEPT                   = 135
	SQLBaseParserINTERSECT                = 136
	SQLBaseParserTO                       = 137
	SQLBaseParserSYSTEM                   = 138
	SQLBaseParserBERNOULLI                = 139
	SQLBaseParserPOISSONIZED              = 140
	SQLBaseParserTABLESAMPLE              = 141
	SQLBaseParserALTER                    = 142
	SQLBaseParserRENAME                   = 143
	SQLBaseParserUNNEST                   = 144
	SQLBaseParserORDINALITY               = 145
	SQLBaseParserARRAY                    = 146
	SQLBaseParserMAP                      = 147
	SQLBaseParserSET                      = 148
	SQLBaseParserRESET                    = 149
	SQLBaseParserSESSION                  = 150
	SQLBaseParserDATA                     = 151
	SQLBaseParserSTART                    = 152
	SQLBaseParserTRANSACTION              = 153
	SQLBaseParserCOMMIT                   = 154
	SQLBaseParserROLLBACK                 = 155
	SQLBaseParserWORK                     = 156
	SQLBaseParserISOLATION                = 157
	SQLBaseParserLEVEL                    = 158
	SQLBaseParserSERIALIZABLE             = 159
	SQLBaseParserREPEATABLE               = 160
	SQLBaseParserCOMMITTED                = 161
	SQLBaseParserUNCOMMITTED              = 162
	SQLBaseParserREAD                     = 163
	SQLBaseParserWRITE                    = 164
	SQLBaseParserONLY                     = 165
	SQLBaseParserCALL                     = 166
	SQLBaseParserPREPARE                  = 167
	SQLBaseParserDEALLOCATE               = 168
	SQLBaseParserEXECUTE                  = 169
	SQLBaseParserINPUT                    = 170
	SQLBaseParserOUTPUT                   = 171
	SQLBaseParserCASCADE                  = 172
	SQLBaseParserRESTRICT                 = 173
	SQLBaseParserINCLUDING                = 174
	SQLBaseParserEXCLUDING                = 175
	SQLBaseParserPROPERTIES               = 176
	SQLBaseParserNORMALIZE                = 177
	SQLBaseParserNFD                      = 178
	SQLBaseParserNFC                      = 179
	SQLBaseParserNFKD                     = 180
	SQLBaseParserNFKC                     = 181
	SQLBaseParserIF                       = 182
	SQLBaseParserNULLIF                   = 183
	SQLBaseParserCOALESCE                 = 184
	SQLBaseParserTIME_WITH_TIME_ZONE      = 185
	SQLBaseParserTIMESTAMP_WITH_TIME_ZONE = 186
	SQLBaseParserDOUBLE_PRECISION         = 187
	SQLBaseParserEQ                       = 188
	SQLBaseParserNEQ                      = 189
	SQLBaseParserLT                       = 190
	SQLBaseParserLTE                      = 191
	SQLBaseParserGT                       = 192
	SQLBaseParserGTE                      = 193
	SQLBaseParserPLUS                     = 194
	SQLBaseParserMINUS                    = 195
	SQLBaseParserASTERISK                 = 196
	SQLBaseParserSLASH                    = 197
	SQLBaseParserPERCENT                  = 198
	SQLBaseParserCONCAT                   = 199
	SQLBaseParserDOT                      = 200
	SQLBaseParserSTRING                   = 201
	SQLBaseParserBINARY_LITERAL           = 202
	SQLBaseParserINTEGER_VALUE            = 203
	SQLBaseParserDECIMAL_VALUE            = 204
	SQLBaseParserIDENTIFIER               = 205
	SQLBaseParserDIGIT_IDENTIFIER         = 206
	SQLBaseParserQUOTED_IDENTIFIER        = 207
	SQLBaseParserBACKQUOTED_IDENTIFIER    = 208
	SQLBaseParserSIMPLE_COMMENT           = 209
	SQLBaseParserBRACKETED_COMMENT        = 210
	SQLBaseParserWS                       = 211
)

// SQLBaseParser rules.
const (
	SQLBaseParserRULE_statements           = 0
	SQLBaseParserRULE_statement            = 1
	SQLBaseParserRULE_query                = 2
	SQLBaseParserRULE_with                 = 3
	SQLBaseParserRULE_queryNoWith          = 4
	SQLBaseParserRULE_queryTerm            = 5
	SQLBaseParserRULE_queryPrimary         = 6
	SQLBaseParserRULE_sortItem             = 7
	SQLBaseParserRULE_querySpecification   = 8
	SQLBaseParserRULE_groupBy              = 9
	SQLBaseParserRULE_groupingElement      = 10
	SQLBaseParserRULE_groupingExpressions  = 11
	SQLBaseParserRULE_groupingSet          = 12
	SQLBaseParserRULE_namedQuery           = 13
	SQLBaseParserRULE_setQuantifier        = 14
	SQLBaseParserRULE_selectItem           = 15
	SQLBaseParserRULE_relation             = 16
	SQLBaseParserRULE_joinType             = 17
	SQLBaseParserRULE_joinCriteria         = 18
	SQLBaseParserRULE_sampledRelation      = 19
	SQLBaseParserRULE_aliasedRelation      = 20
	SQLBaseParserRULE_columnAliases        = 21
	SQLBaseParserRULE_relationPrimary      = 22
	SQLBaseParserRULE_expression           = 23
	SQLBaseParserRULE_booleanExpression    = 24
	SQLBaseParserRULE_booleanliteral       = 25
	SQLBaseParserRULE_predicate            = 26
	SQLBaseParserRULE_valueExpression      = 27
	SQLBaseParserRULE_primaryExpression    = 28
	SQLBaseParserRULE_timeZoneSpecifier    = 29
	SQLBaseParserRULE_comparisonOperator   = 30
	SQLBaseParserRULE_comparisonQuantifier = 31
	SQLBaseParserRULE_interval             = 32
	SQLBaseParserRULE_intervalField        = 33
	SQLBaseParserRULE_type_t               = 34
	SQLBaseParserRULE_typeParameter        = 35
	SQLBaseParserRULE_baseType             = 36
	SQLBaseParserRULE_whenClause           = 37
	SQLBaseParserRULE_filter               = 38
	SQLBaseParserRULE_over                 = 39
	SQLBaseParserRULE_windowFrame          = 40
	SQLBaseParserRULE_frameBound           = 41
	SQLBaseParserRULE_explainOption        = 42
	SQLBaseParserRULE_qualifiedName        = 43
	SQLBaseParserRULE_identifier           = 44
	SQLBaseParserRULE_nonReserved          = 45
)

// IStatementsContext is an interface to support dynamic dispatch.
type IStatementsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementsContext differentiates from other interfaces.
	IsStatementsContext()
}

type StatementsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementsContext() *StatementsContext {
	var p = new(StatementsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_statements
	return p
}

func (*StatementsContext) IsStatementsContext() {}

func NewStatementsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementsContext {
	var p = new(StatementsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_statements

	return p
}

func (s *StatementsContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementsContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementsContext) SEMICOLON() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSEMICOLON, 0)
}

func (s *StatementsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterStatements(s)
	}
}

func (s *StatementsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitStatements(s)
	}
}

func (p *SQLBaseParser) Statements() (localctx IStatementsContext) {
	localctx = NewStatementsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SQLBaseParserRULE_statements)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(92)
		p.Statement()
	}
	{
		p.SetState(93)
		p.Match(SQLBaseParserSEMICOLON)
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) CopyFrom(ctx *StatementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExplainContext struct {
	*StatementContext
}

func NewExplainContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainContext {
	var p = new(ExplainContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *ExplainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEXPLAIN, 0)
}

func (s *ExplainContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ExplainContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserANALYZE, 0)
}

func (s *ExplainContext) AllExplainOption() []IExplainOptionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExplainOptionContext)(nil)).Elem())
	var tst = make([]IExplainOptionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExplainOptionContext)
		}
	}

	return tst
}

func (s *ExplainContext) ExplainOption(i int) IExplainOptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExplainOptionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExplainOptionContext)
}

func (s *ExplainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterExplain(s)
	}
}

func (s *ExplainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitExplain(s)
	}
}

type StatementDefaultContext struct {
	*StatementContext
}

func NewStatementDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StatementDefaultContext {
	var p = new(StatementDefaultContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *StatementDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementDefaultContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *StatementDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterStatementDefault(s)
	}
}

func (s *StatementDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitStatementDefault(s)
	}
}

type InsertIntoContext struct {
	*StatementContext
}

func NewInsertIntoContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InsertIntoContext {
	var p = new(InsertIntoContext)

	p.StatementContext = NewEmptyStatementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*StatementContext))

	return p
}

func (s *InsertIntoContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InsertIntoContext) INSERT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINSERT, 0)
}

func (s *InsertIntoContext) INTO() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTO, 0)
}

func (s *InsertIntoContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *InsertIntoContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *InsertIntoContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *InsertIntoContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterInsertInto(s)
	}
}

func (s *InsertIntoContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitInsertInto(s)
	}
}

func (p *SQLBaseParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SQLBaseParserRULE_statement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(122)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserT__0, SQLBaseParserSELECT, SQLBaseParserWITH, SQLBaseParserVALUES, SQLBaseParserTABLE:
		localctx = NewStatementDefaultContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(95)
			p.Query()
		}

	case SQLBaseParserINSERT:
		localctx = NewInsertIntoContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(96)
			p.Match(SQLBaseParserINSERT)
		}
		{
			p.SetState(97)
			p.Match(SQLBaseParserINTO)
		}
		{
			p.SetState(98)
			p.QualifiedName()
		}
		p.SetState(100)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(99)
				p.ColumnAliases()
			}

		}
		{
			p.SetState(102)
			p.Query()
		}

	case SQLBaseParserEXPLAIN:
		localctx = NewExplainContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(104)
			p.Match(SQLBaseParserEXPLAIN)
		}
		p.SetState(106)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserANALYZE {
			{
				p.SetState(105)
				p.Match(SQLBaseParserANALYZE)
			}

		}
		p.SetState(119)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 3, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(108)
				p.Match(SQLBaseParserT__0)
			}
			{
				p.SetState(109)
				p.ExplainOption()
			}
			p.SetState(114)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(110)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(111)
					p.ExplainOption()
				}

				p.SetState(116)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(117)
				p.Match(SQLBaseParserT__2)
			}

		}
		{
			p.SetState(121)
			p.Statement()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQueryContext is an interface to support dynamic dispatch.
type IQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryContext differentiates from other interfaces.
	IsQueryContext()
}

type QueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryContext() *QueryContext {
	var p = new(QueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_query
	return p
}

func (*QueryContext) IsQueryContext() {}

func NewQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryContext {
	var p = new(QueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_query

	return p
}

func (s *QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryContext) QueryNoWith() IQueryNoWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryNoWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryNoWithContext)
}

func (s *QueryContext) With() IWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWithContext)
}

func (s *QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQuery(s)
	}
}

func (s *QueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQuery(s)
	}
}

func (p *SQLBaseParser) Query() (localctx IQueryContext) {
	localctx = NewQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SQLBaseParserRULE_query)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(125)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserWITH {
		{
			p.SetState(124)
			p.With()
		}

	}
	{
		p.SetState(127)
		p.QueryNoWith()
	}

	return localctx
}

// IWithContext is an interface to support dynamic dispatch.
type IWithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWithContext differentiates from other interfaces.
	IsWithContext()
}

type WithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWithContext() *WithContext {
	var p = new(WithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_with
	return p
}

func (*WithContext) IsWithContext() {}

func NewWithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WithContext {
	var p = new(WithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_with

	return p
}

func (s *WithContext) GetParser() antlr.Parser { return s.parser }

func (s *WithContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWITH, 0)
}

func (s *WithContext) AllNamedQuery() []INamedQueryContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamedQueryContext)(nil)).Elem())
	var tst = make([]INamedQueryContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamedQueryContext)
		}
	}

	return tst
}

func (s *WithContext) NamedQuery(i int) INamedQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedQueryContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamedQueryContext)
}

func (s *WithContext) RECURSIVE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserRECURSIVE, 0)
}

func (s *WithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterWith(s)
	}
}

func (s *WithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitWith(s)
	}
}

func (p *SQLBaseParser) With() (localctx IWithContext) {
	localctx = NewWithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SQLBaseParserRULE_with)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(129)
		p.Match(SQLBaseParserWITH)
	}
	p.SetState(131)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserRECURSIVE {
		{
			p.SetState(130)
			p.Match(SQLBaseParserRECURSIVE)
		}

	}
	{
		p.SetState(133)
		p.NamedQuery()
	}
	p.SetState(138)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLBaseParserT__1 {
		{
			p.SetState(134)
			p.Match(SQLBaseParserT__1)
		}
		{
			p.SetState(135)
			p.NamedQuery()
		}

		p.SetState(140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IQueryNoWithContext is an interface to support dynamic dispatch.
type IQueryNoWithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetLimit returns the limit token.
	GetLimit() antlr.Token

	// SetLimit sets the limit token.
	SetLimit(antlr.Token)

	// IsQueryNoWithContext differentiates from other interfaces.
	IsQueryNoWithContext()
}

type QueryNoWithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	limit  antlr.Token
}

func NewEmptyQueryNoWithContext() *QueryNoWithContext {
	var p = new(QueryNoWithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_queryNoWith
	return p
}

func (*QueryNoWithContext) IsQueryNoWithContext() {}

func NewQueryNoWithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryNoWithContext {
	var p = new(QueryNoWithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_queryNoWith

	return p
}

func (s *QueryNoWithContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryNoWithContext) GetLimit() antlr.Token { return s.limit }

func (s *QueryNoWithContext) SetLimit(v antlr.Token) { s.limit = v }

func (s *QueryNoWithContext) QueryTerm() IQueryTermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryTermContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryTermContext)
}

func (s *QueryNoWithContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserORDER, 0)
}

func (s *QueryNoWithContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBY, 0)
}

func (s *QueryNoWithContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *QueryNoWithContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *QueryNoWithContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLIMIT, 0)
}

func (s *QueryNoWithContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTEGER_VALUE, 0)
}

func (s *QueryNoWithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryNoWithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QueryNoWithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQueryNoWith(s)
	}
}

func (s *QueryNoWithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQueryNoWith(s)
	}
}

func (p *SQLBaseParser) QueryNoWith() (localctx IQueryNoWithContext) {
	localctx = NewQueryNoWithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SQLBaseParserRULE_queryNoWith)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(141)
		p.queryTerm(0)
	}
	p.SetState(152)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserORDER {
		{
			p.SetState(142)
			p.Match(SQLBaseParserORDER)
		}
		{
			p.SetState(143)
			p.Match(SQLBaseParserBY)
		}
		{
			p.SetState(144)
			p.SortItem()
		}
		p.SetState(149)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(145)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(146)
				p.SortItem()
			}

			p.SetState(151)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserLIMIT {
		{
			p.SetState(154)
			p.Match(SQLBaseParserLIMIT)
		}
		{
			p.SetState(155)

			var _m = p.Match(SQLBaseParserINTEGER_VALUE)

			localctx.(*QueryNoWithContext).limit = _m
		}

	}

	return localctx
}

// IQueryTermContext is an interface to support dynamic dispatch.
type IQueryTermContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryTermContext differentiates from other interfaces.
	IsQueryTermContext()
}

type QueryTermContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryTermContext() *QueryTermContext {
	var p = new(QueryTermContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_queryTerm
	return p
}

func (*QueryTermContext) IsQueryTermContext() {}

func NewQueryTermContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryTermContext {
	var p = new(QueryTermContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_queryTerm

	return p
}

func (s *QueryTermContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryTermContext) CopyFrom(ctx *QueryTermContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *QueryTermContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryTermContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type QueryTermDefaultContext struct {
	*QueryTermContext
}

func NewQueryTermDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryTermDefaultContext {
	var p = new(QueryTermDefaultContext)

	p.QueryTermContext = NewEmptyQueryTermContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryTermContext))

	return p
}

func (s *QueryTermDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryTermDefaultContext) QueryPrimary() IQueryPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryPrimaryContext)
}

func (s *QueryTermDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQueryTermDefault(s)
	}
}

func (s *QueryTermDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQueryTermDefault(s)
	}
}

type SetOperationContext struct {
	*QueryTermContext
	left     IQueryTermContext
	operator antlr.Token
	right    IQueryTermContext
}

func NewSetOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SetOperationContext {
	var p = new(SetOperationContext)

	p.QueryTermContext = NewEmptyQueryTermContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryTermContext))

	return p
}

func (s *SetOperationContext) GetOperator() antlr.Token { return s.operator }

func (s *SetOperationContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *SetOperationContext) GetLeft() IQueryTermContext { return s.left }

func (s *SetOperationContext) GetRight() IQueryTermContext { return s.right }

func (s *SetOperationContext) SetLeft(v IQueryTermContext) { s.left = v }

func (s *SetOperationContext) SetRight(v IQueryTermContext) { s.right = v }

func (s *SetOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetOperationContext) AllQueryTerm() []IQueryTermContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQueryTermContext)(nil)).Elem())
	var tst = make([]IQueryTermContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQueryTermContext)
		}
	}

	return tst
}

func (s *SetOperationContext) QueryTerm(i int) IQueryTermContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryTermContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQueryTermContext)
}

func (s *SetOperationContext) INTERSECT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTERSECT, 0)
}

func (s *SetOperationContext) UNION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserUNION, 0)
}

func (s *SetOperationContext) EXCEPT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEXCEPT, 0)
}

func (s *SetOperationContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *SetOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSetOperation(s)
	}
}

func (s *SetOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSetOperation(s)
	}
}

func (p *SQLBaseParser) QueryTerm() (localctx IQueryTermContext) {
	return p.queryTerm(0)
}

func (p *SQLBaseParser) queryTerm(_p int) (localctx IQueryTermContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewQueryTermContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IQueryTermContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 10
	p.EnterRecursionRule(localctx, 10, SQLBaseParserRULE_queryTerm, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewQueryTermDefaultContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(159)
		p.QueryPrimary()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(169)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewSetOperationContext(p, NewQueryTermContext(p, _parentctx, _parentState))
			localctx.(*SetOperationContext).left = _prevctx

			p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_queryTerm)
			p.SetState(161)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(162)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*SetOperationContext).operator = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-134)&-(0x1f+1)) == 0 && ((1<<uint((_la-134)))&((1<<(SQLBaseParserUNION-134))|(1<<(SQLBaseParserEXCEPT-134))|(1<<(SQLBaseParserINTERSECT-134)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*SetOperationContext).operator = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			p.SetState(164)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLBaseParserALL || _la == SQLBaseParserDISTINCT {
				{
					p.SetState(163)
					p.SetQuantifier()
				}

			}
			{
				p.SetState(166)

				var _x = p.queryTerm(2)

				localctx.(*SetOperationContext).right = _x
			}

		}
		p.SetState(171)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}

	return localctx
}

// IQueryPrimaryContext is an interface to support dynamic dispatch.
type IQueryPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQueryPrimaryContext differentiates from other interfaces.
	IsQueryPrimaryContext()
}

type QueryPrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQueryPrimaryContext() *QueryPrimaryContext {
	var p = new(QueryPrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_queryPrimary
	return p
}

func (*QueryPrimaryContext) IsQueryPrimaryContext() {}

func NewQueryPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QueryPrimaryContext {
	var p = new(QueryPrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_queryPrimary

	return p
}

func (s *QueryPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *QueryPrimaryContext) CopyFrom(ctx *QueryPrimaryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *QueryPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryContext struct {
	*QueryPrimaryContext
}

func NewSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryContext {
	var p = new(SubqueryContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *SubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryContext) QueryNoWith() IQueryNoWithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryNoWithContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryNoWithContext)
}

func (s *SubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSubquery(s)
	}
}

func (s *SubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSubquery(s)
	}
}

type QueryPrimaryDefaultContext struct {
	*QueryPrimaryContext
}

func NewQueryPrimaryDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QueryPrimaryDefaultContext {
	var p = new(QueryPrimaryDefaultContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *QueryPrimaryDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QueryPrimaryDefaultContext) QuerySpecification() IQuerySpecificationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQuerySpecificationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQuerySpecificationContext)
}

func (s *QueryPrimaryDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQueryPrimaryDefault(s)
	}
}

func (s *QueryPrimaryDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQueryPrimaryDefault(s)
	}
}

type TableContext struct {
	*QueryPrimaryContext
}

func NewTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableContext {
	var p = new(TableContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *TableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableContext) TABLE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTABLE, 0)
}

func (s *TableContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *TableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTable(s)
	}
}

func (s *TableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTable(s)
	}
}

type InlineTableContext struct {
	*QueryPrimaryContext
}

func NewInlineTableContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InlineTableContext {
	var p = new(InlineTableContext)

	p.QueryPrimaryContext = NewEmptyQueryPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QueryPrimaryContext))

	return p
}

func (s *InlineTableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineTableContext) VALUES() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserVALUES, 0)
}

func (s *InlineTableContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InlineTableContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InlineTableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterInlineTable(s)
	}
}

func (s *InlineTableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitInlineTable(s)
	}
}

func (p *SQLBaseParser) QueryPrimary() (localctx IQueryPrimaryContext) {
	localctx = NewQueryPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SQLBaseParserRULE_queryPrimary)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(188)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserSELECT:
		localctx = NewQueryPrimaryDefaultContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(172)
			p.QuerySpecification()
		}

	case SQLBaseParserTABLE:
		localctx = NewTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(173)
			p.Match(SQLBaseParserTABLE)
		}
		{
			p.SetState(174)
			p.QualifiedName()
		}

	case SQLBaseParserVALUES:
		localctx = NewInlineTableContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(175)
			p.Match(SQLBaseParserVALUES)
		}
		{
			p.SetState(176)
			p.Expression()
		}
		p.SetState(181)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(177)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(178)
					p.Expression()
				}

			}
			p.SetState(183)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())
		}

	case SQLBaseParserT__0:
		localctx = NewSubqueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(184)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(185)
			p.QueryNoWith()
		}
		{
			p.SetState(186)
			p.Match(SQLBaseParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISortItemContext is an interface to support dynamic dispatch.
type ISortItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetOrdering returns the ordering token.
	GetOrdering() antlr.Token

	// GetNullOrdering returns the nullOrdering token.
	GetNullOrdering() antlr.Token

	// SetOrdering sets the ordering token.
	SetOrdering(antlr.Token)

	// SetNullOrdering sets the nullOrdering token.
	SetNullOrdering(antlr.Token)

	// IsSortItemContext differentiates from other interfaces.
	IsSortItemContext()
}

type SortItemContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	ordering     antlr.Token
	nullOrdering antlr.Token
}

func NewEmptySortItemContext() *SortItemContext {
	var p = new(SortItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_sortItem
	return p
}

func (*SortItemContext) IsSortItemContext() {}

func NewSortItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SortItemContext {
	var p = new(SortItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_sortItem

	return p
}

func (s *SortItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SortItemContext) GetOrdering() antlr.Token { return s.ordering }

func (s *SortItemContext) GetNullOrdering() antlr.Token { return s.nullOrdering }

func (s *SortItemContext) SetOrdering(v antlr.Token) { s.ordering = v }

func (s *SortItemContext) SetNullOrdering(v antlr.Token) { s.nullOrdering = v }

func (s *SortItemContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SortItemContext) NULLS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNULLS, 0)
}

func (s *SortItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserASC, 0)
}

func (s *SortItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDESC, 0)
}

func (s *SortItemContext) FIRST() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFIRST, 0)
}

func (s *SortItemContext) LAST() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLAST, 0)
}

func (s *SortItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SortItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SortItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSortItem(s)
	}
}

func (s *SortItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSortItem(s)
	}
}

func (p *SQLBaseParser) SortItem() (localctx ISortItemContext) {
	localctx = NewSortItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SQLBaseParserRULE_sortItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(190)
		p.Expression()
	}
	p.SetState(192)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserASC || _la == SQLBaseParserDESC {
		{
			p.SetState(191)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SortItemContext).ordering = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserASC || _la == SQLBaseParserDESC) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SortItemContext).ordering = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	p.SetState(196)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserNULLS {
		{
			p.SetState(194)
			p.Match(SQLBaseParserNULLS)
		}
		{
			p.SetState(195)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SortItemContext).nullOrdering = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserFIRST || _la == SQLBaseParserLAST) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SortItemContext).nullOrdering = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IQuerySpecificationContext is an interface to support dynamic dispatch.
type IQuerySpecificationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetWhere returns the where rule contexts.
	GetWhere() IBooleanExpressionContext

	// GetHaving returns the having rule contexts.
	GetHaving() IBooleanExpressionContext

	// SetWhere sets the where rule contexts.
	SetWhere(IBooleanExpressionContext)

	// SetHaving sets the having rule contexts.
	SetHaving(IBooleanExpressionContext)

	// IsQuerySpecificationContext differentiates from other interfaces.
	IsQuerySpecificationContext()
}

type QuerySpecificationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	where  IBooleanExpressionContext
	having IBooleanExpressionContext
}

func NewEmptyQuerySpecificationContext() *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_querySpecification
	return p
}

func (*QuerySpecificationContext) IsQuerySpecificationContext() {}

func NewQuerySpecificationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QuerySpecificationContext {
	var p = new(QuerySpecificationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_querySpecification

	return p
}

func (s *QuerySpecificationContext) GetParser() antlr.Parser { return s.parser }

func (s *QuerySpecificationContext) GetWhere() IBooleanExpressionContext { return s.where }

func (s *QuerySpecificationContext) GetHaving() IBooleanExpressionContext { return s.having }

func (s *QuerySpecificationContext) SetWhere(v IBooleanExpressionContext) { s.where = v }

func (s *QuerySpecificationContext) SetHaving(v IBooleanExpressionContext) { s.having = v }

func (s *QuerySpecificationContext) SELECT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSELECT, 0)
}

func (s *QuerySpecificationContext) AllSelectItem() []ISelectItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectItemContext)(nil)).Elem())
	var tst = make([]ISelectItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectItemContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) SelectItem(i int) ISelectItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectItemContext)
}

func (s *QuerySpecificationContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *QuerySpecificationContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFROM, 0)
}

func (s *QuerySpecificationContext) AllRelation() []IRelationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRelationContext)(nil)).Elem())
	var tst = make([]IRelationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRelationContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) Relation(i int) IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *QuerySpecificationContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWHERE, 0)
}

func (s *QuerySpecificationContext) GROUP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGROUP, 0)
}

func (s *QuerySpecificationContext) BY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBY, 0)
}

func (s *QuerySpecificationContext) GroupBy() IGroupByContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupByContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupByContext)
}

func (s *QuerySpecificationContext) HAVING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserHAVING, 0)
}

func (s *QuerySpecificationContext) AllBooleanExpression() []IBooleanExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem())
	var tst = make([]IBooleanExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBooleanExpressionContext)
		}
	}

	return tst
}

func (s *QuerySpecificationContext) BooleanExpression(i int) IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *QuerySpecificationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuerySpecificationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QuerySpecificationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQuerySpecification(s)
	}
}

func (s *QuerySpecificationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQuerySpecification(s)
	}
}

func (p *SQLBaseParser) QuerySpecification() (localctx IQuerySpecificationContext) {
	localctx = NewQuerySpecificationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SQLBaseParserRULE_querySpecification)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(198)
		p.Match(SQLBaseParserSELECT)
	}
	p.SetState(200)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(199)
			p.SetQuantifier()
		}

	}
	{
		p.SetState(202)
		p.SelectItem()
	}
	p.SetState(207)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(203)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(204)
				p.SelectItem()
			}

		}
		p.SetState(209)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext())
	}
	p.SetState(219)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(210)
			p.Match(SQLBaseParserFROM)
		}
		{
			p.SetState(211)
			p.relation(0)
		}
		p.SetState(216)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(212)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(213)
					p.relation(0)
				}

			}
			p.SetState(218)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext())
		}

	}
	p.SetState(223)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(221)
			p.Match(SQLBaseParserWHERE)
		}
		{
			p.SetState(222)

			var _x = p.booleanExpression(0)

			localctx.(*QuerySpecificationContext).where = _x
		}

	}
	p.SetState(228)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(225)
			p.Match(SQLBaseParserGROUP)
		}
		{
			p.SetState(226)
			p.Match(SQLBaseParserBY)
		}
		{
			p.SetState(227)
			p.GroupBy()
		}

	}
	p.SetState(232)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(230)
			p.Match(SQLBaseParserHAVING)
		}
		{
			p.SetState(231)

			var _x = p.booleanExpression(0)

			localctx.(*QuerySpecificationContext).having = _x
		}

	}

	return localctx
}

// IGroupByContext is an interface to support dynamic dispatch.
type IGroupByContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupByContext differentiates from other interfaces.
	IsGroupByContext()
}

type GroupByContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupByContext() *GroupByContext {
	var p = new(GroupByContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_groupBy
	return p
}

func (*GroupByContext) IsGroupByContext() {}

func NewGroupByContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupByContext {
	var p = new(GroupByContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_groupBy

	return p
}

func (s *GroupByContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupByContext) AllGroupingElement() []IGroupingElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupingElementContext)(nil)).Elem())
	var tst = make([]IGroupingElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupingElementContext)
		}
	}

	return tst
}

func (s *GroupByContext) GroupingElement(i int) IGroupingElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupingElementContext)
}

func (s *GroupByContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *GroupByContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupByContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupByContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterGroupBy(s)
	}
}

func (s *GroupByContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitGroupBy(s)
	}
}

func (p *SQLBaseParser) GroupBy() (localctx IGroupByContext) {
	localctx = NewGroupByContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SQLBaseParserRULE_groupBy)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(235)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(234)
			p.SetQuantifier()
		}

	}
	{
		p.SetState(237)
		p.GroupingElement()
	}
	p.SetState(242)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(238)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(239)
				p.GroupingElement()
			}

		}
		p.SetState(244)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())
	}

	return localctx
}

// IGroupingElementContext is an interface to support dynamic dispatch.
type IGroupingElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingElementContext differentiates from other interfaces.
	IsGroupingElementContext()
}

type GroupingElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingElementContext() *GroupingElementContext {
	var p = new(GroupingElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_groupingElement
	return p
}

func (*GroupingElementContext) IsGroupingElementContext() {}

func NewGroupingElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingElementContext {
	var p = new(GroupingElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_groupingElement

	return p
}

func (s *GroupingElementContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingElementContext) CopyFrom(ctx *GroupingElementContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *GroupingElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type MultipleGroupingSetsContext struct {
	*GroupingElementContext
}

func NewMultipleGroupingSetsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MultipleGroupingSetsContext {
	var p = new(MultipleGroupingSetsContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *MultipleGroupingSetsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MultipleGroupingSetsContext) GROUPING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGROUPING, 0)
}

func (s *MultipleGroupingSetsContext) SETS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSETS, 0)
}

func (s *MultipleGroupingSetsContext) AllGroupingSet() []IGroupingSetContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IGroupingSetContext)(nil)).Elem())
	var tst = make([]IGroupingSetContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IGroupingSetContext)
		}
	}

	return tst
}

func (s *MultipleGroupingSetsContext) GroupingSet(i int) IGroupingSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingSetContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IGroupingSetContext)
}

func (s *MultipleGroupingSetsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterMultipleGroupingSets(s)
	}
}

func (s *MultipleGroupingSetsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitMultipleGroupingSets(s)
	}
}

type SingleGroupingSetContext struct {
	*GroupingElementContext
}

func NewSingleGroupingSetContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SingleGroupingSetContext {
	var p = new(SingleGroupingSetContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *SingleGroupingSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SingleGroupingSetContext) GroupingExpressions() IGroupingExpressionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGroupingExpressionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGroupingExpressionsContext)
}

func (s *SingleGroupingSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSingleGroupingSet(s)
	}
}

func (s *SingleGroupingSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSingleGroupingSet(s)
	}
}

type CubeContext struct {
	*GroupingElementContext
}

func NewCubeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CubeContext {
	var p = new(CubeContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *CubeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CubeContext) CUBE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCUBE, 0)
}

func (s *CubeContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *CubeContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *CubeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterCube(s)
	}
}

func (s *CubeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitCube(s)
	}
}

type RollupContext struct {
	*GroupingElementContext
}

func NewRollupContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RollupContext {
	var p = new(RollupContext)

	p.GroupingElementContext = NewEmptyGroupingElementContext()
	p.parser = parser
	p.CopyFrom(ctx.(*GroupingElementContext))

	return p
}

func (s *RollupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RollupContext) ROLLUP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROLLUP, 0)
}

func (s *RollupContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *RollupContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *RollupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterRollup(s)
	}
}

func (s *RollupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitRollup(s)
	}
}

func (p *SQLBaseParser) GroupingElement() (localctx IGroupingElementContext) {
	localctx = NewGroupingElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SQLBaseParserRULE_groupingElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(285)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserT__0, SQLBaseParserT__3, SQLBaseParserADD, SQLBaseParserALL, SQLBaseParserSOME, SQLBaseParserANY, SQLBaseParserAT, SQLBaseParserNOT, SQLBaseParserNO, SQLBaseParserEXISTS, SQLBaseParserNULL, SQLBaseParserTRUE, SQLBaseParserFALSE, SQLBaseParserSUBSTRING, SQLBaseParserPOSITION, SQLBaseParserTINYINT, SQLBaseParserSMALLINT, SQLBaseParserINTEGER, SQLBaseParserDATE, SQLBaseParserTIME, SQLBaseParserTIMESTAMP, SQLBaseParserINTERVAL, SQLBaseParserYEAR, SQLBaseParserMONTH, SQLBaseParserDAY, SQLBaseParserHOUR, SQLBaseParserMINUTE, SQLBaseParserSECOND, SQLBaseParserZONE, SQLBaseParserCURRENT_DATE, SQLBaseParserCURRENT_TIME, SQLBaseParserCURRENT_TIMESTAMP, SQLBaseParserLOCALTIME, SQLBaseParserLOCALTIMESTAMP, SQLBaseParserEXTRACT, SQLBaseParserCASE, SQLBaseParserFILTER, SQLBaseParserOVER, SQLBaseParserPARTITION, SQLBaseParserRANGE, SQLBaseParserROWS, SQLBaseParserPRECEDING, SQLBaseParserFOLLOWING, SQLBaseParserCURRENT, SQLBaseParserROW, SQLBaseParserSCHEMA, SQLBaseParserCOMMENT, SQLBaseParserVIEW, SQLBaseParserREPLACE, SQLBaseParserGRANT, SQLBaseParserREVOKE, SQLBaseParserPRIVILEGES, SQLBaseParserPUBLIC, SQLBaseParserOPTION, SQLBaseParserEXPLAIN, SQLBaseParserANALYZE, SQLBaseParserFORMAT, SQLBaseParserTYPE, SQLBaseParserTEXT, SQLBaseParserGRAPHVIZ, SQLBaseParserLOGICAL, SQLBaseParserDISTRIBUTED, SQLBaseParserVALIDATE, SQLBaseParserCAST, SQLBaseParserTRY_CAST, SQLBaseParserSHOW, SQLBaseParserTABLES, SQLBaseParserSCHEMAS, SQLBaseParserCATALOGS, SQLBaseParserCOLUMNS, SQLBaseParserCOLUMN, SQLBaseParserUSE, SQLBaseParserPARTITIONS, SQLBaseParserFUNCTIONS, SQLBaseParserTO, SQLBaseParserSYSTEM, SQLBaseParserBERNOULLI, SQLBaseParserPOISSONIZED, SQLBaseParserTABLESAMPLE, SQLBaseParserARRAY, SQLBaseParserMAP, SQLBaseParserSET, SQLBaseParserRESET, SQLBaseParserSESSION, SQLBaseParserDATA, SQLBaseParserSTART, SQLBaseParserTRANSACTION, SQLBaseParserCOMMIT, SQLBaseParserROLLBACK, SQLBaseParserWORK, SQLBaseParserISOLATION, SQLBaseParserLEVEL, SQLBaseParserSERIALIZABLE, SQLBaseParserREPEATABLE, SQLBaseParserCOMMITTED, SQLBaseParserUNCOMMITTED, SQLBaseParserREAD, SQLBaseParserWRITE, SQLBaseParserONLY, SQLBaseParserCALL, SQLBaseParserINPUT, SQLBaseParserOUTPUT, SQLBaseParserCASCADE, SQLBaseParserRESTRICT, SQLBaseParserINCLUDING, SQLBaseParserEXCLUDING, SQLBaseParserPROPERTIES, SQLBaseParserNORMALIZE, SQLBaseParserNFD, SQLBaseParserNFC, SQLBaseParserNFKD, SQLBaseParserNFKC, SQLBaseParserIF, SQLBaseParserNULLIF, SQLBaseParserCOALESCE, SQLBaseParserTIME_WITH_TIME_ZONE, SQLBaseParserTIMESTAMP_WITH_TIME_ZONE, SQLBaseParserDOUBLE_PRECISION, SQLBaseParserPLUS, SQLBaseParserMINUS, SQLBaseParserSTRING, SQLBaseParserBINARY_LITERAL, SQLBaseParserINTEGER_VALUE, SQLBaseParserDECIMAL_VALUE, SQLBaseParserIDENTIFIER, SQLBaseParserDIGIT_IDENTIFIER, SQLBaseParserQUOTED_IDENTIFIER, SQLBaseParserBACKQUOTED_IDENTIFIER:
		localctx = NewSingleGroupingSetContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(245)
			p.GroupingExpressions()
		}

	case SQLBaseParserROLLUP:
		localctx = NewRollupContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(246)
			p.Match(SQLBaseParserROLLUP)
		}
		{
			p.SetState(247)
			p.Match(SQLBaseParserT__0)
		}
		p.SetState(256)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserAT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SQLBaseParserFILTER-84))|(1<<(SQLBaseParserOVER-84))|(1<<(SQLBaseParserPARTITION-84))|(1<<(SQLBaseParserRANGE-84))|(1<<(SQLBaseParserROWS-84))|(1<<(SQLBaseParserPRECEDING-84))|(1<<(SQLBaseParserFOLLOWING-84))|(1<<(SQLBaseParserCURRENT-84))|(1<<(SQLBaseParserROW-84))|(1<<(SQLBaseParserSCHEMA-84))|(1<<(SQLBaseParserCOMMENT-84))|(1<<(SQLBaseParserVIEW-84))|(1<<(SQLBaseParserREPLACE-84))|(1<<(SQLBaseParserGRANT-84))|(1<<(SQLBaseParserREVOKE-84))|(1<<(SQLBaseParserPRIVILEGES-84))|(1<<(SQLBaseParserPUBLIC-84))|(1<<(SQLBaseParserOPTION-84))|(1<<(SQLBaseParserEXPLAIN-84))|(1<<(SQLBaseParserANALYZE-84))|(1<<(SQLBaseParserFORMAT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SQLBaseParserTYPE-116))|(1<<(SQLBaseParserTEXT-116))|(1<<(SQLBaseParserGRAPHVIZ-116))|(1<<(SQLBaseParserLOGICAL-116))|(1<<(SQLBaseParserDISTRIBUTED-116))|(1<<(SQLBaseParserVALIDATE-116))|(1<<(SQLBaseParserSHOW-116))|(1<<(SQLBaseParserTABLES-116))|(1<<(SQLBaseParserSCHEMAS-116))|(1<<(SQLBaseParserCATALOGS-116))|(1<<(SQLBaseParserCOLUMNS-116))|(1<<(SQLBaseParserCOLUMN-116))|(1<<(SQLBaseParserUSE-116))|(1<<(SQLBaseParserPARTITIONS-116))|(1<<(SQLBaseParserFUNCTIONS-116))|(1<<(SQLBaseParserTO-116))|(1<<(SQLBaseParserSYSTEM-116))|(1<<(SQLBaseParserBERNOULLI-116))|(1<<(SQLBaseParserPOISSONIZED-116))|(1<<(SQLBaseParserTABLESAMPLE-116))|(1<<(SQLBaseParserARRAY-116))|(1<<(SQLBaseParserMAP-116)))) != 0) || (((_la-148)&-(0x1f+1)) == 0 && ((1<<uint((_la-148)))&((1<<(SQLBaseParserSET-148))|(1<<(SQLBaseParserRESET-148))|(1<<(SQLBaseParserSESSION-148))|(1<<(SQLBaseParserDATA-148))|(1<<(SQLBaseParserSTART-148))|(1<<(SQLBaseParserTRANSACTION-148))|(1<<(SQLBaseParserCOMMIT-148))|(1<<(SQLBaseParserROLLBACK-148))|(1<<(SQLBaseParserWORK-148))|(1<<(SQLBaseParserISOLATION-148))|(1<<(SQLBaseParserLEVEL-148))|(1<<(SQLBaseParserSERIALIZABLE-148))|(1<<(SQLBaseParserREPEATABLE-148))|(1<<(SQLBaseParserCOMMITTED-148))|(1<<(SQLBaseParserUNCOMMITTED-148))|(1<<(SQLBaseParserREAD-148))|(1<<(SQLBaseParserWRITE-148))|(1<<(SQLBaseParserONLY-148))|(1<<(SQLBaseParserCALL-148))|(1<<(SQLBaseParserINPUT-148))|(1<<(SQLBaseParserOUTPUT-148))|(1<<(SQLBaseParserCASCADE-148))|(1<<(SQLBaseParserRESTRICT-148))|(1<<(SQLBaseParserINCLUDING-148))|(1<<(SQLBaseParserEXCLUDING-148))|(1<<(SQLBaseParserPROPERTIES-148))|(1<<(SQLBaseParserNFD-148))|(1<<(SQLBaseParserNFC-148)))) != 0) || (((_la-180)&-(0x1f+1)) == 0 && ((1<<uint((_la-180)))&((1<<(SQLBaseParserNFKD-180))|(1<<(SQLBaseParserNFKC-180))|(1<<(SQLBaseParserIF-180))|(1<<(SQLBaseParserNULLIF-180))|(1<<(SQLBaseParserCOALESCE-180))|(1<<(SQLBaseParserIDENTIFIER-180))|(1<<(SQLBaseParserDIGIT_IDENTIFIER-180))|(1<<(SQLBaseParserQUOTED_IDENTIFIER-180))|(1<<(SQLBaseParserBACKQUOTED_IDENTIFIER-180)))) != 0) {
			{
				p.SetState(248)
				p.QualifiedName()
			}
			p.SetState(253)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(249)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(250)
					p.QualifiedName()
				}

				p.SetState(255)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(258)
			p.Match(SQLBaseParserT__2)
		}

	case SQLBaseParserCUBE:
		localctx = NewCubeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(259)
			p.Match(SQLBaseParserCUBE)
		}
		{
			p.SetState(260)
			p.Match(SQLBaseParserT__0)
		}
		p.SetState(269)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserAT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SQLBaseParserFILTER-84))|(1<<(SQLBaseParserOVER-84))|(1<<(SQLBaseParserPARTITION-84))|(1<<(SQLBaseParserRANGE-84))|(1<<(SQLBaseParserROWS-84))|(1<<(SQLBaseParserPRECEDING-84))|(1<<(SQLBaseParserFOLLOWING-84))|(1<<(SQLBaseParserCURRENT-84))|(1<<(SQLBaseParserROW-84))|(1<<(SQLBaseParserSCHEMA-84))|(1<<(SQLBaseParserCOMMENT-84))|(1<<(SQLBaseParserVIEW-84))|(1<<(SQLBaseParserREPLACE-84))|(1<<(SQLBaseParserGRANT-84))|(1<<(SQLBaseParserREVOKE-84))|(1<<(SQLBaseParserPRIVILEGES-84))|(1<<(SQLBaseParserPUBLIC-84))|(1<<(SQLBaseParserOPTION-84))|(1<<(SQLBaseParserEXPLAIN-84))|(1<<(SQLBaseParserANALYZE-84))|(1<<(SQLBaseParserFORMAT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SQLBaseParserTYPE-116))|(1<<(SQLBaseParserTEXT-116))|(1<<(SQLBaseParserGRAPHVIZ-116))|(1<<(SQLBaseParserLOGICAL-116))|(1<<(SQLBaseParserDISTRIBUTED-116))|(1<<(SQLBaseParserVALIDATE-116))|(1<<(SQLBaseParserSHOW-116))|(1<<(SQLBaseParserTABLES-116))|(1<<(SQLBaseParserSCHEMAS-116))|(1<<(SQLBaseParserCATALOGS-116))|(1<<(SQLBaseParserCOLUMNS-116))|(1<<(SQLBaseParserCOLUMN-116))|(1<<(SQLBaseParserUSE-116))|(1<<(SQLBaseParserPARTITIONS-116))|(1<<(SQLBaseParserFUNCTIONS-116))|(1<<(SQLBaseParserTO-116))|(1<<(SQLBaseParserSYSTEM-116))|(1<<(SQLBaseParserBERNOULLI-116))|(1<<(SQLBaseParserPOISSONIZED-116))|(1<<(SQLBaseParserTABLESAMPLE-116))|(1<<(SQLBaseParserARRAY-116))|(1<<(SQLBaseParserMAP-116)))) != 0) || (((_la-148)&-(0x1f+1)) == 0 && ((1<<uint((_la-148)))&((1<<(SQLBaseParserSET-148))|(1<<(SQLBaseParserRESET-148))|(1<<(SQLBaseParserSESSION-148))|(1<<(SQLBaseParserDATA-148))|(1<<(SQLBaseParserSTART-148))|(1<<(SQLBaseParserTRANSACTION-148))|(1<<(SQLBaseParserCOMMIT-148))|(1<<(SQLBaseParserROLLBACK-148))|(1<<(SQLBaseParserWORK-148))|(1<<(SQLBaseParserISOLATION-148))|(1<<(SQLBaseParserLEVEL-148))|(1<<(SQLBaseParserSERIALIZABLE-148))|(1<<(SQLBaseParserREPEATABLE-148))|(1<<(SQLBaseParserCOMMITTED-148))|(1<<(SQLBaseParserUNCOMMITTED-148))|(1<<(SQLBaseParserREAD-148))|(1<<(SQLBaseParserWRITE-148))|(1<<(SQLBaseParserONLY-148))|(1<<(SQLBaseParserCALL-148))|(1<<(SQLBaseParserINPUT-148))|(1<<(SQLBaseParserOUTPUT-148))|(1<<(SQLBaseParserCASCADE-148))|(1<<(SQLBaseParserRESTRICT-148))|(1<<(SQLBaseParserINCLUDING-148))|(1<<(SQLBaseParserEXCLUDING-148))|(1<<(SQLBaseParserPROPERTIES-148))|(1<<(SQLBaseParserNFD-148))|(1<<(SQLBaseParserNFC-148)))) != 0) || (((_la-180)&-(0x1f+1)) == 0 && ((1<<uint((_la-180)))&((1<<(SQLBaseParserNFKD-180))|(1<<(SQLBaseParserNFKC-180))|(1<<(SQLBaseParserIF-180))|(1<<(SQLBaseParserNULLIF-180))|(1<<(SQLBaseParserCOALESCE-180))|(1<<(SQLBaseParserIDENTIFIER-180))|(1<<(SQLBaseParserDIGIT_IDENTIFIER-180))|(1<<(SQLBaseParserQUOTED_IDENTIFIER-180))|(1<<(SQLBaseParserBACKQUOTED_IDENTIFIER-180)))) != 0) {
			{
				p.SetState(261)
				p.QualifiedName()
			}
			p.SetState(266)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(262)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(263)
					p.QualifiedName()
				}

				p.SetState(268)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(271)
			p.Match(SQLBaseParserT__2)
		}

	case SQLBaseParserGROUPING:
		localctx = NewMultipleGroupingSetsContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(272)
			p.Match(SQLBaseParserGROUPING)
		}
		{
			p.SetState(273)
			p.Match(SQLBaseParserSETS)
		}
		{
			p.SetState(274)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(275)
			p.GroupingSet()
		}
		p.SetState(280)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(276)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(277)
				p.GroupingSet()
			}

			p.SetState(282)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(283)
			p.Match(SQLBaseParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IGroupingExpressionsContext is an interface to support dynamic dispatch.
type IGroupingExpressionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingExpressionsContext differentiates from other interfaces.
	IsGroupingExpressionsContext()
}

type GroupingExpressionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingExpressionsContext() *GroupingExpressionsContext {
	var p = new(GroupingExpressionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_groupingExpressions
	return p
}

func (*GroupingExpressionsContext) IsGroupingExpressionsContext() {}

func NewGroupingExpressionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingExpressionsContext {
	var p = new(GroupingExpressionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_groupingExpressions

	return p
}

func (s *GroupingExpressionsContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingExpressionsContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *GroupingExpressionsContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GroupingExpressionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingExpressionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingExpressionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterGroupingExpressions(s)
	}
}

func (s *GroupingExpressionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitGroupingExpressions(s)
	}
}

func (p *SQLBaseParser) GroupingExpressions() (localctx IGroupingExpressionsContext) {
	localctx = NewGroupingExpressionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SQLBaseParserRULE_groupingExpressions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(287)
			p.Match(SQLBaseParserT__0)
		}
		p.SetState(296)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserT__0)|(1<<SQLBaseParserT__3)|(1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserAT)|(1<<SQLBaseParserNOT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserEXISTS-32))|(1<<(SQLBaseParserNULL-32))|(1<<(SQLBaseParserTRUE-32))|(1<<(SQLBaseParserFALSE-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32))|(1<<(SQLBaseParserCURRENT_DATE-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SQLBaseParserCURRENT_TIME-64))|(1<<(SQLBaseParserCURRENT_TIMESTAMP-64))|(1<<(SQLBaseParserLOCALTIME-64))|(1<<(SQLBaseParserLOCALTIMESTAMP-64))|(1<<(SQLBaseParserEXTRACT-64))|(1<<(SQLBaseParserCASE-64))|(1<<(SQLBaseParserFILTER-64))|(1<<(SQLBaseParserOVER-64))|(1<<(SQLBaseParserPARTITION-64))|(1<<(SQLBaseParserRANGE-64))|(1<<(SQLBaseParserROWS-64))|(1<<(SQLBaseParserPRECEDING-64))|(1<<(SQLBaseParserFOLLOWING-64))|(1<<(SQLBaseParserCURRENT-64))|(1<<(SQLBaseParserROW-64)))) != 0) || (((_la-98)&-(0x1f+1)) == 0 && ((1<<uint((_la-98)))&((1<<(SQLBaseParserSCHEMA-98))|(1<<(SQLBaseParserCOMMENT-98))|(1<<(SQLBaseParserVIEW-98))|(1<<(SQLBaseParserREPLACE-98))|(1<<(SQLBaseParserGRANT-98))|(1<<(SQLBaseParserREVOKE-98))|(1<<(SQLBaseParserPRIVILEGES-98))|(1<<(SQLBaseParserPUBLIC-98))|(1<<(SQLBaseParserOPTION-98))|(1<<(SQLBaseParserEXPLAIN-98))|(1<<(SQLBaseParserANALYZE-98))|(1<<(SQLBaseParserFORMAT-98))|(1<<(SQLBaseParserTYPE-98))|(1<<(SQLBaseParserTEXT-98))|(1<<(SQLBaseParserGRAPHVIZ-98))|(1<<(SQLBaseParserLOGICAL-98))|(1<<(SQLBaseParserDISTRIBUTED-98))|(1<<(SQLBaseParserVALIDATE-98))|(1<<(SQLBaseParserCAST-98))|(1<<(SQLBaseParserTRY_CAST-98))|(1<<(SQLBaseParserSHOW-98))|(1<<(SQLBaseParserTABLES-98))|(1<<(SQLBaseParserSCHEMAS-98))|(1<<(SQLBaseParserCATALOGS-98))|(1<<(SQLBaseParserCOLUMNS-98))|(1<<(SQLBaseParserCOLUMN-98)))) != 0) || (((_la-130)&-(0x1f+1)) == 0 && ((1<<uint((_la-130)))&((1<<(SQLBaseParserUSE-130))|(1<<(SQLBaseParserPARTITIONS-130))|(1<<(SQLBaseParserFUNCTIONS-130))|(1<<(SQLBaseParserTO-130))|(1<<(SQLBaseParserSYSTEM-130))|(1<<(SQLBaseParserBERNOULLI-130))|(1<<(SQLBaseParserPOISSONIZED-130))|(1<<(SQLBaseParserTABLESAMPLE-130))|(1<<(SQLBaseParserARRAY-130))|(1<<(SQLBaseParserMAP-130))|(1<<(SQLBaseParserSET-130))|(1<<(SQLBaseParserRESET-130))|(1<<(SQLBaseParserSESSION-130))|(1<<(SQLBaseParserDATA-130))|(1<<(SQLBaseParserSTART-130))|(1<<(SQLBaseParserTRANSACTION-130))|(1<<(SQLBaseParserCOMMIT-130))|(1<<(SQLBaseParserROLLBACK-130))|(1<<(SQLBaseParserWORK-130))|(1<<(SQLBaseParserISOLATION-130))|(1<<(SQLBaseParserLEVEL-130))|(1<<(SQLBaseParserSERIALIZABLE-130))|(1<<(SQLBaseParserREPEATABLE-130))|(1<<(SQLBaseParserCOMMITTED-130)))) != 0) || (((_la-162)&-(0x1f+1)) == 0 && ((1<<uint((_la-162)))&((1<<(SQLBaseParserUNCOMMITTED-162))|(1<<(SQLBaseParserREAD-162))|(1<<(SQLBaseParserWRITE-162))|(1<<(SQLBaseParserONLY-162))|(1<<(SQLBaseParserCALL-162))|(1<<(SQLBaseParserINPUT-162))|(1<<(SQLBaseParserOUTPUT-162))|(1<<(SQLBaseParserCASCADE-162))|(1<<(SQLBaseParserRESTRICT-162))|(1<<(SQLBaseParserINCLUDING-162))|(1<<(SQLBaseParserEXCLUDING-162))|(1<<(SQLBaseParserPROPERTIES-162))|(1<<(SQLBaseParserNORMALIZE-162))|(1<<(SQLBaseParserNFD-162))|(1<<(SQLBaseParserNFC-162))|(1<<(SQLBaseParserNFKD-162))|(1<<(SQLBaseParserNFKC-162))|(1<<(SQLBaseParserIF-162))|(1<<(SQLBaseParserNULLIF-162))|(1<<(SQLBaseParserCOALESCE-162))|(1<<(SQLBaseParserTIME_WITH_TIME_ZONE-162))|(1<<(SQLBaseParserTIMESTAMP_WITH_TIME_ZONE-162))|(1<<(SQLBaseParserDOUBLE_PRECISION-162)))) != 0) || (((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(SQLBaseParserPLUS-194))|(1<<(SQLBaseParserMINUS-194))|(1<<(SQLBaseParserSTRING-194))|(1<<(SQLBaseParserBINARY_LITERAL-194))|(1<<(SQLBaseParserINTEGER_VALUE-194))|(1<<(SQLBaseParserDECIMAL_VALUE-194))|(1<<(SQLBaseParserIDENTIFIER-194))|(1<<(SQLBaseParserDIGIT_IDENTIFIER-194))|(1<<(SQLBaseParserQUOTED_IDENTIFIER-194))|(1<<(SQLBaseParserBACKQUOTED_IDENTIFIER-194)))) != 0) {
			{
				p.SetState(288)
				p.Expression()
			}
			p.SetState(293)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(289)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(290)
					p.Expression()
				}

				p.SetState(295)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(298)
			p.Match(SQLBaseParserT__2)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(299)
			p.Expression()
		}

	}

	return localctx
}

// IGroupingSetContext is an interface to support dynamic dispatch.
type IGroupingSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGroupingSetContext differentiates from other interfaces.
	IsGroupingSetContext()
}

type GroupingSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGroupingSetContext() *GroupingSetContext {
	var p = new(GroupingSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_groupingSet
	return p
}

func (*GroupingSetContext) IsGroupingSetContext() {}

func NewGroupingSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GroupingSetContext {
	var p = new(GroupingSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_groupingSet

	return p
}

func (s *GroupingSetContext) GetParser() antlr.Parser { return s.parser }

func (s *GroupingSetContext) AllQualifiedName() []IQualifiedNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem())
	var tst = make([]IQualifiedNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IQualifiedNameContext)
		}
	}

	return tst
}

func (s *GroupingSetContext) QualifiedName(i int) IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *GroupingSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GroupingSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GroupingSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterGroupingSet(s)
	}
}

func (s *GroupingSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitGroupingSet(s)
	}
}

func (p *SQLBaseParser) GroupingSet() (localctx IGroupingSetContext) {
	localctx = NewGroupingSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SQLBaseParserRULE_groupingSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(315)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserT__0:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(302)
			p.Match(SQLBaseParserT__0)
		}
		p.SetState(311)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserAT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SQLBaseParserFILTER-84))|(1<<(SQLBaseParserOVER-84))|(1<<(SQLBaseParserPARTITION-84))|(1<<(SQLBaseParserRANGE-84))|(1<<(SQLBaseParserROWS-84))|(1<<(SQLBaseParserPRECEDING-84))|(1<<(SQLBaseParserFOLLOWING-84))|(1<<(SQLBaseParserCURRENT-84))|(1<<(SQLBaseParserROW-84))|(1<<(SQLBaseParserSCHEMA-84))|(1<<(SQLBaseParserCOMMENT-84))|(1<<(SQLBaseParserVIEW-84))|(1<<(SQLBaseParserREPLACE-84))|(1<<(SQLBaseParserGRANT-84))|(1<<(SQLBaseParserREVOKE-84))|(1<<(SQLBaseParserPRIVILEGES-84))|(1<<(SQLBaseParserPUBLIC-84))|(1<<(SQLBaseParserOPTION-84))|(1<<(SQLBaseParserEXPLAIN-84))|(1<<(SQLBaseParserANALYZE-84))|(1<<(SQLBaseParserFORMAT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SQLBaseParserTYPE-116))|(1<<(SQLBaseParserTEXT-116))|(1<<(SQLBaseParserGRAPHVIZ-116))|(1<<(SQLBaseParserLOGICAL-116))|(1<<(SQLBaseParserDISTRIBUTED-116))|(1<<(SQLBaseParserVALIDATE-116))|(1<<(SQLBaseParserSHOW-116))|(1<<(SQLBaseParserTABLES-116))|(1<<(SQLBaseParserSCHEMAS-116))|(1<<(SQLBaseParserCATALOGS-116))|(1<<(SQLBaseParserCOLUMNS-116))|(1<<(SQLBaseParserCOLUMN-116))|(1<<(SQLBaseParserUSE-116))|(1<<(SQLBaseParserPARTITIONS-116))|(1<<(SQLBaseParserFUNCTIONS-116))|(1<<(SQLBaseParserTO-116))|(1<<(SQLBaseParserSYSTEM-116))|(1<<(SQLBaseParserBERNOULLI-116))|(1<<(SQLBaseParserPOISSONIZED-116))|(1<<(SQLBaseParserTABLESAMPLE-116))|(1<<(SQLBaseParserARRAY-116))|(1<<(SQLBaseParserMAP-116)))) != 0) || (((_la-148)&-(0x1f+1)) == 0 && ((1<<uint((_la-148)))&((1<<(SQLBaseParserSET-148))|(1<<(SQLBaseParserRESET-148))|(1<<(SQLBaseParserSESSION-148))|(1<<(SQLBaseParserDATA-148))|(1<<(SQLBaseParserSTART-148))|(1<<(SQLBaseParserTRANSACTION-148))|(1<<(SQLBaseParserCOMMIT-148))|(1<<(SQLBaseParserROLLBACK-148))|(1<<(SQLBaseParserWORK-148))|(1<<(SQLBaseParserISOLATION-148))|(1<<(SQLBaseParserLEVEL-148))|(1<<(SQLBaseParserSERIALIZABLE-148))|(1<<(SQLBaseParserREPEATABLE-148))|(1<<(SQLBaseParserCOMMITTED-148))|(1<<(SQLBaseParserUNCOMMITTED-148))|(1<<(SQLBaseParserREAD-148))|(1<<(SQLBaseParserWRITE-148))|(1<<(SQLBaseParserONLY-148))|(1<<(SQLBaseParserCALL-148))|(1<<(SQLBaseParserINPUT-148))|(1<<(SQLBaseParserOUTPUT-148))|(1<<(SQLBaseParserCASCADE-148))|(1<<(SQLBaseParserRESTRICT-148))|(1<<(SQLBaseParserINCLUDING-148))|(1<<(SQLBaseParserEXCLUDING-148))|(1<<(SQLBaseParserPROPERTIES-148))|(1<<(SQLBaseParserNFD-148))|(1<<(SQLBaseParserNFC-148)))) != 0) || (((_la-180)&-(0x1f+1)) == 0 && ((1<<uint((_la-180)))&((1<<(SQLBaseParserNFKD-180))|(1<<(SQLBaseParserNFKC-180))|(1<<(SQLBaseParserIF-180))|(1<<(SQLBaseParserNULLIF-180))|(1<<(SQLBaseParserCOALESCE-180))|(1<<(SQLBaseParserIDENTIFIER-180))|(1<<(SQLBaseParserDIGIT_IDENTIFIER-180))|(1<<(SQLBaseParserQUOTED_IDENTIFIER-180))|(1<<(SQLBaseParserBACKQUOTED_IDENTIFIER-180)))) != 0) {
			{
				p.SetState(303)
				p.QualifiedName()
			}
			p.SetState(308)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(304)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(305)
					p.QualifiedName()
				}

				p.SetState(310)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(313)
			p.Match(SQLBaseParserT__2)
		}

	case SQLBaseParserADD, SQLBaseParserALL, SQLBaseParserSOME, SQLBaseParserANY, SQLBaseParserAT, SQLBaseParserNO, SQLBaseParserSUBSTRING, SQLBaseParserPOSITION, SQLBaseParserTINYINT, SQLBaseParserSMALLINT, SQLBaseParserINTEGER, SQLBaseParserDATE, SQLBaseParserTIME, SQLBaseParserTIMESTAMP, SQLBaseParserINTERVAL, SQLBaseParserYEAR, SQLBaseParserMONTH, SQLBaseParserDAY, SQLBaseParserHOUR, SQLBaseParserMINUTE, SQLBaseParserSECOND, SQLBaseParserZONE, SQLBaseParserFILTER, SQLBaseParserOVER, SQLBaseParserPARTITION, SQLBaseParserRANGE, SQLBaseParserROWS, SQLBaseParserPRECEDING, SQLBaseParserFOLLOWING, SQLBaseParserCURRENT, SQLBaseParserROW, SQLBaseParserSCHEMA, SQLBaseParserCOMMENT, SQLBaseParserVIEW, SQLBaseParserREPLACE, SQLBaseParserGRANT, SQLBaseParserREVOKE, SQLBaseParserPRIVILEGES, SQLBaseParserPUBLIC, SQLBaseParserOPTION, SQLBaseParserEXPLAIN, SQLBaseParserANALYZE, SQLBaseParserFORMAT, SQLBaseParserTYPE, SQLBaseParserTEXT, SQLBaseParserGRAPHVIZ, SQLBaseParserLOGICAL, SQLBaseParserDISTRIBUTED, SQLBaseParserVALIDATE, SQLBaseParserSHOW, SQLBaseParserTABLES, SQLBaseParserSCHEMAS, SQLBaseParserCATALOGS, SQLBaseParserCOLUMNS, SQLBaseParserCOLUMN, SQLBaseParserUSE, SQLBaseParserPARTITIONS, SQLBaseParserFUNCTIONS, SQLBaseParserTO, SQLBaseParserSYSTEM, SQLBaseParserBERNOULLI, SQLBaseParserPOISSONIZED, SQLBaseParserTABLESAMPLE, SQLBaseParserARRAY, SQLBaseParserMAP, SQLBaseParserSET, SQLBaseParserRESET, SQLBaseParserSESSION, SQLBaseParserDATA, SQLBaseParserSTART, SQLBaseParserTRANSACTION, SQLBaseParserCOMMIT, SQLBaseParserROLLBACK, SQLBaseParserWORK, SQLBaseParserISOLATION, SQLBaseParserLEVEL, SQLBaseParserSERIALIZABLE, SQLBaseParserREPEATABLE, SQLBaseParserCOMMITTED, SQLBaseParserUNCOMMITTED, SQLBaseParserREAD, SQLBaseParserWRITE, SQLBaseParserONLY, SQLBaseParserCALL, SQLBaseParserINPUT, SQLBaseParserOUTPUT, SQLBaseParserCASCADE, SQLBaseParserRESTRICT, SQLBaseParserINCLUDING, SQLBaseParserEXCLUDING, SQLBaseParserPROPERTIES, SQLBaseParserNFD, SQLBaseParserNFC, SQLBaseParserNFKD, SQLBaseParserNFKC, SQLBaseParserIF, SQLBaseParserNULLIF, SQLBaseParserCOALESCE, SQLBaseParserIDENTIFIER, SQLBaseParserDIGIT_IDENTIFIER, SQLBaseParserQUOTED_IDENTIFIER, SQLBaseParserBACKQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(314)
			p.QualifiedName()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INamedQueryContext is an interface to support dynamic dispatch.
type INamedQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsNamedQueryContext differentiates from other interfaces.
	IsNamedQueryContext()
}

type NamedQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyNamedQueryContext() *NamedQueryContext {
	var p = new(NamedQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_namedQuery
	return p
}

func (*NamedQueryContext) IsNamedQueryContext() {}

func NewNamedQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedQueryContext {
	var p = new(NamedQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_namedQuery

	return p
}

func (s *NamedQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedQueryContext) GetName() IIdentifierContext { return s.name }

func (s *NamedQueryContext) SetName(v IIdentifierContext) { s.name = v }

func (s *NamedQueryContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAS, 0)
}

func (s *NamedQueryContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *NamedQueryContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedQueryContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *NamedQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterNamedQuery(s)
	}
}

func (s *NamedQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitNamedQuery(s)
	}
}

func (p *SQLBaseParser) NamedQuery() (localctx INamedQueryContext) {
	localctx = NewNamedQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SQLBaseParserRULE_namedQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(317)

		var _x = p.Identifier()

		localctx.(*NamedQueryContext).name = _x
	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserT__0 {
		{
			p.SetState(318)
			p.ColumnAliases()
		}

	}
	{
		p.SetState(321)
		p.Match(SQLBaseParserAS)
	}
	{
		p.SetState(322)
		p.Match(SQLBaseParserT__0)
	}
	{
		p.SetState(323)
		p.Query()
	}
	{
		p.SetState(324)
		p.Match(SQLBaseParserT__2)
	}

	return localctx
}

// ISetQuantifierContext is an interface to support dynamic dispatch.
type ISetQuantifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSetQuantifierContext differentiates from other interfaces.
	IsSetQuantifierContext()
}

type SetQuantifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetQuantifierContext() *SetQuantifierContext {
	var p = new(SetQuantifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_setQuantifier
	return p
}

func (*SetQuantifierContext) IsSetQuantifierContext() {}

func NewSetQuantifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetQuantifierContext {
	var p = new(SetQuantifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_setQuantifier

	return p
}

func (s *SetQuantifierContext) GetParser() antlr.Parser { return s.parser }

func (s *SetQuantifierContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDISTINCT, 0)
}

func (s *SetQuantifierContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserALL, 0)
}

func (s *SetQuantifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetQuantifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetQuantifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSetQuantifier(s)
	}
}

func (s *SetQuantifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSetQuantifier(s)
	}
}

func (p *SQLBaseParser) SetQuantifier() (localctx ISetQuantifierContext) {
	localctx = NewSetQuantifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SQLBaseParserRULE_setQuantifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(326)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLBaseParserALL || _la == SQLBaseParserDISTINCT) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ISelectItemContext is an interface to support dynamic dispatch.
type ISelectItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectItemContext differentiates from other interfaces.
	IsSelectItemContext()
}

type SelectItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectItemContext() *SelectItemContext {
	var p = new(SelectItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_selectItem
	return p
}

func (*SelectItemContext) IsSelectItemContext() {}

func NewSelectItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectItemContext {
	var p = new(SelectItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_selectItem

	return p
}

func (s *SelectItemContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectItemContext) CopyFrom(ctx *SelectItemContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *SelectItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SelectAllContext struct {
	*SelectItemContext
}

func NewSelectAllContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectAllContext {
	var p = new(SelectAllContext)

	p.SelectItemContext = NewEmptySelectItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectItemContext))

	return p
}

func (s *SelectAllContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectAllContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *SelectAllContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDOT, 0)
}

func (s *SelectAllContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserASTERISK, 0)
}

func (s *SelectAllContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSelectAll(s)
	}
}

func (s *SelectAllContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSelectAll(s)
	}
}

type SelectSingleContext struct {
	*SelectItemContext
}

func NewSelectSingleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SelectSingleContext {
	var p = new(SelectSingleContext)

	p.SelectItemContext = NewEmptySelectItemContext()
	p.parser = parser
	p.CopyFrom(ctx.(*SelectItemContext))

	return p
}

func (s *SelectSingleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectSingleContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SelectSingleContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SelectSingleContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAS, 0)
}

func (s *SelectSingleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSelectSingle(s)
	}
}

func (s *SelectSingleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSelectSingle(s)
	}
}

func (p *SQLBaseParser) SelectItem() (localctx ISelectItemContext) {
	localctx = NewSelectItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SQLBaseParserRULE_selectItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(340)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 41, p.GetParserRuleContext()) {
	case 1:
		localctx = NewSelectSingleContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(328)
			p.Expression()
		}
		p.SetState(333)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
			p.SetState(330)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == SQLBaseParserAS {
				{
					p.SetState(329)
					p.Match(SQLBaseParserAS)
				}

			}
			{
				p.SetState(332)
				p.Identifier()
			}

		}

	case 2:
		localctx = NewSelectAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(335)
			p.QualifiedName()
		}
		{
			p.SetState(336)
			p.Match(SQLBaseParserDOT)
		}
		{
			p.SetState(337)
			p.Match(SQLBaseParserASTERISK)
		}

	case 3:
		localctx = NewSelectAllContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(339)
			p.Match(SQLBaseParserASTERISK)
		}

	}

	return localctx
}

// IRelationContext is an interface to support dynamic dispatch.
type IRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationContext differentiates from other interfaces.
	IsRelationContext()
}

type RelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationContext() *RelationContext {
	var p = new(RelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_relation
	return p
}

func (*RelationContext) IsRelationContext() {}

func NewRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationContext {
	var p = new(RelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_relation

	return p
}

func (s *RelationContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationContext) CopyFrom(ctx *RelationContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type RelationDefaultContext struct {
	*RelationContext
}

func NewRelationDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RelationDefaultContext {
	var p = new(RelationDefaultContext)

	p.RelationContext = NewEmptyRelationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationContext))

	return p
}

func (s *RelationDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationDefaultContext) SampledRelation() ISampledRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISampledRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISampledRelationContext)
}

func (s *RelationDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterRelationDefault(s)
	}
}

func (s *RelationDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitRelationDefault(s)
	}
}

type JoinRelationContext struct {
	*RelationContext
	left  IRelationContext
	right IRelationContext
}

func NewJoinRelationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *JoinRelationContext {
	var p = new(JoinRelationContext)

	p.RelationContext = NewEmptyRelationContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationContext))

	return p
}

func (s *JoinRelationContext) GetLeft() IRelationContext { return s.left }

func (s *JoinRelationContext) GetRight() IRelationContext { return s.right }

func (s *JoinRelationContext) SetLeft(v IRelationContext) { s.left = v }

func (s *JoinRelationContext) SetRight(v IRelationContext) { s.right = v }

func (s *JoinRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinRelationContext) AllRelation() []IRelationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IRelationContext)(nil)).Elem())
	var tst = make([]IRelationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IRelationContext)
		}
	}

	return tst
}

func (s *JoinRelationContext) Relation(i int) IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *JoinRelationContext) JOIN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserJOIN, 0)
}

func (s *JoinRelationContext) JoinType() IJoinTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinTypeContext)
}

func (s *JoinRelationContext) JoinCriteria() IJoinCriteriaContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IJoinCriteriaContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IJoinCriteriaContext)
}

func (s *JoinRelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterJoinRelation(s)
	}
}

func (s *JoinRelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitJoinRelation(s)
	}
}

func (p *SQLBaseParser) Relation() (localctx IRelationContext) {
	return p.relation(0)
}

func (p *SQLBaseParser) relation(_p int) (localctx IRelationContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewRelationContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IRelationContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 32
	p.EnterRecursionRule(localctx, 32, SQLBaseParserRULE_relation, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	localctx = NewRelationDefaultContext(p, localctx)
	p.SetParserRuleContext(localctx)
	_prevctx = localctx

	{
		p.SetState(343)
		p.SampledRelation()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(356)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewJoinRelationContext(p, NewRelationContext(p, _parentctx, _parentState))
			localctx.(*JoinRelationContext).left = _prevctx

			p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_relation)
			p.SetState(345)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}

			p.SetState(347)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if ((_la-75)&-(0x1f+1)) == 0 && ((1<<uint((_la-75)))&((1<<(SQLBaseParserCROSS-75))|(1<<(SQLBaseParserINNER-75))|(1<<(SQLBaseParserLEFT-75))|(1<<(SQLBaseParserRIGHT-75))|(1<<(SQLBaseParserFULL-75))|(1<<(SQLBaseParserNATURAL-75)))) != 0 {
				{
					p.SetState(346)
					p.JoinType()
				}

			}
			{
				p.SetState(349)
				p.Match(SQLBaseParserJOIN)
			}
			{
				p.SetState(350)

				var _x = p.relation(0)

				localctx.(*JoinRelationContext).right = _x
			}
			p.SetState(352)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(351)
					p.JoinCriteria()
				}

			}

		}
		p.SetState(358)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())
	}

	return localctx
}

// IJoinTypeContext is an interface to support dynamic dispatch.
type IJoinTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinTypeContext differentiates from other interfaces.
	IsJoinTypeContext()
}

type JoinTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinTypeContext() *JoinTypeContext {
	var p = new(JoinTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_joinType
	return p
}

func (*JoinTypeContext) IsJoinTypeContext() {}

func NewJoinTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinTypeContext {
	var p = new(JoinTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_joinType

	return p
}

func (s *JoinTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinTypeContext) INNER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINNER, 0)
}

func (s *JoinTypeContext) LEFT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLEFT, 0)
}

func (s *JoinTypeContext) OUTER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserOUTER, 0)
}

func (s *JoinTypeContext) RIGHT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserRIGHT, 0)
}

func (s *JoinTypeContext) FULL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFULL, 0)
}

func (s *JoinTypeContext) CROSS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCROSS, 0)
}

func (s *JoinTypeContext) NATURAL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNATURAL, 0)
}

func (s *JoinTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterJoinType(s)
	}
}

func (s *JoinTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitJoinType(s)
	}
}

func (p *SQLBaseParser) JoinType() (localctx IJoinTypeContext) {
	localctx = NewJoinTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SQLBaseParserRULE_joinType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(369)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(359)
			p.Match(SQLBaseParserINNER)
		}

	case 2:
		{
			p.SetState(360)
			p.Match(SQLBaseParserLEFT)
		}
		{
			p.SetState(361)
			p.Match(SQLBaseParserOUTER)
		}

	case 3:
		{
			p.SetState(362)
			p.Match(SQLBaseParserRIGHT)
		}
		{
			p.SetState(363)
			p.Match(SQLBaseParserOUTER)
		}

	case 4:
		{
			p.SetState(364)
			p.Match(SQLBaseParserFULL)
		}
		{
			p.SetState(365)
			p.Match(SQLBaseParserOUTER)
		}

	case 5:
		{
			p.SetState(366)
			p.Match(SQLBaseParserCROSS)
		}

	case 6:
		{
			p.SetState(367)
			p.Match(SQLBaseParserNATURAL)
		}

	case 7:
		{
			p.SetState(368)
			p.Match(SQLBaseParserLEFT)
		}

	}

	return localctx
}

// IJoinCriteriaContext is an interface to support dynamic dispatch.
type IJoinCriteriaContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsJoinCriteriaContext differentiates from other interfaces.
	IsJoinCriteriaContext()
}

type JoinCriteriaContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyJoinCriteriaContext() *JoinCriteriaContext {
	var p = new(JoinCriteriaContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_joinCriteria
	return p
}

func (*JoinCriteriaContext) IsJoinCriteriaContext() {}

func NewJoinCriteriaContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *JoinCriteriaContext {
	var p = new(JoinCriteriaContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_joinCriteria

	return p
}

func (s *JoinCriteriaContext) GetParser() antlr.Parser { return s.parser }

func (s *JoinCriteriaContext) ON() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserON, 0)
}

func (s *JoinCriteriaContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *JoinCriteriaContext) USING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserUSING, 0)
}

func (s *JoinCriteriaContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *JoinCriteriaContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *JoinCriteriaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *JoinCriteriaContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *JoinCriteriaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterJoinCriteria(s)
	}
}

func (s *JoinCriteriaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitJoinCriteria(s)
	}
}

func (p *SQLBaseParser) JoinCriteria() (localctx IJoinCriteriaContext) {
	localctx = NewJoinCriteriaContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SQLBaseParserRULE_joinCriteria)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(385)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserON:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(371)
			p.Match(SQLBaseParserON)
		}
		{
			p.SetState(372)
			p.booleanExpression(0)
		}

	case SQLBaseParserUSING:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(373)
			p.Match(SQLBaseParserUSING)
		}
		{
			p.SetState(374)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(375)
			p.Identifier()
		}
		p.SetState(380)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(376)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(377)
				p.Identifier()
			}

			p.SetState(382)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(383)
			p.Match(SQLBaseParserT__2)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ISampledRelationContext is an interface to support dynamic dispatch.
type ISampledRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSampletype returns the sampletype token.
	GetSampletype() antlr.Token

	// SetSampletype sets the sampletype token.
	SetSampletype(antlr.Token)

	// GetPercentage returns the percentage rule contexts.
	GetPercentage() IExpressionContext

	// SetPercentage sets the percentage rule contexts.
	SetPercentage(IExpressionContext)

	// IsSampledRelationContext differentiates from other interfaces.
	IsSampledRelationContext()
}

type SampledRelationContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	sampletype antlr.Token
	percentage IExpressionContext
}

func NewEmptySampledRelationContext() *SampledRelationContext {
	var p = new(SampledRelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_sampledRelation
	return p
}

func (*SampledRelationContext) IsSampledRelationContext() {}

func NewSampledRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SampledRelationContext {
	var p = new(SampledRelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_sampledRelation

	return p
}

func (s *SampledRelationContext) GetParser() antlr.Parser { return s.parser }

func (s *SampledRelationContext) GetSampletype() antlr.Token { return s.sampletype }

func (s *SampledRelationContext) SetSampletype(v antlr.Token) { s.sampletype = v }

func (s *SampledRelationContext) GetPercentage() IExpressionContext { return s.percentage }

func (s *SampledRelationContext) SetPercentage(v IExpressionContext) { s.percentage = v }

func (s *SampledRelationContext) AliasedRelation() IAliasedRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasedRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasedRelationContext)
}

func (s *SampledRelationContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTABLESAMPLE, 0)
}

func (s *SampledRelationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SampledRelationContext) BERNOULLI() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBERNOULLI, 0)
}

func (s *SampledRelationContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSYSTEM, 0)
}

func (s *SampledRelationContext) POISSONIZED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPOISSONIZED, 0)
}

func (s *SampledRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SampledRelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SampledRelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSampledRelation(s)
	}
}

func (s *SampledRelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSampledRelation(s)
	}
}

func (p *SQLBaseParser) SampledRelation() (localctx ISampledRelationContext) {
	localctx = NewSampledRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SQLBaseParserRULE_sampledRelation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(387)
		p.AliasedRelation()
	}
	p.SetState(394)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(388)
			p.Match(SQLBaseParserTABLESAMPLE)
		}
		{
			p.SetState(389)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*SampledRelationContext).sampletype = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-138)&-(0x1f+1)) == 0 && ((1<<uint((_la-138)))&((1<<(SQLBaseParserSYSTEM-138))|(1<<(SQLBaseParserBERNOULLI-138))|(1<<(SQLBaseParserPOISSONIZED-138)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*SampledRelationContext).sampletype = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(390)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(391)

			var _x = p.Expression()

			localctx.(*SampledRelationContext).percentage = _x
		}
		{
			p.SetState(392)
			p.Match(SQLBaseParserT__2)
		}

	}

	return localctx
}

// IAliasedRelationContext is an interface to support dynamic dispatch.
type IAliasedRelationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasedRelationContext differentiates from other interfaces.
	IsAliasedRelationContext()
}

type AliasedRelationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasedRelationContext() *AliasedRelationContext {
	var p = new(AliasedRelationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_aliasedRelation
	return p
}

func (*AliasedRelationContext) IsAliasedRelationContext() {}

func NewAliasedRelationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasedRelationContext {
	var p = new(AliasedRelationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_aliasedRelation

	return p
}

func (s *AliasedRelationContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasedRelationContext) RelationPrimary() IRelationPrimaryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationPrimaryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationPrimaryContext)
}

func (s *AliasedRelationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AliasedRelationContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAS, 0)
}

func (s *AliasedRelationContext) ColumnAliases() IColumnAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IColumnAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IColumnAliasesContext)
}

func (s *AliasedRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasedRelationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasedRelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterAliasedRelation(s)
	}
}

func (s *AliasedRelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitAliasedRelation(s)
	}
}

func (p *SQLBaseParser) AliasedRelation() (localctx IAliasedRelationContext) {
	localctx = NewAliasedRelationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SQLBaseParserRULE_aliasedRelation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(396)
		p.RelationPrimary()
	}
	p.SetState(404)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) == 1 {
		p.SetState(398)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserAS {
			{
				p.SetState(397)
				p.Match(SQLBaseParserAS)
			}

		}
		{
			p.SetState(400)
			p.Identifier()
		}
		p.SetState(402)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(401)
				p.ColumnAliases()
			}

		}

	}

	return localctx
}

// IColumnAliasesContext is an interface to support dynamic dispatch.
type IColumnAliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsColumnAliasesContext differentiates from other interfaces.
	IsColumnAliasesContext()
}

type ColumnAliasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyColumnAliasesContext() *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_columnAliases
	return p
}

func (*ColumnAliasesContext) IsColumnAliasesContext() {}

func NewColumnAliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ColumnAliasesContext {
	var p = new(ColumnAliasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_columnAliases

	return p
}

func (s *ColumnAliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ColumnAliasesContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ColumnAliasesContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnAliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnAliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ColumnAliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterColumnAliases(s)
	}
}

func (s *ColumnAliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitColumnAliases(s)
	}
}

func (p *SQLBaseParser) ColumnAliases() (localctx IColumnAliasesContext) {
	localctx = NewColumnAliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SQLBaseParserRULE_columnAliases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(406)
		p.Match(SQLBaseParserT__0)
	}
	{
		p.SetState(407)
		p.Identifier()
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SQLBaseParserT__1 {
		{
			p.SetState(408)
			p.Match(SQLBaseParserT__1)
		}
		{
			p.SetState(409)
			p.Identifier()
		}

		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(415)
		p.Match(SQLBaseParserT__2)
	}

	return localctx
}

// IRelationPrimaryContext is an interface to support dynamic dispatch.
type IRelationPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRelationPrimaryContext differentiates from other interfaces.
	IsRelationPrimaryContext()
}

type RelationPrimaryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRelationPrimaryContext() *RelationPrimaryContext {
	var p = new(RelationPrimaryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_relationPrimary
	return p
}

func (*RelationPrimaryContext) IsRelationPrimaryContext() {}

func NewRelationPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RelationPrimaryContext {
	var p = new(RelationPrimaryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_relationPrimary

	return p
}

func (s *RelationPrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *RelationPrimaryContext) CopyFrom(ctx *RelationPrimaryContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *RelationPrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RelationPrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type SubqueryRelationContext struct {
	*RelationPrimaryContext
}

func NewSubqueryRelationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryRelationContext {
	var p = new(SubqueryRelationContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *SubqueryRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryRelationContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *SubqueryRelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSubqueryRelation(s)
	}
}

func (s *SubqueryRelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSubqueryRelation(s)
	}
}

type ParenthesizedRelationContext struct {
	*RelationPrimaryContext
}

func NewParenthesizedRelationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedRelationContext {
	var p = new(ParenthesizedRelationContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *ParenthesizedRelationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedRelationContext) Relation() IRelationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRelationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRelationContext)
}

func (s *ParenthesizedRelationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterParenthesizedRelation(s)
	}
}

func (s *ParenthesizedRelationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitParenthesizedRelation(s)
	}
}

type UnnestContext struct {
	*RelationPrimaryContext
}

func NewUnnestContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnnestContext {
	var p = new(UnnestContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *UnnestContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnnestContext) UNNEST() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserUNNEST, 0)
}

func (s *UnnestContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *UnnestContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnnestContext) WITH() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWITH, 0)
}

func (s *UnnestContext) ORDINALITY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserORDINALITY, 0)
}

func (s *UnnestContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterUnnest(s)
	}
}

func (s *UnnestContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitUnnest(s)
	}
}

type TableNameContext struct {
	*RelationPrimaryContext
}

func NewTableNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TableNameContext {
	var p = new(TableNameContext)

	p.RelationPrimaryContext = NewEmptyRelationPrimaryContext()
	p.parser = parser
	p.CopyFrom(ctx.(*RelationPrimaryContext))

	return p
}

func (s *TableNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TableNameContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *TableNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTableName(s)
	}
}

func (s *TableNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTableName(s)
	}
}

func (p *SQLBaseParser) RelationPrimary() (localctx IRelationPrimaryContext) {
	localctx = NewRelationPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SQLBaseParserRULE_relationPrimary)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTableNameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(417)
			p.QualifiedName()
		}

	case 2:
		localctx = NewSubqueryRelationContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(418)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(419)
			p.Query()
		}
		{
			p.SetState(420)
			p.Match(SQLBaseParserT__2)
		}

	case 3:
		localctx = NewUnnestContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(422)
			p.Match(SQLBaseParserUNNEST)
		}
		{
			p.SetState(423)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(424)
			p.Expression()
		}
		p.SetState(429)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(425)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(426)
				p.Expression()
			}

			p.SetState(431)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(432)
			p.Match(SQLBaseParserT__2)
		}
		p.SetState(435)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(433)
				p.Match(SQLBaseParserWITH)
			}
			{
				p.SetState(434)
				p.Match(SQLBaseParserORDINALITY)
			}

		}

	case 4:
		localctx = NewParenthesizedRelationContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(437)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(438)
			p.relation(0)
		}
		{
			p.SetState(439)
			p.Match(SQLBaseParserT__2)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *ExpressionContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (p *SQLBaseParser) Expression() (localctx IExpressionContext) {
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SQLBaseParserRULE_expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(445)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(443)
			p.booleanExpression(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(444)
			p.valueExpression(0)
		}

	}

	return localctx
}

// IBooleanExpressionContext is an interface to support dynamic dispatch.
type IBooleanExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanExpressionContext differentiates from other interfaces.
	IsBooleanExpressionContext()
}

type BooleanExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanExpressionContext() *BooleanExpressionContext {
	var p = new(BooleanExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_booleanExpression
	return p
}

func (*BooleanExpressionContext) IsBooleanExpressionContext() {}

func NewBooleanExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanExpressionContext {
	var p = new(BooleanExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_booleanExpression

	return p
}

func (s *BooleanExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanExpressionContext) CopyFrom(ctx *BooleanExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *BooleanExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type LogicalNotContext struct {
	*BooleanExpressionContext
}

func NewLogicalNotContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalNotContext {
	var p = new(LogicalNotContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *LogicalNotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalNotContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *LogicalNotContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *LogicalNotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterLogicalNot(s)
	}
}

func (s *LogicalNotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitLogicalNot(s)
	}
}

type BooleanDefaultContext struct {
	*BooleanExpressionContext
}

func NewBooleanDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BooleanDefaultContext {
	var p = new(BooleanDefaultContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *BooleanDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanDefaultContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *BooleanDefaultContext) Predicate() IPredicateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPredicateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPredicateContext)
}

func (s *BooleanDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBooleanDefault(s)
	}
}

func (s *BooleanDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBooleanDefault(s)
	}
}

type BoolLiteralTooContext struct {
	*BooleanExpressionContext
}

func NewBoolLiteralTooContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BoolLiteralTooContext {
	var p = new(BoolLiteralTooContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *BoolLiteralTooContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolLiteralTooContext) Booleanliteral() IBooleanliteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanliteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanliteralContext)
}

func (s *BoolLiteralTooContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBoolLiteralToo(s)
	}
}

func (s *BoolLiteralTooContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBoolLiteralToo(s)
	}
}

type LogicalBinaryContext struct {
	*BooleanExpressionContext
	left     IBooleanExpressionContext
	operator antlr.Token
	right    IExpressionContext
}

func NewLogicalBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LogicalBinaryContext {
	var p = new(LogicalBinaryContext)

	p.BooleanExpressionContext = NewEmptyBooleanExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*BooleanExpressionContext))

	return p
}

func (s *LogicalBinaryContext) GetOperator() antlr.Token { return s.operator }

func (s *LogicalBinaryContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *LogicalBinaryContext) GetLeft() IBooleanExpressionContext { return s.left }

func (s *LogicalBinaryContext) GetRight() IExpressionContext { return s.right }

func (s *LogicalBinaryContext) SetLeft(v IBooleanExpressionContext) { s.left = v }

func (s *LogicalBinaryContext) SetRight(v IExpressionContext) { s.right = v }

func (s *LogicalBinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LogicalBinaryContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *LogicalBinaryContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LogicalBinaryContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAND, 0)
}

func (s *LogicalBinaryContext) OR() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserOR, 0)
}

func (s *LogicalBinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterLogicalBinary(s)
	}
}

func (s *LogicalBinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitLogicalBinary(s)
	}
}

func (p *SQLBaseParser) BooleanExpression() (localctx IBooleanExpressionContext) {
	return p.booleanExpression(0)
}

func (p *SQLBaseParser) booleanExpression(_p int) (localctx IBooleanExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewBooleanExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IBooleanExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 48
	p.EnterRecursionRule(localctx, 48, SQLBaseParserRULE_booleanExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		localctx = NewBooleanDefaultContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(448)
			p.valueExpression(0)
		}
		{
			p.SetState(449)
			p.Predicate()
		}

	case 2:
		localctx = NewLogicalNotContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(451)
			p.Match(SQLBaseParserNOT)
		}
		{
			p.SetState(452)
			p.booleanExpression(3)
		}

	case 3:
		localctx = NewBoolLiteralTooContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(453)
			p.Booleanliteral()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(461)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewLogicalBinaryContext(p, NewBooleanExpressionContext(p, _parentctx, _parentState))
			localctx.(*LogicalBinaryContext).left = _prevctx

			p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_booleanExpression)
			p.SetState(456)

			if !(p.Precpred(p.GetParserRuleContext(), 2)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
			}
			{
				p.SetState(457)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*LogicalBinaryContext).operator = _lt

				_la = p.GetTokenStream().LA(1)

				if !(_la == SQLBaseParserOR || _la == SQLBaseParserAND) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*LogicalBinaryContext).operator = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}
			{
				p.SetState(458)

				var _x = p.Expression()

				localctx.(*LogicalBinaryContext).right = _x
			}

		}
		p.SetState(463)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext())
	}

	return localctx
}

// IBooleanliteralContext is an interface to support dynamic dispatch.
type IBooleanliteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanliteralContext differentiates from other interfaces.
	IsBooleanliteralContext()
}

type BooleanliteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanliteralContext() *BooleanliteralContext {
	var p = new(BooleanliteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_booleanliteral
	return p
}

func (*BooleanliteralContext) IsBooleanliteralContext() {}

func NewBooleanliteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanliteralContext {
	var p = new(BooleanliteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_booleanliteral

	return p
}

func (s *BooleanliteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanliteralContext) TRUE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTRUE, 0)
}

func (s *BooleanliteralContext) FALSE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFALSE, 0)
}

func (s *BooleanliteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanliteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanliteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBooleanliteral(s)
	}
}

func (s *BooleanliteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBooleanliteral(s)
	}
}

func (p *SQLBaseParser) Booleanliteral() (localctx IBooleanliteralContext) {
	localctx = NewBooleanliteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SQLBaseParserRULE_booleanliteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(464)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SQLBaseParserTRUE || _la == SQLBaseParserFALSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IPredicateContext is an interface to support dynamic dispatch.
type IPredicateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPredicateContext differentiates from other interfaces.
	IsPredicateContext()
}

type PredicateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPredicateContext() *PredicateContext {
	var p = new(PredicateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_predicate
	return p
}

func (*PredicateContext) IsPredicateContext() {}

func NewPredicateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PredicateContext {
	var p = new(PredicateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_predicate

	return p
}

func (s *PredicateContext) GetParser() antlr.Parser { return s.parser }

func (s *PredicateContext) CopyFrom(ctx *PredicateContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PredicateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ComparisonContext struct {
	*PredicateContext
	right IValueExpressionContext
}

func NewComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ComparisonContext {
	var p = new(ComparisonContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *ComparisonContext) GetRight() IValueExpressionContext { return s.right }

func (s *ComparisonContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *ComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *ComparisonContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterComparison(s)
	}
}

func (s *ComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitComparison(s)
	}
}

type LikeContext struct {
	*PredicateContext
	pattern IValueExpressionContext
	escape  IValueExpressionContext
}

func NewLikeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LikeContext {
	var p = new(LikeContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *LikeContext) GetPattern() IValueExpressionContext { return s.pattern }

func (s *LikeContext) GetEscape() IValueExpressionContext { return s.escape }

func (s *LikeContext) SetPattern(v IValueExpressionContext) { s.pattern = v }

func (s *LikeContext) SetEscape(v IValueExpressionContext) { s.escape = v }

func (s *LikeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LikeContext) LIKE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLIKE, 0)
}

func (s *LikeContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *LikeContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *LikeContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *LikeContext) ESCAPE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserESCAPE, 0)
}

func (s *LikeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterLike(s)
	}
}

func (s *LikeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitLike(s)
	}
}

type InSubqueryContext struct {
	*PredicateContext
}

func NewInSubqueryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InSubqueryContext {
	var p = new(InSubqueryContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InSubqueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InSubqueryContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIN, 0)
}

func (s *InSubqueryContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *InSubqueryContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *InSubqueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterInSubquery(s)
	}
}

func (s *InSubqueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitInSubquery(s)
	}
}

type DistinctFromContext struct {
	*PredicateContext
	right IValueExpressionContext
}

func NewDistinctFromContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DistinctFromContext {
	var p = new(DistinctFromContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *DistinctFromContext) GetRight() IValueExpressionContext { return s.right }

func (s *DistinctFromContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *DistinctFromContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DistinctFromContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIS, 0)
}

func (s *DistinctFromContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDISTINCT, 0)
}

func (s *DistinctFromContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFROM, 0)
}

func (s *DistinctFromContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *DistinctFromContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *DistinctFromContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterDistinctFrom(s)
	}
}

func (s *DistinctFromContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitDistinctFrom(s)
	}
}

type InListContext struct {
	*PredicateContext
}

func NewInListContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InListContext {
	var p = new(InListContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *InListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InListContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIN, 0)
}

func (s *InListContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *InListContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *InListContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *InListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterInList(s)
	}
}

func (s *InListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitInList(s)
	}
}

type NullPredicateContext struct {
	*PredicateContext
}

func NewNullPredicateContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullPredicateContext {
	var p = new(NullPredicateContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *NullPredicateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullPredicateContext) IS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIS, 0)
}

func (s *NullPredicateContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNULL, 0)
}

func (s *NullPredicateContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *NullPredicateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterNullPredicate(s)
	}
}

func (s *NullPredicateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitNullPredicate(s)
	}
}

type BetweenContext struct {
	*PredicateContext
	lower IValueExpressionContext
	upper IValueExpressionContext
}

func NewBetweenContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BetweenContext {
	var p = new(BetweenContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *BetweenContext) GetLower() IValueExpressionContext { return s.lower }

func (s *BetweenContext) GetUpper() IValueExpressionContext { return s.upper }

func (s *BetweenContext) SetLower(v IValueExpressionContext) { s.lower = v }

func (s *BetweenContext) SetUpper(v IValueExpressionContext) { s.upper = v }

func (s *BetweenContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BetweenContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBETWEEN, 0)
}

func (s *BetweenContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAND, 0)
}

func (s *BetweenContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *BetweenContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *BetweenContext) NOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNOT, 0)
}

func (s *BetweenContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBetween(s)
	}
}

func (s *BetweenContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBetween(s)
	}
}

type QuantifiedComparisonContext struct {
	*PredicateContext
}

func NewQuantifiedComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QuantifiedComparisonContext {
	var p = new(QuantifiedComparisonContext)

	p.PredicateContext = NewEmptyPredicateContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PredicateContext))

	return p
}

func (s *QuantifiedComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuantifiedComparisonContext) ComparisonOperator() IComparisonOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonOperatorContext)
}

func (s *QuantifiedComparisonContext) ComparisonQuantifier() IComparisonQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IComparisonQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IComparisonQuantifierContext)
}

func (s *QuantifiedComparisonContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *QuantifiedComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQuantifiedComparison(s)
	}
}

func (s *QuantifiedComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQuantifiedComparison(s)
	}
}

func (p *SQLBaseParser) Predicate() (localctx IPredicateContext) {
	localctx = NewPredicateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SQLBaseParserRULE_predicate)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		localctx = NewComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(466)
			p.ComparisonOperator()
		}
		{
			p.SetState(467)

			var _x = p.valueExpression(0)

			localctx.(*ComparisonContext).right = _x
		}

	case 2:
		localctx = NewQuantifiedComparisonContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(469)
			p.ComparisonOperator()
		}
		{
			p.SetState(470)
			p.ComparisonQuantifier()
		}
		{
			p.SetState(471)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(472)
			p.Query()
		}
		{
			p.SetState(473)
			p.Match(SQLBaseParserT__2)
		}

	case 3:
		localctx = NewBetweenContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		p.SetState(476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserNOT {
			{
				p.SetState(475)
				p.Match(SQLBaseParserNOT)
			}

		}
		{
			p.SetState(478)
			p.Match(SQLBaseParserBETWEEN)
		}
		{
			p.SetState(479)

			var _x = p.valueExpression(0)

			localctx.(*BetweenContext).lower = _x
		}
		{
			p.SetState(480)
			p.Match(SQLBaseParserAND)
		}
		{
			p.SetState(481)

			var _x = p.valueExpression(0)

			localctx.(*BetweenContext).upper = _x
		}

	case 4:
		localctx = NewInListContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		p.SetState(484)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserNOT {
			{
				p.SetState(483)
				p.Match(SQLBaseParserNOT)
			}

		}
		{
			p.SetState(486)
			p.Match(SQLBaseParserIN)
		}
		{
			p.SetState(487)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(488)
			p.valueExpression(0)
		}
		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(489)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(490)
				p.valueExpression(0)
			}

			p.SetState(495)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(496)
			p.Match(SQLBaseParserT__2)
		}

	case 5:
		localctx = NewInSubqueryContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		p.SetState(499)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserNOT {
			{
				p.SetState(498)
				p.Match(SQLBaseParserNOT)
			}

		}
		{
			p.SetState(501)
			p.Match(SQLBaseParserIN)
		}
		{
			p.SetState(502)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(503)
			p.Query()
		}
		{
			p.SetState(504)
			p.Match(SQLBaseParserT__2)
		}

	case 6:
		localctx = NewLikeContext(p, localctx)
		p.EnterOuterAlt(localctx, 6)
		p.SetState(507)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserNOT {
			{
				p.SetState(506)
				p.Match(SQLBaseParserNOT)
			}

		}
		{
			p.SetState(509)
			p.Match(SQLBaseParserLIKE)
		}
		{
			p.SetState(510)

			var _x = p.valueExpression(0)

			localctx.(*LikeContext).pattern = _x
		}
		p.SetState(513)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(511)
				p.Match(SQLBaseParserESCAPE)
			}
			{
				p.SetState(512)

				var _x = p.valueExpression(0)

				localctx.(*LikeContext).escape = _x
			}

		}

	case 7:
		localctx = NewNullPredicateContext(p, localctx)
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(515)
			p.Match(SQLBaseParserIS)
		}
		p.SetState(517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserNOT {
			{
				p.SetState(516)
				p.Match(SQLBaseParserNOT)
			}

		}
		{
			p.SetState(519)
			p.Match(SQLBaseParserNULL)
		}

	case 8:
		localctx = NewDistinctFromContext(p, localctx)
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(520)
			p.Match(SQLBaseParserIS)
		}
		p.SetState(522)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserNOT {
			{
				p.SetState(521)
				p.Match(SQLBaseParserNOT)
			}

		}
		{
			p.SetState(524)
			p.Match(SQLBaseParserDISTINCT)
		}
		{
			p.SetState(525)
			p.Match(SQLBaseParserFROM)
		}
		{
			p.SetState(526)

			var _x = p.valueExpression(0)

			localctx.(*DistinctFromContext).right = _x
		}

	}

	return localctx
}

// IValueExpressionContext is an interface to support dynamic dispatch.
type IValueExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueExpressionContext differentiates from other interfaces.
	IsValueExpressionContext()
}

type ValueExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueExpressionContext() *ValueExpressionContext {
	var p = new(ValueExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_valueExpression
	return p
}

func (*ValueExpressionContext) IsValueExpressionContext() {}

func NewValueExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueExpressionContext {
	var p = new(ValueExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_valueExpression

	return p
}

func (s *ValueExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueExpressionContext) CopyFrom(ctx *ValueExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ValueExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ValueExpressionDefaultContext struct {
	*ValueExpressionContext
}

func NewValueExpressionDefaultContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ValueExpressionDefaultContext {
	var p = new(ValueExpressionDefaultContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ValueExpressionDefaultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueExpressionDefaultContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ValueExpressionDefaultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterValueExpressionDefault(s)
	}
}

func (s *ValueExpressionDefaultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitValueExpressionDefault(s)
	}
}

type ConcatenationContext struct {
	*ValueExpressionContext
	left  IValueExpressionContext
	right IValueExpressionContext
}

func NewConcatenationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConcatenationContext {
	var p = new(ConcatenationContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ConcatenationContext) GetLeft() IValueExpressionContext { return s.left }

func (s *ConcatenationContext) GetRight() IValueExpressionContext { return s.right }

func (s *ConcatenationContext) SetLeft(v IValueExpressionContext) { s.left = v }

func (s *ConcatenationContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *ConcatenationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConcatenationContext) CONCAT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCONCAT, 0)
}

func (s *ConcatenationContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *ConcatenationContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ConcatenationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterConcatenation(s)
	}
}

func (s *ConcatenationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitConcatenation(s)
	}
}

type ArithmeticBinaryContext struct {
	*ValueExpressionContext
	left     IValueExpressionContext
	operator antlr.Token
	right    IValueExpressionContext
}

func NewArithmeticBinaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArithmeticBinaryContext {
	var p = new(ArithmeticBinaryContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ArithmeticBinaryContext) GetOperator() antlr.Token { return s.operator }

func (s *ArithmeticBinaryContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ArithmeticBinaryContext) GetLeft() IValueExpressionContext { return s.left }

func (s *ArithmeticBinaryContext) GetRight() IValueExpressionContext { return s.right }

func (s *ArithmeticBinaryContext) SetLeft(v IValueExpressionContext) { s.left = v }

func (s *ArithmeticBinaryContext) SetRight(v IValueExpressionContext) { s.right = v }

func (s *ArithmeticBinaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticBinaryContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *ArithmeticBinaryContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ArithmeticBinaryContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserASTERISK, 0)
}

func (s *ArithmeticBinaryContext) SLASH() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSLASH, 0)
}

func (s *ArithmeticBinaryContext) PERCENT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPERCENT, 0)
}

func (s *ArithmeticBinaryContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPLUS, 0)
}

func (s *ArithmeticBinaryContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMINUS, 0)
}

func (s *ArithmeticBinaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterArithmeticBinary(s)
	}
}

func (s *ArithmeticBinaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitArithmeticBinary(s)
	}
}

type ArithmeticUnaryContext struct {
	*ValueExpressionContext
	operator antlr.Token
}

func NewArithmeticUnaryContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArithmeticUnaryContext {
	var p = new(ArithmeticUnaryContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *ArithmeticUnaryContext) GetOperator() antlr.Token { return s.operator }

func (s *ArithmeticUnaryContext) SetOperator(v antlr.Token) { s.operator = v }

func (s *ArithmeticUnaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArithmeticUnaryContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ArithmeticUnaryContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMINUS, 0)
}

func (s *ArithmeticUnaryContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPLUS, 0)
}

func (s *ArithmeticUnaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterArithmeticUnary(s)
	}
}

func (s *ArithmeticUnaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitArithmeticUnary(s)
	}
}

type AtTimeZoneContext struct {
	*ValueExpressionContext
}

func NewAtTimeZoneContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AtTimeZoneContext {
	var p = new(AtTimeZoneContext)

	p.ValueExpressionContext = NewEmptyValueExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ValueExpressionContext))

	return p
}

func (s *AtTimeZoneContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AtTimeZoneContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *AtTimeZoneContext) AT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAT, 0)
}

func (s *AtTimeZoneContext) TimeZoneSpecifier() ITimeZoneSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITimeZoneSpecifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITimeZoneSpecifierContext)
}

func (s *AtTimeZoneContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterAtTimeZone(s)
	}
}

func (s *AtTimeZoneContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitAtTimeZone(s)
	}
}

func (p *SQLBaseParser) ValueExpression() (localctx IValueExpressionContext) {
	return p.valueExpression(0)
}

func (p *SQLBaseParser) valueExpression(_p int) (localctx IValueExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewValueExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IValueExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 54
	p.EnterRecursionRule(localctx, 54, SQLBaseParserRULE_valueExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(533)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserT__0, SQLBaseParserT__3, SQLBaseParserADD, SQLBaseParserALL, SQLBaseParserSOME, SQLBaseParserANY, SQLBaseParserAT, SQLBaseParserNO, SQLBaseParserEXISTS, SQLBaseParserNULL, SQLBaseParserTRUE, SQLBaseParserFALSE, SQLBaseParserSUBSTRING, SQLBaseParserPOSITION, SQLBaseParserTINYINT, SQLBaseParserSMALLINT, SQLBaseParserINTEGER, SQLBaseParserDATE, SQLBaseParserTIME, SQLBaseParserTIMESTAMP, SQLBaseParserINTERVAL, SQLBaseParserYEAR, SQLBaseParserMONTH, SQLBaseParserDAY, SQLBaseParserHOUR, SQLBaseParserMINUTE, SQLBaseParserSECOND, SQLBaseParserZONE, SQLBaseParserCURRENT_DATE, SQLBaseParserCURRENT_TIME, SQLBaseParserCURRENT_TIMESTAMP, SQLBaseParserLOCALTIME, SQLBaseParserLOCALTIMESTAMP, SQLBaseParserEXTRACT, SQLBaseParserCASE, SQLBaseParserFILTER, SQLBaseParserOVER, SQLBaseParserPARTITION, SQLBaseParserRANGE, SQLBaseParserROWS, SQLBaseParserPRECEDING, SQLBaseParserFOLLOWING, SQLBaseParserCURRENT, SQLBaseParserROW, SQLBaseParserSCHEMA, SQLBaseParserCOMMENT, SQLBaseParserVIEW, SQLBaseParserREPLACE, SQLBaseParserGRANT, SQLBaseParserREVOKE, SQLBaseParserPRIVILEGES, SQLBaseParserPUBLIC, SQLBaseParserOPTION, SQLBaseParserEXPLAIN, SQLBaseParserANALYZE, SQLBaseParserFORMAT, SQLBaseParserTYPE, SQLBaseParserTEXT, SQLBaseParserGRAPHVIZ, SQLBaseParserLOGICAL, SQLBaseParserDISTRIBUTED, SQLBaseParserVALIDATE, SQLBaseParserCAST, SQLBaseParserTRY_CAST, SQLBaseParserSHOW, SQLBaseParserTABLES, SQLBaseParserSCHEMAS, SQLBaseParserCATALOGS, SQLBaseParserCOLUMNS, SQLBaseParserCOLUMN, SQLBaseParserUSE, SQLBaseParserPARTITIONS, SQLBaseParserFUNCTIONS, SQLBaseParserTO, SQLBaseParserSYSTEM, SQLBaseParserBERNOULLI, SQLBaseParserPOISSONIZED, SQLBaseParserTABLESAMPLE, SQLBaseParserARRAY, SQLBaseParserMAP, SQLBaseParserSET, SQLBaseParserRESET, SQLBaseParserSESSION, SQLBaseParserDATA, SQLBaseParserSTART, SQLBaseParserTRANSACTION, SQLBaseParserCOMMIT, SQLBaseParserROLLBACK, SQLBaseParserWORK, SQLBaseParserISOLATION, SQLBaseParserLEVEL, SQLBaseParserSERIALIZABLE, SQLBaseParserREPEATABLE, SQLBaseParserCOMMITTED, SQLBaseParserUNCOMMITTED, SQLBaseParserREAD, SQLBaseParserWRITE, SQLBaseParserONLY, SQLBaseParserCALL, SQLBaseParserINPUT, SQLBaseParserOUTPUT, SQLBaseParserCASCADE, SQLBaseParserRESTRICT, SQLBaseParserINCLUDING, SQLBaseParserEXCLUDING, SQLBaseParserPROPERTIES, SQLBaseParserNORMALIZE, SQLBaseParserNFD, SQLBaseParserNFC, SQLBaseParserNFKD, SQLBaseParserNFKC, SQLBaseParserIF, SQLBaseParserNULLIF, SQLBaseParserCOALESCE, SQLBaseParserTIME_WITH_TIME_ZONE, SQLBaseParserTIMESTAMP_WITH_TIME_ZONE, SQLBaseParserDOUBLE_PRECISION, SQLBaseParserSTRING, SQLBaseParserBINARY_LITERAL, SQLBaseParserINTEGER_VALUE, SQLBaseParserDECIMAL_VALUE, SQLBaseParserIDENTIFIER, SQLBaseParserDIGIT_IDENTIFIER, SQLBaseParserQUOTED_IDENTIFIER, SQLBaseParserBACKQUOTED_IDENTIFIER:
		localctx = NewValueExpressionDefaultContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(530)
			p.primaryExpression(0)
		}

	case SQLBaseParserPLUS, SQLBaseParserMINUS:
		localctx = NewArithmeticUnaryContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(531)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ArithmeticUnaryContext).operator = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserPLUS || _la == SQLBaseParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ArithmeticUnaryContext).operator = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(532)
			p.valueExpression(3)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(546)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(544)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
			case 1:
				localctx = NewArithmeticBinaryContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				localctx.(*ArithmeticBinaryContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_valueExpression)
				p.SetState(535)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(536)

					var _lt = p.GetTokenStream().LT(1)

					localctx.(*ArithmeticBinaryContext).operator = _lt

					_la = p.GetTokenStream().LA(1)

					if !(((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(SQLBaseParserPLUS-194))|(1<<(SQLBaseParserMINUS-194))|(1<<(SQLBaseParserASTERISK-194))|(1<<(SQLBaseParserSLASH-194))|(1<<(SQLBaseParserPERCENT-194)))) != 0) {
						var _ri = p.GetErrorHandler().RecoverInline(p)

						localctx.(*ArithmeticBinaryContext).operator = _ri
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(537)

					var _x = p.valueExpression(3)

					localctx.(*ArithmeticBinaryContext).right = _x
				}

			case 2:
				localctx = NewConcatenationContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				localctx.(*ConcatenationContext).left = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_valueExpression)
				p.SetState(538)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(539)
					p.Match(SQLBaseParserCONCAT)
				}
				{
					p.SetState(540)

					var _x = p.valueExpression(2)

					localctx.(*ConcatenationContext).right = _x
				}

			case 3:
				localctx = NewAtTimeZoneContext(p, NewValueExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_valueExpression)
				p.SetState(541)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(542)
					p.Match(SQLBaseParserAT)
				}
				{
					p.SetState(543)
					p.TimeZoneSpecifier()
				}

			}

		}
		p.SetState(548)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext())
	}

	return localctx
}

// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) CopyFrom(ctx *PrimaryExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DereferenceContext struct {
	*PrimaryExpressionContext
	base      IPrimaryExpressionContext
	fieldName IIdentifierContext
}

func NewDereferenceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DereferenceContext {
	var p = new(DereferenceContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *DereferenceContext) GetBase() IPrimaryExpressionContext { return s.base }

func (s *DereferenceContext) GetFieldName() IIdentifierContext { return s.fieldName }

func (s *DereferenceContext) SetBase(v IPrimaryExpressionContext) { s.base = v }

func (s *DereferenceContext) SetFieldName(v IIdentifierContext) { s.fieldName = v }

func (s *DereferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DereferenceContext) DOT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDOT, 0)
}

func (s *DereferenceContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *DereferenceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DereferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterDereference(s)
	}
}

func (s *DereferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitDereference(s)
	}
}

type DecimalLiteralContext struct {
	*PrimaryExpressionContext
}

func NewDecimalLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DecimalLiteralContext {
	var p = new(DecimalLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *DecimalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DecimalLiteralContext) DECIMAL_VALUE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDECIMAL_VALUE, 0)
}

func (s *DecimalLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterDecimalLiteral(s)
	}
}

func (s *DecimalLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitDecimalLiteral(s)
	}
}

type TypeConstructorContext struct {
	*PrimaryExpressionContext
}

func NewTypeConstructorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypeConstructorContext {
	var p = new(TypeConstructorContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *TypeConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConstructorContext) STRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSTRING, 0)
}

func (s *TypeConstructorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeConstructorContext) DOUBLE_PRECISION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDOUBLE_PRECISION, 0)
}

func (s *TypeConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTypeConstructor(s)
	}
}

func (s *TypeConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTypeConstructor(s)
	}
}

type SpecialDateTimeFunctionContext struct {
	*PrimaryExpressionContext
	name      antlr.Token
	precision antlr.Token
}

func NewSpecialDateTimeFunctionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SpecialDateTimeFunctionContext {
	var p = new(SpecialDateTimeFunctionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SpecialDateTimeFunctionContext) GetName() antlr.Token { return s.name }

func (s *SpecialDateTimeFunctionContext) GetPrecision() antlr.Token { return s.precision }

func (s *SpecialDateTimeFunctionContext) SetName(v antlr.Token) { s.name = v }

func (s *SpecialDateTimeFunctionContext) SetPrecision(v antlr.Token) { s.precision = v }

func (s *SpecialDateTimeFunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SpecialDateTimeFunctionContext) CURRENT_DATE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCURRENT_DATE, 0)
}

func (s *SpecialDateTimeFunctionContext) CURRENT_TIME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCURRENT_TIME, 0)
}

func (s *SpecialDateTimeFunctionContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTEGER_VALUE, 0)
}

func (s *SpecialDateTimeFunctionContext) CURRENT_TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCURRENT_TIMESTAMP, 0)
}

func (s *SpecialDateTimeFunctionContext) LOCALTIME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLOCALTIME, 0)
}

func (s *SpecialDateTimeFunctionContext) LOCALTIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLOCALTIMESTAMP, 0)
}

func (s *SpecialDateTimeFunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSpecialDateTimeFunction(s)
	}
}

func (s *SpecialDateTimeFunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSpecialDateTimeFunction(s)
	}
}

type BoolLiteralContext struct {
	*PrimaryExpressionContext
}

func NewBoolLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BoolLiteralContext {
	var p = new(BoolLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *BoolLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoolLiteralContext) Booleanliteral() IBooleanliteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanliteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanliteralContext)
}

func (s *BoolLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBoolLiteral(s)
	}
}

func (s *BoolLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBoolLiteral(s)
	}
}

type SubstringContext struct {
	*PrimaryExpressionContext
	subterm  IValueExpressionContext
	baseterm IValueExpressionContext
	forterm  IValueExpressionContext
}

func NewSubstringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubstringContext {
	var p = new(SubstringContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SubstringContext) GetSubterm() IValueExpressionContext { return s.subterm }

func (s *SubstringContext) GetBaseterm() IValueExpressionContext { return s.baseterm }

func (s *SubstringContext) GetForterm() IValueExpressionContext { return s.forterm }

func (s *SubstringContext) SetSubterm(v IValueExpressionContext) { s.subterm = v }

func (s *SubstringContext) SetBaseterm(v IValueExpressionContext) { s.baseterm = v }

func (s *SubstringContext) SetForterm(v IValueExpressionContext) { s.forterm = v }

func (s *SubstringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubstringContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSUBSTRING, 0)
}

func (s *SubstringContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFROM, 0)
}

func (s *SubstringContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *SubstringContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *SubstringContext) FOR() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFOR, 0)
}

func (s *SubstringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSubstring(s)
	}
}

func (s *SubstringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSubstring(s)
	}
}

type CastContext struct {
	*PrimaryExpressionContext
}

func NewCastContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CastContext {
	var p = new(CastContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *CastContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CastContext) CAST() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCAST, 0)
}

func (s *CastContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CastContext) AS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAS, 0)
}

func (s *CastContext) Type_t() IType_tContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_tContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_tContext)
}

func (s *CastContext) TRY_CAST() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTRY_CAST, 0)
}

func (s *CastContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterCast(s)
	}
}

func (s *CastContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitCast(s)
	}
}

type LambdaContext struct {
	*PrimaryExpressionContext
}

func NewLambdaContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *LambdaContext {
	var p = new(LambdaContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *LambdaContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *LambdaContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LambdaContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *LambdaContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterLambda(s)
	}
}

func (s *LambdaContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitLambda(s)
	}
}

type ParenthesizedExpressionContext struct {
	*PrimaryExpressionContext
}

func NewParenthesizedExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParenthesizedExpressionContext {
	var p = new(ParenthesizedExpressionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParenthesizedExpressionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ParenthesizedExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterParenthesizedExpression(s)
	}
}

func (s *ParenthesizedExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitParenthesizedExpression(s)
	}
}

type ParameterContext struct {
	*PrimaryExpressionContext
}

func NewParameterContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ParameterContext {
	var p = new(ParameterContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterParameter(s)
	}
}

func (s *ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitParameter(s)
	}
}

type NormalizeContext struct {
	*PrimaryExpressionContext
	normalform antlr.Token
}

func NewNormalizeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NormalizeContext {
	var p = new(NormalizeContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *NormalizeContext) GetNormalform() antlr.Token { return s.normalform }

func (s *NormalizeContext) SetNormalform(v antlr.Token) { s.normalform = v }

func (s *NormalizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NormalizeContext) NORMALIZE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNORMALIZE, 0)
}

func (s *NormalizeContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *NormalizeContext) NFD() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFD, 0)
}

func (s *NormalizeContext) NFC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFC, 0)
}

func (s *NormalizeContext) NFKD() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFKD, 0)
}

func (s *NormalizeContext) NFKC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFKC, 0)
}

func (s *NormalizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterNormalize(s)
	}
}

func (s *NormalizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitNormalize(s)
	}
}

type IntervalLiteralContext struct {
	*PrimaryExpressionContext
}

func NewIntervalLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntervalLiteralContext {
	var p = new(IntervalLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *IntervalLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalLiteralContext) Interval() IIntervalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *IntervalLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterIntervalLiteral(s)
	}
}

func (s *IntervalLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitIntervalLiteral(s)
	}
}

type SimpleCaseContext struct {
	*PrimaryExpressionContext
	elseExpression IExpressionContext
}

func NewSimpleCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SimpleCaseContext {
	var p = new(SimpleCaseContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SimpleCaseContext) GetElseExpression() IExpressionContext { return s.elseExpression }

func (s *SimpleCaseContext) SetElseExpression(v IExpressionContext) { s.elseExpression = v }

func (s *SimpleCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCASE, 0)
}

func (s *SimpleCaseContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *SimpleCaseContext) END() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEND, 0)
}

func (s *SimpleCaseContext) AllWhenClause() []IWhenClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem())
	var tst = make([]IWhenClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenClauseContext)
		}
	}

	return tst
}

func (s *SimpleCaseContext) WhenClause(i int) IWhenClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenClauseContext)
}

func (s *SimpleCaseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserELSE, 0)
}

func (s *SimpleCaseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SimpleCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSimpleCase(s)
	}
}

func (s *SimpleCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSimpleCase(s)
	}
}

type ColumnReferenceContext struct {
	*PrimaryExpressionContext
}

func NewColumnReferenceContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ColumnReferenceContext {
	var p = new(ColumnReferenceContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ColumnReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ColumnReferenceContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ColumnReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterColumnReference(s)
	}
}

func (s *ColumnReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitColumnReference(s)
	}
}

type NullLiteralContext struct {
	*PrimaryExpressionContext
}

func NewNullLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NullLiteralContext {
	var p = new(NullLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *NullLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NullLiteralContext) NULL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNULL, 0)
}

func (s *NullLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterNullLiteral(s)
	}
}

func (s *NullLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitNullLiteral(s)
	}
}

type TypedLiteralContext struct {
	*PrimaryExpressionContext
}

func NewTypedLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TypedLiteralContext {
	var p = new(TypedLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *TypedLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypedLiteralContext) BaseType() IBaseTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseTypeContext)
}

func (s *TypedLiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSTRING, 0)
}

func (s *TypedLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTypedLiteral(s)
	}
}

func (s *TypedLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTypedLiteral(s)
	}
}

type RowConstructorContext struct {
	*PrimaryExpressionContext
}

func NewRowConstructorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *RowConstructorContext {
	var p = new(RowConstructorContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *RowConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RowConstructorContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *RowConstructorContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RowConstructorContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROW, 0)
}

func (s *RowConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterRowConstructor(s)
	}
}

func (s *RowConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitRowConstructor(s)
	}
}

type SubscriptContext struct {
	*PrimaryExpressionContext
	value IPrimaryExpressionContext
	index IValueExpressionContext
}

func NewSubscriptContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubscriptContext {
	var p = new(SubscriptContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SubscriptContext) GetValue() IPrimaryExpressionContext { return s.value }

func (s *SubscriptContext) GetIndex() IValueExpressionContext { return s.index }

func (s *SubscriptContext) SetValue(v IPrimaryExpressionContext) { s.value = v }

func (s *SubscriptContext) SetIndex(v IValueExpressionContext) { s.index = v }

func (s *SubscriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubscriptContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *SubscriptContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *SubscriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSubscript(s)
	}
}

func (s *SubscriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSubscript(s)
	}
}

type SubqueryExpressionContext struct {
	*PrimaryExpressionContext
}

func NewSubqueryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SubqueryExpressionContext {
	var p = new(SubqueryExpressionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SubqueryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubqueryExpressionContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *SubqueryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSubqueryExpression(s)
	}
}

func (s *SubqueryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSubqueryExpression(s)
	}
}

type BinaryLiteralContext struct {
	*PrimaryExpressionContext
}

func NewBinaryLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BinaryLiteralContext {
	var p = new(BinaryLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *BinaryLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BinaryLiteralContext) BINARY_LITERAL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBINARY_LITERAL, 0)
}

func (s *BinaryLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBinaryLiteral(s)
	}
}

func (s *BinaryLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBinaryLiteral(s)
	}
}

type ExtractContext struct {
	*PrimaryExpressionContext
}

func NewExtractContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExtractContext {
	var p = new(ExtractContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ExtractContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExtractContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEXTRACT, 0)
}

func (s *ExtractContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExtractContext) FROM() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFROM, 0)
}

func (s *ExtractContext) ValueExpression() IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *ExtractContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterExtract(s)
	}
}

func (s *ExtractContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitExtract(s)
	}
}

type StringLiteralContext struct {
	*PrimaryExpressionContext
}

func NewStringLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) STRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSTRING, 0)
}

func (s *StringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterStringLiteral(s)
	}
}

func (s *StringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitStringLiteral(s)
	}
}

type ArrayConstructorContext struct {
	*PrimaryExpressionContext
}

func NewArrayConstructorContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ArrayConstructorContext {
	var p = new(ArrayConstructorContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ArrayConstructorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayConstructorContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserARRAY, 0)
}

func (s *ArrayConstructorContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ArrayConstructorContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayConstructorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterArrayConstructor(s)
	}
}

func (s *ArrayConstructorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitArrayConstructor(s)
	}
}

type FunctionCallContext struct {
	*PrimaryExpressionContext
}

func NewFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) QualifiedName() IQualifiedNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedNameContext)
}

func (s *FunctionCallContext) ASTERISK() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserASTERISK, 0)
}

func (s *FunctionCallContext) Filter() IFilterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFilterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFilterContext)
}

func (s *FunctionCallContext) Over() IOverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOverContext)
}

func (s *FunctionCallContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *FunctionCallContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallContext) SetQuantifier() ISetQuantifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISetQuantifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISetQuantifierContext)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

type IntegerLiteralContext struct {
	*PrimaryExpressionContext
}

func NewIntegerLiteralContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IntegerLiteralContext {
	var p = new(IntegerLiteralContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntegerLiteralContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTEGER_VALUE, 0)
}

func (s *IntegerLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterIntegerLiteral(s)
	}
}

func (s *IntegerLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitIntegerLiteral(s)
	}
}

type ExistsContext struct {
	*PrimaryExpressionContext
}

func NewExistsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExistsContext {
	var p = new(ExistsContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *ExistsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExistsContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEXISTS, 0)
}

func (s *ExistsContext) Query() IQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQueryContext)
}

func (s *ExistsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterExists(s)
	}
}

func (s *ExistsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitExists(s)
	}
}

type PositionContext struct {
	*PrimaryExpressionContext
}

func NewPositionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PositionContext {
	var p = new(PositionContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *PositionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PositionContext) POSITION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPOSITION, 0)
}

func (s *PositionContext) AllValueExpression() []IValueExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem())
	var tst = make([]IValueExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueExpressionContext)
		}
	}

	return tst
}

func (s *PositionContext) ValueExpression(i int) IValueExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueExpressionContext)
}

func (s *PositionContext) IN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIN, 0)
}

func (s *PositionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterPosition(s)
	}
}

func (s *PositionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitPosition(s)
	}
}

type SearchedCaseContext struct {
	*PrimaryExpressionContext
	elseExpression IExpressionContext
}

func NewSearchedCaseContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *SearchedCaseContext {
	var p = new(SearchedCaseContext)

	p.PrimaryExpressionContext = NewEmptyPrimaryExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*PrimaryExpressionContext))

	return p
}

func (s *SearchedCaseContext) GetElseExpression() IExpressionContext { return s.elseExpression }

func (s *SearchedCaseContext) SetElseExpression(v IExpressionContext) { s.elseExpression = v }

func (s *SearchedCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SearchedCaseContext) CASE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCASE, 0)
}

func (s *SearchedCaseContext) END() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEND, 0)
}

func (s *SearchedCaseContext) AllWhenClause() []IWhenClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem())
	var tst = make([]IWhenClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IWhenClauseContext)
		}
	}

	return tst
}

func (s *SearchedCaseContext) WhenClause(i int) IWhenClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhenClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IWhenClauseContext)
}

func (s *SearchedCaseContext) ELSE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserELSE, 0)
}

func (s *SearchedCaseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SearchedCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterSearchedCase(s)
	}
}

func (s *SearchedCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitSearchedCase(s)
	}
}

func (p *SQLBaseParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	return p.primaryExpression(0)
}

func (p *SQLBaseParser) primaryExpression(_p int) (localctx IPrimaryExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPrimaryExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 56
	p.EnterRecursionRule(localctx, 56, SQLBaseParserRULE_primaryExpression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) {
	case 1:
		localctx = NewNullLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(550)
			p.Match(SQLBaseParserNULL)
		}

	case 2:
		localctx = NewStringLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(551)
			p.Match(SQLBaseParserSTRING)
		}

	case 3:
		localctx = NewBinaryLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(552)
			p.Match(SQLBaseParserBINARY_LITERAL)
		}

	case 4:
		localctx = NewDecimalLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(553)
			p.Match(SQLBaseParserDECIMAL_VALUE)
		}

	case 5:
		localctx = NewIntegerLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(554)
			p.Match(SQLBaseParserINTEGER_VALUE)
		}

	case 6:
		localctx = NewBoolLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(555)
			p.Booleanliteral()
		}

	case 7:
		localctx = NewTypedLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(556)
			p.BaseType()
		}
		{
			p.SetState(557)
			p.Match(SQLBaseParserSTRING)
		}

	case 8:
		localctx = NewIntervalLiteralContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(559)
			p.Interval()
		}

	case 9:
		localctx = NewParameterContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(560)
			p.Match(SQLBaseParserT__3)
		}

	case 10:
		localctx = NewTypeConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(563)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SQLBaseParserADD, SQLBaseParserALL, SQLBaseParserSOME, SQLBaseParserANY, SQLBaseParserAT, SQLBaseParserNO, SQLBaseParserSUBSTRING, SQLBaseParserPOSITION, SQLBaseParserTINYINT, SQLBaseParserSMALLINT, SQLBaseParserINTEGER, SQLBaseParserDATE, SQLBaseParserTIME, SQLBaseParserTIMESTAMP, SQLBaseParserINTERVAL, SQLBaseParserYEAR, SQLBaseParserMONTH, SQLBaseParserDAY, SQLBaseParserHOUR, SQLBaseParserMINUTE, SQLBaseParserSECOND, SQLBaseParserZONE, SQLBaseParserFILTER, SQLBaseParserOVER, SQLBaseParserPARTITION, SQLBaseParserRANGE, SQLBaseParserROWS, SQLBaseParserPRECEDING, SQLBaseParserFOLLOWING, SQLBaseParserCURRENT, SQLBaseParserROW, SQLBaseParserSCHEMA, SQLBaseParserCOMMENT, SQLBaseParserVIEW, SQLBaseParserREPLACE, SQLBaseParserGRANT, SQLBaseParserREVOKE, SQLBaseParserPRIVILEGES, SQLBaseParserPUBLIC, SQLBaseParserOPTION, SQLBaseParserEXPLAIN, SQLBaseParserANALYZE, SQLBaseParserFORMAT, SQLBaseParserTYPE, SQLBaseParserTEXT, SQLBaseParserGRAPHVIZ, SQLBaseParserLOGICAL, SQLBaseParserDISTRIBUTED, SQLBaseParserVALIDATE, SQLBaseParserSHOW, SQLBaseParserTABLES, SQLBaseParserSCHEMAS, SQLBaseParserCATALOGS, SQLBaseParserCOLUMNS, SQLBaseParserCOLUMN, SQLBaseParserUSE, SQLBaseParserPARTITIONS, SQLBaseParserFUNCTIONS, SQLBaseParserTO, SQLBaseParserSYSTEM, SQLBaseParserBERNOULLI, SQLBaseParserPOISSONIZED, SQLBaseParserTABLESAMPLE, SQLBaseParserARRAY, SQLBaseParserMAP, SQLBaseParserSET, SQLBaseParserRESET, SQLBaseParserSESSION, SQLBaseParserDATA, SQLBaseParserSTART, SQLBaseParserTRANSACTION, SQLBaseParserCOMMIT, SQLBaseParserROLLBACK, SQLBaseParserWORK, SQLBaseParserISOLATION, SQLBaseParserLEVEL, SQLBaseParserSERIALIZABLE, SQLBaseParserREPEATABLE, SQLBaseParserCOMMITTED, SQLBaseParserUNCOMMITTED, SQLBaseParserREAD, SQLBaseParserWRITE, SQLBaseParserONLY, SQLBaseParserCALL, SQLBaseParserINPUT, SQLBaseParserOUTPUT, SQLBaseParserCASCADE, SQLBaseParserRESTRICT, SQLBaseParserINCLUDING, SQLBaseParserEXCLUDING, SQLBaseParserPROPERTIES, SQLBaseParserNFD, SQLBaseParserNFC, SQLBaseParserNFKD, SQLBaseParserNFKC, SQLBaseParserIF, SQLBaseParserNULLIF, SQLBaseParserCOALESCE, SQLBaseParserIDENTIFIER, SQLBaseParserDIGIT_IDENTIFIER, SQLBaseParserQUOTED_IDENTIFIER, SQLBaseParserBACKQUOTED_IDENTIFIER:
			{
				p.SetState(561)
				p.Identifier()
			}

		case SQLBaseParserDOUBLE_PRECISION:
			{
				p.SetState(562)
				p.Match(SQLBaseParserDOUBLE_PRECISION)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		{
			p.SetState(565)
			p.Match(SQLBaseParserSTRING)
		}

	case 11:
		localctx = NewPositionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(566)
			p.Match(SQLBaseParserPOSITION)
		}
		{
			p.SetState(567)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(568)
			p.valueExpression(0)
		}
		{
			p.SetState(569)
			p.Match(SQLBaseParserIN)
		}
		{
			p.SetState(570)
			p.valueExpression(0)
		}
		{
			p.SetState(571)
			p.Match(SQLBaseParserT__2)
		}

	case 12:
		localctx = NewRowConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(573)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(574)
			p.Expression()
		}
		p.SetState(577)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLBaseParserT__1 {
			{
				p.SetState(575)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(576)
				p.Expression()
			}

			p.SetState(579)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(581)
			p.Match(SQLBaseParserT__2)
		}

	case 13:
		localctx = NewRowConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(583)
			p.Match(SQLBaseParserROW)
		}
		{
			p.SetState(584)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(585)
			p.Expression()
		}
		p.SetState(590)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(586)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(587)
				p.Expression()
			}

			p.SetState(592)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(593)
			p.Match(SQLBaseParserT__2)
		}

	case 14:
		localctx = NewFunctionCallContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(595)
			p.QualifiedName()
		}
		{
			p.SetState(596)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(597)
			p.Match(SQLBaseParserASTERISK)
		}
		{
			p.SetState(598)
			p.Match(SQLBaseParserT__2)
		}
		p.SetState(600)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(599)
				p.Filter()
			}

		}
		p.SetState(603)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(602)
				p.Over()
			}

		}

	case 15:
		localctx = NewFunctionCallContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(605)
			p.QualifiedName()
		}
		{
			p.SetState(606)
			p.Match(SQLBaseParserT__0)
		}
		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserT__0)|(1<<SQLBaseParserT__3)|(1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserDISTINCT)|(1<<SQLBaseParserAT)|(1<<SQLBaseParserNOT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserEXISTS-32))|(1<<(SQLBaseParserNULL-32))|(1<<(SQLBaseParserTRUE-32))|(1<<(SQLBaseParserFALSE-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32))|(1<<(SQLBaseParserCURRENT_DATE-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SQLBaseParserCURRENT_TIME-64))|(1<<(SQLBaseParserCURRENT_TIMESTAMP-64))|(1<<(SQLBaseParserLOCALTIME-64))|(1<<(SQLBaseParserLOCALTIMESTAMP-64))|(1<<(SQLBaseParserEXTRACT-64))|(1<<(SQLBaseParserCASE-64))|(1<<(SQLBaseParserFILTER-64))|(1<<(SQLBaseParserOVER-64))|(1<<(SQLBaseParserPARTITION-64))|(1<<(SQLBaseParserRANGE-64))|(1<<(SQLBaseParserROWS-64))|(1<<(SQLBaseParserPRECEDING-64))|(1<<(SQLBaseParserFOLLOWING-64))|(1<<(SQLBaseParserCURRENT-64))|(1<<(SQLBaseParserROW-64)))) != 0) || (((_la-98)&-(0x1f+1)) == 0 && ((1<<uint((_la-98)))&((1<<(SQLBaseParserSCHEMA-98))|(1<<(SQLBaseParserCOMMENT-98))|(1<<(SQLBaseParserVIEW-98))|(1<<(SQLBaseParserREPLACE-98))|(1<<(SQLBaseParserGRANT-98))|(1<<(SQLBaseParserREVOKE-98))|(1<<(SQLBaseParserPRIVILEGES-98))|(1<<(SQLBaseParserPUBLIC-98))|(1<<(SQLBaseParserOPTION-98))|(1<<(SQLBaseParserEXPLAIN-98))|(1<<(SQLBaseParserANALYZE-98))|(1<<(SQLBaseParserFORMAT-98))|(1<<(SQLBaseParserTYPE-98))|(1<<(SQLBaseParserTEXT-98))|(1<<(SQLBaseParserGRAPHVIZ-98))|(1<<(SQLBaseParserLOGICAL-98))|(1<<(SQLBaseParserDISTRIBUTED-98))|(1<<(SQLBaseParserVALIDATE-98))|(1<<(SQLBaseParserCAST-98))|(1<<(SQLBaseParserTRY_CAST-98))|(1<<(SQLBaseParserSHOW-98))|(1<<(SQLBaseParserTABLES-98))|(1<<(SQLBaseParserSCHEMAS-98))|(1<<(SQLBaseParserCATALOGS-98))|(1<<(SQLBaseParserCOLUMNS-98))|(1<<(SQLBaseParserCOLUMN-98)))) != 0) || (((_la-130)&-(0x1f+1)) == 0 && ((1<<uint((_la-130)))&((1<<(SQLBaseParserUSE-130))|(1<<(SQLBaseParserPARTITIONS-130))|(1<<(SQLBaseParserFUNCTIONS-130))|(1<<(SQLBaseParserTO-130))|(1<<(SQLBaseParserSYSTEM-130))|(1<<(SQLBaseParserBERNOULLI-130))|(1<<(SQLBaseParserPOISSONIZED-130))|(1<<(SQLBaseParserTABLESAMPLE-130))|(1<<(SQLBaseParserARRAY-130))|(1<<(SQLBaseParserMAP-130))|(1<<(SQLBaseParserSET-130))|(1<<(SQLBaseParserRESET-130))|(1<<(SQLBaseParserSESSION-130))|(1<<(SQLBaseParserDATA-130))|(1<<(SQLBaseParserSTART-130))|(1<<(SQLBaseParserTRANSACTION-130))|(1<<(SQLBaseParserCOMMIT-130))|(1<<(SQLBaseParserROLLBACK-130))|(1<<(SQLBaseParserWORK-130))|(1<<(SQLBaseParserISOLATION-130))|(1<<(SQLBaseParserLEVEL-130))|(1<<(SQLBaseParserSERIALIZABLE-130))|(1<<(SQLBaseParserREPEATABLE-130))|(1<<(SQLBaseParserCOMMITTED-130)))) != 0) || (((_la-162)&-(0x1f+1)) == 0 && ((1<<uint((_la-162)))&((1<<(SQLBaseParserUNCOMMITTED-162))|(1<<(SQLBaseParserREAD-162))|(1<<(SQLBaseParserWRITE-162))|(1<<(SQLBaseParserONLY-162))|(1<<(SQLBaseParserCALL-162))|(1<<(SQLBaseParserINPUT-162))|(1<<(SQLBaseParserOUTPUT-162))|(1<<(SQLBaseParserCASCADE-162))|(1<<(SQLBaseParserRESTRICT-162))|(1<<(SQLBaseParserINCLUDING-162))|(1<<(SQLBaseParserEXCLUDING-162))|(1<<(SQLBaseParserPROPERTIES-162))|(1<<(SQLBaseParserNORMALIZE-162))|(1<<(SQLBaseParserNFD-162))|(1<<(SQLBaseParserNFC-162))|(1<<(SQLBaseParserNFKD-162))|(1<<(SQLBaseParserNFKC-162))|(1<<(SQLBaseParserIF-162))|(1<<(SQLBaseParserNULLIF-162))|(1<<(SQLBaseParserCOALESCE-162))|(1<<(SQLBaseParserTIME_WITH_TIME_ZONE-162))|(1<<(SQLBaseParserTIMESTAMP_WITH_TIME_ZONE-162))|(1<<(SQLBaseParserDOUBLE_PRECISION-162)))) != 0) || (((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(SQLBaseParserPLUS-194))|(1<<(SQLBaseParserMINUS-194))|(1<<(SQLBaseParserSTRING-194))|(1<<(SQLBaseParserBINARY_LITERAL-194))|(1<<(SQLBaseParserINTEGER_VALUE-194))|(1<<(SQLBaseParserDECIMAL_VALUE-194))|(1<<(SQLBaseParserIDENTIFIER-194))|(1<<(SQLBaseParserDIGIT_IDENTIFIER-194))|(1<<(SQLBaseParserQUOTED_IDENTIFIER-194))|(1<<(SQLBaseParserBACKQUOTED_IDENTIFIER-194)))) != 0) {
			p.SetState(608)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(607)
					p.SetQuantifier()
				}

			}
			{
				p.SetState(610)
				p.Expression()
			}
			p.SetState(615)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(611)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(612)
					p.Expression()
				}

				p.SetState(617)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(620)
			p.Match(SQLBaseParserT__2)
		}
		p.SetState(622)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(621)
				p.Filter()
			}

		}
		p.SetState(625)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(624)
				p.Over()
			}

		}

	case 16:
		localctx = NewLambdaContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(627)
			p.Identifier()
		}
		{
			p.SetState(628)
			p.Match(SQLBaseParserT__4)
		}
		{
			p.SetState(629)
			p.Expression()
		}

	case 17:
		localctx = NewLambdaContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(631)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(632)
			p.Identifier()
		}
		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(633)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(634)
				p.Identifier()
			}

			p.SetState(639)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(640)
			p.Match(SQLBaseParserT__2)
		}
		{
			p.SetState(641)
			p.Match(SQLBaseParserT__4)
		}
		{
			p.SetState(642)
			p.Expression()
		}

	case 18:
		localctx = NewSubqueryExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(644)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(645)
			p.Query()
		}
		{
			p.SetState(646)
			p.Match(SQLBaseParserT__2)
		}

	case 19:
		localctx = NewExistsContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(648)
			p.Match(SQLBaseParserEXISTS)
		}
		{
			p.SetState(649)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(650)
			p.Query()
		}
		{
			p.SetState(651)
			p.Match(SQLBaseParserT__2)
		}

	case 20:
		localctx = NewSimpleCaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(653)
			p.Match(SQLBaseParserCASE)
		}
		{
			p.SetState(654)
			p.valueExpression(0)
		}
		p.SetState(656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLBaseParserWHEN {
			{
				p.SetState(655)
				p.WhenClause()
			}

			p.SetState(658)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(662)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserELSE {
			{
				p.SetState(660)
				p.Match(SQLBaseParserELSE)
			}
			{
				p.SetState(661)

				var _x = p.Expression()

				localctx.(*SimpleCaseContext).elseExpression = _x
			}

		}
		{
			p.SetState(664)
			p.Match(SQLBaseParserEND)
		}

	case 21:
		localctx = NewSearchedCaseContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(666)
			p.Match(SQLBaseParserCASE)
		}
		p.SetState(668)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SQLBaseParserWHEN {
			{
				p.SetState(667)
				p.WhenClause()
			}

			p.SetState(670)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserELSE {
			{
				p.SetState(672)
				p.Match(SQLBaseParserELSE)
			}
			{
				p.SetState(673)

				var _x = p.Expression()

				localctx.(*SearchedCaseContext).elseExpression = _x
			}

		}
		{
			p.SetState(676)
			p.Match(SQLBaseParserEND)
		}

	case 22:
		localctx = NewCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(678)
			p.Match(SQLBaseParserCAST)
		}
		{
			p.SetState(679)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(680)
			p.Expression()
		}
		{
			p.SetState(681)
			p.Match(SQLBaseParserAS)
		}
		{
			p.SetState(682)
			p.type_t(0)
		}
		{
			p.SetState(683)
			p.Match(SQLBaseParserT__2)
		}

	case 23:
		localctx = NewCastContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(685)
			p.Match(SQLBaseParserTRY_CAST)
		}
		{
			p.SetState(686)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(687)
			p.Expression()
		}
		{
			p.SetState(688)
			p.Match(SQLBaseParserAS)
		}
		{
			p.SetState(689)
			p.type_t(0)
		}
		{
			p.SetState(690)
			p.Match(SQLBaseParserT__2)
		}

	case 24:
		localctx = NewArrayConstructorContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(692)
			p.Match(SQLBaseParserARRAY)
		}
		{
			p.SetState(693)
			p.Match(SQLBaseParserT__5)
		}
		p.SetState(702)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserT__0)|(1<<SQLBaseParserT__3)|(1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserAT)|(1<<SQLBaseParserNOT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserEXISTS-32))|(1<<(SQLBaseParserNULL-32))|(1<<(SQLBaseParserTRUE-32))|(1<<(SQLBaseParserFALSE-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32))|(1<<(SQLBaseParserCURRENT_DATE-32)))) != 0) || (((_la-64)&-(0x1f+1)) == 0 && ((1<<uint((_la-64)))&((1<<(SQLBaseParserCURRENT_TIME-64))|(1<<(SQLBaseParserCURRENT_TIMESTAMP-64))|(1<<(SQLBaseParserLOCALTIME-64))|(1<<(SQLBaseParserLOCALTIMESTAMP-64))|(1<<(SQLBaseParserEXTRACT-64))|(1<<(SQLBaseParserCASE-64))|(1<<(SQLBaseParserFILTER-64))|(1<<(SQLBaseParserOVER-64))|(1<<(SQLBaseParserPARTITION-64))|(1<<(SQLBaseParserRANGE-64))|(1<<(SQLBaseParserROWS-64))|(1<<(SQLBaseParserPRECEDING-64))|(1<<(SQLBaseParserFOLLOWING-64))|(1<<(SQLBaseParserCURRENT-64))|(1<<(SQLBaseParserROW-64)))) != 0) || (((_la-98)&-(0x1f+1)) == 0 && ((1<<uint((_la-98)))&((1<<(SQLBaseParserSCHEMA-98))|(1<<(SQLBaseParserCOMMENT-98))|(1<<(SQLBaseParserVIEW-98))|(1<<(SQLBaseParserREPLACE-98))|(1<<(SQLBaseParserGRANT-98))|(1<<(SQLBaseParserREVOKE-98))|(1<<(SQLBaseParserPRIVILEGES-98))|(1<<(SQLBaseParserPUBLIC-98))|(1<<(SQLBaseParserOPTION-98))|(1<<(SQLBaseParserEXPLAIN-98))|(1<<(SQLBaseParserANALYZE-98))|(1<<(SQLBaseParserFORMAT-98))|(1<<(SQLBaseParserTYPE-98))|(1<<(SQLBaseParserTEXT-98))|(1<<(SQLBaseParserGRAPHVIZ-98))|(1<<(SQLBaseParserLOGICAL-98))|(1<<(SQLBaseParserDISTRIBUTED-98))|(1<<(SQLBaseParserVALIDATE-98))|(1<<(SQLBaseParserCAST-98))|(1<<(SQLBaseParserTRY_CAST-98))|(1<<(SQLBaseParserSHOW-98))|(1<<(SQLBaseParserTABLES-98))|(1<<(SQLBaseParserSCHEMAS-98))|(1<<(SQLBaseParserCATALOGS-98))|(1<<(SQLBaseParserCOLUMNS-98))|(1<<(SQLBaseParserCOLUMN-98)))) != 0) || (((_la-130)&-(0x1f+1)) == 0 && ((1<<uint((_la-130)))&((1<<(SQLBaseParserUSE-130))|(1<<(SQLBaseParserPARTITIONS-130))|(1<<(SQLBaseParserFUNCTIONS-130))|(1<<(SQLBaseParserTO-130))|(1<<(SQLBaseParserSYSTEM-130))|(1<<(SQLBaseParserBERNOULLI-130))|(1<<(SQLBaseParserPOISSONIZED-130))|(1<<(SQLBaseParserTABLESAMPLE-130))|(1<<(SQLBaseParserARRAY-130))|(1<<(SQLBaseParserMAP-130))|(1<<(SQLBaseParserSET-130))|(1<<(SQLBaseParserRESET-130))|(1<<(SQLBaseParserSESSION-130))|(1<<(SQLBaseParserDATA-130))|(1<<(SQLBaseParserSTART-130))|(1<<(SQLBaseParserTRANSACTION-130))|(1<<(SQLBaseParserCOMMIT-130))|(1<<(SQLBaseParserROLLBACK-130))|(1<<(SQLBaseParserWORK-130))|(1<<(SQLBaseParserISOLATION-130))|(1<<(SQLBaseParserLEVEL-130))|(1<<(SQLBaseParserSERIALIZABLE-130))|(1<<(SQLBaseParserREPEATABLE-130))|(1<<(SQLBaseParserCOMMITTED-130)))) != 0) || (((_la-162)&-(0x1f+1)) == 0 && ((1<<uint((_la-162)))&((1<<(SQLBaseParserUNCOMMITTED-162))|(1<<(SQLBaseParserREAD-162))|(1<<(SQLBaseParserWRITE-162))|(1<<(SQLBaseParserONLY-162))|(1<<(SQLBaseParserCALL-162))|(1<<(SQLBaseParserINPUT-162))|(1<<(SQLBaseParserOUTPUT-162))|(1<<(SQLBaseParserCASCADE-162))|(1<<(SQLBaseParserRESTRICT-162))|(1<<(SQLBaseParserINCLUDING-162))|(1<<(SQLBaseParserEXCLUDING-162))|(1<<(SQLBaseParserPROPERTIES-162))|(1<<(SQLBaseParserNORMALIZE-162))|(1<<(SQLBaseParserNFD-162))|(1<<(SQLBaseParserNFC-162))|(1<<(SQLBaseParserNFKD-162))|(1<<(SQLBaseParserNFKC-162))|(1<<(SQLBaseParserIF-162))|(1<<(SQLBaseParserNULLIF-162))|(1<<(SQLBaseParserCOALESCE-162))|(1<<(SQLBaseParserTIME_WITH_TIME_ZONE-162))|(1<<(SQLBaseParserTIMESTAMP_WITH_TIME_ZONE-162))|(1<<(SQLBaseParserDOUBLE_PRECISION-162)))) != 0) || (((_la-194)&-(0x1f+1)) == 0 && ((1<<uint((_la-194)))&((1<<(SQLBaseParserPLUS-194))|(1<<(SQLBaseParserMINUS-194))|(1<<(SQLBaseParserSTRING-194))|(1<<(SQLBaseParserBINARY_LITERAL-194))|(1<<(SQLBaseParserINTEGER_VALUE-194))|(1<<(SQLBaseParserDECIMAL_VALUE-194))|(1<<(SQLBaseParserIDENTIFIER-194))|(1<<(SQLBaseParserDIGIT_IDENTIFIER-194))|(1<<(SQLBaseParserQUOTED_IDENTIFIER-194))|(1<<(SQLBaseParserBACKQUOTED_IDENTIFIER-194)))) != 0) {
			{
				p.SetState(694)
				p.Expression()
			}
			p.SetState(699)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(695)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(696)
					p.Expression()
				}

				p.SetState(701)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(704)
			p.Match(SQLBaseParserT__6)
		}

	case 25:
		localctx = NewColumnReferenceContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(705)
			p.Identifier()
		}

	case 26:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(706)

			var _m = p.Match(SQLBaseParserCURRENT_DATE)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}

	case 27:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(707)

			var _m = p.Match(SQLBaseParserCURRENT_TIME)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(711)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(708)
				p.Match(SQLBaseParserT__0)
			}
			{
				p.SetState(709)

				var _m = p.Match(SQLBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(710)
				p.Match(SQLBaseParserT__2)
			}

		}

	case 28:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(713)

			var _m = p.Match(SQLBaseParserCURRENT_TIMESTAMP)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(717)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(714)
				p.Match(SQLBaseParserT__0)
			}
			{
				p.SetState(715)

				var _m = p.Match(SQLBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(716)
				p.Match(SQLBaseParserT__2)
			}

		}

	case 29:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(719)

			var _m = p.Match(SQLBaseParserLOCALTIME)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(723)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(720)
				p.Match(SQLBaseParserT__0)
			}
			{
				p.SetState(721)

				var _m = p.Match(SQLBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(722)
				p.Match(SQLBaseParserT__2)
			}

		}

	case 30:
		localctx = NewSpecialDateTimeFunctionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(725)

			var _m = p.Match(SQLBaseParserLOCALTIMESTAMP)

			localctx.(*SpecialDateTimeFunctionContext).name = _m
		}
		p.SetState(729)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(726)
				p.Match(SQLBaseParserT__0)
			}
			{
				p.SetState(727)

				var _m = p.Match(SQLBaseParserINTEGER_VALUE)

				localctx.(*SpecialDateTimeFunctionContext).precision = _m
			}
			{
				p.SetState(728)
				p.Match(SQLBaseParserT__2)
			}

		}

	case 31:
		localctx = NewSubstringContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(731)
			p.Match(SQLBaseParserSUBSTRING)
		}
		{
			p.SetState(732)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(733)

			var _x = p.valueExpression(0)

			localctx.(*SubstringContext).subterm = _x
		}
		{
			p.SetState(734)
			p.Match(SQLBaseParserFROM)
		}
		{
			p.SetState(735)

			var _x = p.valueExpression(0)

			localctx.(*SubstringContext).baseterm = _x
		}
		p.SetState(738)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserFOR {
			{
				p.SetState(736)
				p.Match(SQLBaseParserFOR)
			}
			{
				p.SetState(737)

				var _x = p.valueExpression(0)

				localctx.(*SubstringContext).forterm = _x
			}

		}
		{
			p.SetState(740)
			p.Match(SQLBaseParserT__2)
		}

	case 32:
		localctx = NewNormalizeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(742)
			p.Match(SQLBaseParserNORMALIZE)
		}
		{
			p.SetState(743)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(744)
			p.valueExpression(0)
		}
		p.SetState(747)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SQLBaseParserT__1 {
			{
				p.SetState(745)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(746)

				var _lt = p.GetTokenStream().LT(1)

				localctx.(*NormalizeContext).normalform = _lt

				_la = p.GetTokenStream().LA(1)

				if !(((_la-178)&-(0x1f+1)) == 0 && ((1<<uint((_la-178)))&((1<<(SQLBaseParserNFD-178))|(1<<(SQLBaseParserNFC-178))|(1<<(SQLBaseParserNFKD-178))|(1<<(SQLBaseParserNFKC-178)))) != 0) {
					var _ri = p.GetErrorHandler().RecoverInline(p)

					localctx.(*NormalizeContext).normalform = _ri
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		}
		{
			p.SetState(749)
			p.Match(SQLBaseParserT__2)
		}

	case 33:
		localctx = NewExtractContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(751)
			p.Match(SQLBaseParserEXTRACT)
		}
		{
			p.SetState(752)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(753)
			p.Identifier()
		}
		{
			p.SetState(754)
			p.Match(SQLBaseParserFROM)
		}
		{
			p.SetState(755)
			p.valueExpression(0)
		}
		{
			p.SetState(756)
			p.Match(SQLBaseParserT__2)
		}

	case 34:
		localctx = NewParenthesizedExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(758)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(759)
			p.Expression()
		}
		{
			p.SetState(760)
			p.Match(SQLBaseParserT__2)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(774)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(772)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
			case 1:
				localctx = NewSubscriptContext(p, NewPrimaryExpressionContext(p, _parentctx, _parentState))
				localctx.(*SubscriptContext).value = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_primaryExpression)
				p.SetState(764)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(765)
					p.Match(SQLBaseParserT__5)
				}
				{
					p.SetState(766)

					var _x = p.valueExpression(0)

					localctx.(*SubscriptContext).index = _x
				}
				{
					p.SetState(767)
					p.Match(SQLBaseParserT__6)
				}

			case 2:
				localctx = NewDereferenceContext(p, NewPrimaryExpressionContext(p, _parentctx, _parentState))
				localctx.(*DereferenceContext).base = _prevctx

				p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_primaryExpression)
				p.SetState(769)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(770)
					p.Match(SQLBaseParserDOT)
				}
				{
					p.SetState(771)

					var _x = p.Identifier()

					localctx.(*DereferenceContext).fieldName = _x
				}

			}

		}
		p.SetState(776)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
	}

	return localctx
}

// ITimeZoneSpecifierContext is an interface to support dynamic dispatch.
type ITimeZoneSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTimeZoneSpecifierContext differentiates from other interfaces.
	IsTimeZoneSpecifierContext()
}

type TimeZoneSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTimeZoneSpecifierContext() *TimeZoneSpecifierContext {
	var p = new(TimeZoneSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_timeZoneSpecifier
	return p
}

func (*TimeZoneSpecifierContext) IsTimeZoneSpecifierContext() {}

func NewTimeZoneSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TimeZoneSpecifierContext {
	var p = new(TimeZoneSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_timeZoneSpecifier

	return p
}

func (s *TimeZoneSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *TimeZoneSpecifierContext) CopyFrom(ctx *TimeZoneSpecifierContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *TimeZoneSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeZoneSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type TimeZoneIntervalContext struct {
	*TimeZoneSpecifierContext
}

func NewTimeZoneIntervalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TimeZoneIntervalContext {
	var p = new(TimeZoneIntervalContext)

	p.TimeZoneSpecifierContext = NewEmptyTimeZoneSpecifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TimeZoneSpecifierContext))

	return p
}

func (s *TimeZoneIntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeZoneIntervalContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTIME, 0)
}

func (s *TimeZoneIntervalContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserZONE, 0)
}

func (s *TimeZoneIntervalContext) Interval() IIntervalContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIntervalContext)
}

func (s *TimeZoneIntervalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTimeZoneInterval(s)
	}
}

func (s *TimeZoneIntervalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTimeZoneInterval(s)
	}
}

type TimeZoneStringContext struct {
	*TimeZoneSpecifierContext
}

func NewTimeZoneStringContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TimeZoneStringContext {
	var p = new(TimeZoneStringContext)

	p.TimeZoneSpecifierContext = NewEmptyTimeZoneSpecifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*TimeZoneSpecifierContext))

	return p
}

func (s *TimeZoneStringContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TimeZoneStringContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTIME, 0)
}

func (s *TimeZoneStringContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserZONE, 0)
}

func (s *TimeZoneStringContext) STRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSTRING, 0)
}

func (s *TimeZoneStringContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTimeZoneString(s)
	}
}

func (s *TimeZoneStringContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTimeZoneString(s)
	}
}

func (p *SQLBaseParser) TimeZoneSpecifier() (localctx ITimeZoneSpecifierContext) {
	localctx = NewTimeZoneSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SQLBaseParserRULE_timeZoneSpecifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(783)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		localctx = NewTimeZoneIntervalContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(777)
			p.Match(SQLBaseParserTIME)
		}
		{
			p.SetState(778)
			p.Match(SQLBaseParserZONE)
		}
		{
			p.SetState(779)
			p.Interval()
		}

	case 2:
		localctx = NewTimeZoneStringContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(780)
			p.Match(SQLBaseParserTIME)
		}
		{
			p.SetState(781)
			p.Match(SQLBaseParserZONE)
		}
		{
			p.SetState(782)
			p.Match(SQLBaseParserSTRING)
		}

	}

	return localctx
}

// IComparisonOperatorContext is an interface to support dynamic dispatch.
type IComparisonOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonOperatorContext differentiates from other interfaces.
	IsComparisonOperatorContext()
}

type ComparisonOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonOperatorContext() *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_comparisonOperator
	return p
}

func (*ComparisonOperatorContext) IsComparisonOperatorContext() {}

func NewComparisonOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonOperatorContext {
	var p = new(ComparisonOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_comparisonOperator

	return p
}

func (s *ComparisonOperatorContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonOperatorContext) EQ() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEQ, 0)
}

func (s *ComparisonOperatorContext) NEQ() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNEQ, 0)
}

func (s *ComparisonOperatorContext) LT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLT, 0)
}

func (s *ComparisonOperatorContext) LTE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLTE, 0)
}

func (s *ComparisonOperatorContext) GT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGT, 0)
}

func (s *ComparisonOperatorContext) GTE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGTE, 0)
}

func (s *ComparisonOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonOperatorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterComparisonOperator(s)
	}
}

func (s *ComparisonOperatorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitComparisonOperator(s)
	}
}

func (p *SQLBaseParser) ComparisonOperator() (localctx IComparisonOperatorContext) {
	localctx = NewComparisonOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SQLBaseParserRULE_comparisonOperator)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(785)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-188)&-(0x1f+1)) == 0 && ((1<<uint((_la-188)))&((1<<(SQLBaseParserEQ-188))|(1<<(SQLBaseParserNEQ-188))|(1<<(SQLBaseParserLT-188))|(1<<(SQLBaseParserLTE-188))|(1<<(SQLBaseParserGT-188))|(1<<(SQLBaseParserGTE-188)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IComparisonQuantifierContext is an interface to support dynamic dispatch.
type IComparisonQuantifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsComparisonQuantifierContext differentiates from other interfaces.
	IsComparisonQuantifierContext()
}

type ComparisonQuantifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyComparisonQuantifierContext() *ComparisonQuantifierContext {
	var p = new(ComparisonQuantifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_comparisonQuantifier
	return p
}

func (*ComparisonQuantifierContext) IsComparisonQuantifierContext() {}

func NewComparisonQuantifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ComparisonQuantifierContext {
	var p = new(ComparisonQuantifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_comparisonQuantifier

	return p
}

func (s *ComparisonQuantifierContext) GetParser() antlr.Parser { return s.parser }

func (s *ComparisonQuantifierContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserALL, 0)
}

func (s *ComparisonQuantifierContext) SOME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSOME, 0)
}

func (s *ComparisonQuantifierContext) ANY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserANY, 0)
}

func (s *ComparisonQuantifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ComparisonQuantifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ComparisonQuantifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterComparisonQuantifier(s)
	}
}

func (s *ComparisonQuantifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitComparisonQuantifier(s)
	}
}

func (p *SQLBaseParser) ComparisonQuantifier() (localctx IComparisonQuantifierContext) {
	localctx = NewComparisonQuantifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SQLBaseParserRULE_comparisonQuantifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(787)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IIntervalContext is an interface to support dynamic dispatch.
type IIntervalContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSign returns the sign token.
	GetSign() antlr.Token

	// SetSign sets the sign token.
	SetSign(antlr.Token)

	// GetFrom returns the from rule contexts.
	GetFrom() IIntervalFieldContext

	// GetTo returns the to rule contexts.
	GetTo() IIntervalFieldContext

	// SetFrom sets the from rule contexts.
	SetFrom(IIntervalFieldContext)

	// SetTo sets the to rule contexts.
	SetTo(IIntervalFieldContext)

	// IsIntervalContext differentiates from other interfaces.
	IsIntervalContext()
}

type IntervalContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	sign   antlr.Token
	from   IIntervalFieldContext
	to     IIntervalFieldContext
}

func NewEmptyIntervalContext() *IntervalContext {
	var p = new(IntervalContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_interval
	return p
}

func (*IntervalContext) IsIntervalContext() {}

func NewIntervalContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalContext {
	var p = new(IntervalContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_interval

	return p
}

func (s *IntervalContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalContext) GetSign() antlr.Token { return s.sign }

func (s *IntervalContext) SetSign(v antlr.Token) { s.sign = v }

func (s *IntervalContext) GetFrom() IIntervalFieldContext { return s.from }

func (s *IntervalContext) GetTo() IIntervalFieldContext { return s.to }

func (s *IntervalContext) SetFrom(v IIntervalFieldContext) { s.from = v }

func (s *IntervalContext) SetTo(v IIntervalFieldContext) { s.to = v }

func (s *IntervalContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTERVAL, 0)
}

func (s *IntervalContext) STRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSTRING, 0)
}

func (s *IntervalContext) AllIntervalField() []IIntervalFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIntervalFieldContext)(nil)).Elem())
	var tst = make([]IIntervalFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIntervalFieldContext)
		}
	}

	return tst
}

func (s *IntervalContext) IntervalField(i int) IIntervalFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIntervalFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIntervalFieldContext)
}

func (s *IntervalContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTO, 0)
}

func (s *IntervalContext) PLUS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPLUS, 0)
}

func (s *IntervalContext) MINUS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMINUS, 0)
}

func (s *IntervalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterInterval(s)
	}
}

func (s *IntervalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitInterval(s)
	}
}

func (p *SQLBaseParser) Interval() (localctx IIntervalContext) {
	localctx = NewIntervalContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SQLBaseParserRULE_interval)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		p.Match(SQLBaseParserINTERVAL)
	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserPLUS || _la == SQLBaseParserMINUS {
		{
			p.SetState(790)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*IntervalContext).sign = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserPLUS || _la == SQLBaseParserMINUS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*IntervalContext).sign = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}
	{
		p.SetState(793)
		p.Match(SQLBaseParserSTRING)
	}
	{
		p.SetState(794)

		var _x = p.IntervalField()

		localctx.(*IntervalContext).from = _x
	}
	p.SetState(797)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(795)
			p.Match(SQLBaseParserTO)
		}
		{
			p.SetState(796)

			var _x = p.IntervalField()

			localctx.(*IntervalContext).to = _x
		}

	}

	return localctx
}

// IIntervalFieldContext is an interface to support dynamic dispatch.
type IIntervalFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIntervalFieldContext differentiates from other interfaces.
	IsIntervalFieldContext()
}

type IntervalFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIntervalFieldContext() *IntervalFieldContext {
	var p = new(IntervalFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_intervalField
	return p
}

func (*IntervalFieldContext) IsIntervalFieldContext() {}

func NewIntervalFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IntervalFieldContext {
	var p = new(IntervalFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_intervalField

	return p
}

func (s *IntervalFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *IntervalFieldContext) YEAR() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserYEAR, 0)
}

func (s *IntervalFieldContext) MONTH() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMONTH, 0)
}

func (s *IntervalFieldContext) DAY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDAY, 0)
}

func (s *IntervalFieldContext) HOUR() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserHOUR, 0)
}

func (s *IntervalFieldContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMINUTE, 0)
}

func (s *IntervalFieldContext) SECOND() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSECOND, 0)
}

func (s *IntervalFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IntervalFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IntervalFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterIntervalField(s)
	}
}

func (s *IntervalFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitIntervalField(s)
	}
}

func (p *SQLBaseParser) IntervalField() (localctx IIntervalFieldContext) {
	localctx = NewIntervalFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SQLBaseParserRULE_intervalField)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-56)&-(0x1f+1)) == 0 && ((1<<uint((_la-56)))&((1<<(SQLBaseParserYEAR-56))|(1<<(SQLBaseParserMONTH-56))|(1<<(SQLBaseParserDAY-56))|(1<<(SQLBaseParserHOUR-56))|(1<<(SQLBaseParserMINUTE-56))|(1<<(SQLBaseParserSECOND-56)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IType_tContext is an interface to support dynamic dispatch.
type IType_tContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_type_t returns the _type_t rule contexts.
	Get_type_t() IType_tContext

	// Get_identifier returns the _identifier rule contexts.
	Get_identifier() IIdentifierContext

	// Get_typeParameter returns the _typeParameter rule contexts.
	Get_typeParameter() ITypeParameterContext

	// Set_type_t sets the _type_t rule contexts.
	Set_type_t(IType_tContext)

	// Set_identifier sets the _identifier rule contexts.
	Set_identifier(IIdentifierContext)

	// Set_typeParameter sets the _typeParameter rule contexts.
	Set_typeParameter(ITypeParameterContext)

	// GetMapelem returns the mapelem rule context list.
	GetMapelem() []IType_tContext

	// GetRowidelem returns the rowidelem rule context list.
	GetRowidelem() []IIdentifierContext

	// GetRowelem returns the rowelem rule context list.
	GetRowelem() []IType_tContext

	// GetTypeelem returns the typeelem rule context list.
	GetTypeelem() []ITypeParameterContext

	// SetMapelem sets the mapelem rule context list.
	SetMapelem([]IType_tContext)

	// SetRowidelem sets the rowidelem rule context list.
	SetRowidelem([]IIdentifierContext)

	// SetRowelem sets the rowelem rule context list.
	SetRowelem([]IType_tContext)

	// SetTypeelem sets the typeelem rule context list.
	SetTypeelem([]ITypeParameterContext)

	// IsType_tContext differentiates from other interfaces.
	IsType_tContext()
}

type Type_tContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	_type_t        IType_tContext
	mapelem        []IType_tContext
	_identifier    IIdentifierContext
	rowidelem      []IIdentifierContext
	rowelem        []IType_tContext
	_typeParameter ITypeParameterContext
	typeelem       []ITypeParameterContext
}

func NewEmptyType_tContext() *Type_tContext {
	var p = new(Type_tContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_type_t
	return p
}

func (*Type_tContext) IsType_tContext() {}

func NewType_tContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_tContext {
	var p = new(Type_tContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_type_t

	return p
}

func (s *Type_tContext) GetParser() antlr.Parser { return s.parser }

func (s *Type_tContext) Get_type_t() IType_tContext { return s._type_t }

func (s *Type_tContext) Get_identifier() IIdentifierContext { return s._identifier }

func (s *Type_tContext) Get_typeParameter() ITypeParameterContext { return s._typeParameter }

func (s *Type_tContext) Set_type_t(v IType_tContext) { s._type_t = v }

func (s *Type_tContext) Set_identifier(v IIdentifierContext) { s._identifier = v }

func (s *Type_tContext) Set_typeParameter(v ITypeParameterContext) { s._typeParameter = v }

func (s *Type_tContext) GetMapelem() []IType_tContext { return s.mapelem }

func (s *Type_tContext) GetRowidelem() []IIdentifierContext { return s.rowidelem }

func (s *Type_tContext) GetRowelem() []IType_tContext { return s.rowelem }

func (s *Type_tContext) GetTypeelem() []ITypeParameterContext { return s.typeelem }

func (s *Type_tContext) SetMapelem(v []IType_tContext) { s.mapelem = v }

func (s *Type_tContext) SetRowidelem(v []IIdentifierContext) { s.rowidelem = v }

func (s *Type_tContext) SetRowelem(v []IType_tContext) { s.rowelem = v }

func (s *Type_tContext) SetTypeelem(v []ITypeParameterContext) { s.typeelem = v }

func (s *Type_tContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserARRAY, 0)
}

func (s *Type_tContext) LT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLT, 0)
}

func (s *Type_tContext) AllType_t() []IType_tContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_tContext)(nil)).Elem())
	var tst = make([]IType_tContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_tContext)
		}
	}

	return tst
}

func (s *Type_tContext) Type_t(i int) IType_tContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_tContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_tContext)
}

func (s *Type_tContext) GT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGT, 0)
}

func (s *Type_tContext) MAP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMAP, 0)
}

func (s *Type_tContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROW, 0)
}

func (s *Type_tContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *Type_tContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *Type_tContext) BaseType() IBaseTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBaseTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBaseTypeContext)
}

func (s *Type_tContext) AllTypeParameter() []ITypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem())
	var tst = make([]ITypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeParameterContext)
		}
	}

	return tst
}

func (s *Type_tContext) TypeParameter(i int) ITypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeParameterContext)
}

func (s *Type_tContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_tContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_tContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterType_t(s)
	}
}

func (s *Type_tContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitType_t(s)
	}
}

func (p *SQLBaseParser) Type_t() (localctx IType_tContext) {
	return p.type_t(0)
}

func (p *SQLBaseParser) type_t(_p int) (localctx IType_tContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewType_tContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IType_tContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 68
	p.EnterRecursionRule(localctx, 68, SQLBaseParserRULE_type_t, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(802)
			p.Match(SQLBaseParserARRAY)
		}
		{
			p.SetState(803)
			p.Match(SQLBaseParserLT)
		}
		{
			p.SetState(804)
			p.type_t(0)
		}
		{
			p.SetState(805)
			p.Match(SQLBaseParserGT)
		}

	case 2:
		{
			p.SetState(807)
			p.Match(SQLBaseParserMAP)
		}
		{
			p.SetState(808)
			p.Match(SQLBaseParserLT)
		}
		{
			p.SetState(809)

			var _x = p.type_t(0)

			localctx.(*Type_tContext)._type_t = _x
		}
		localctx.(*Type_tContext).mapelem = append(localctx.(*Type_tContext).mapelem, localctx.(*Type_tContext)._type_t)
		{
			p.SetState(810)
			p.Match(SQLBaseParserT__1)
		}
		{
			p.SetState(811)

			var _x = p.type_t(0)

			localctx.(*Type_tContext)._type_t = _x
		}
		localctx.(*Type_tContext).mapelem = append(localctx.(*Type_tContext).mapelem, localctx.(*Type_tContext)._type_t)
		{
			p.SetState(812)
			p.Match(SQLBaseParserGT)
		}

	case 3:
		{
			p.SetState(814)
			p.Match(SQLBaseParserROW)
		}
		{
			p.SetState(815)
			p.Match(SQLBaseParserT__0)
		}
		{
			p.SetState(816)

			var _x = p.Identifier()

			localctx.(*Type_tContext)._identifier = _x
		}
		localctx.(*Type_tContext).rowidelem = append(localctx.(*Type_tContext).rowidelem, localctx.(*Type_tContext)._identifier)
		{
			p.SetState(817)

			var _x = p.type_t(0)

			localctx.(*Type_tContext)._type_t = _x
		}
		localctx.(*Type_tContext).rowelem = append(localctx.(*Type_tContext).rowelem, localctx.(*Type_tContext)._type_t)
		p.SetState(824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(818)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(819)

				var _x = p.Identifier()

				localctx.(*Type_tContext)._identifier = _x
			}
			localctx.(*Type_tContext).rowidelem = append(localctx.(*Type_tContext).rowidelem, localctx.(*Type_tContext)._identifier)
			{
				p.SetState(820)

				var _x = p.type_t(0)

				localctx.(*Type_tContext)._type_t = _x
			}
			localctx.(*Type_tContext).rowelem = append(localctx.(*Type_tContext).rowelem, localctx.(*Type_tContext)._type_t)

			p.SetState(826)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(827)
			p.Match(SQLBaseParserT__2)
		}

	case 4:
		{
			p.SetState(829)
			p.BaseType()
		}
		p.SetState(841)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(830)
				p.Match(SQLBaseParserT__0)
			}
			{
				p.SetState(831)

				var _x = p.TypeParameter()

				localctx.(*Type_tContext)._typeParameter = _x
			}
			localctx.(*Type_tContext).typeelem = append(localctx.(*Type_tContext).typeelem, localctx.(*Type_tContext)._typeParameter)
			p.SetState(836)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SQLBaseParserT__1 {
				{
					p.SetState(832)
					p.Match(SQLBaseParserT__1)
				}
				{
					p.SetState(833)

					var _x = p.TypeParameter()

					localctx.(*Type_tContext)._typeParameter = _x
				}
				localctx.(*Type_tContext).typeelem = append(localctx.(*Type_tContext).typeelem, localctx.(*Type_tContext)._typeParameter)

				p.SetState(838)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(839)
				p.Match(SQLBaseParserT__2)
			}

		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewType_tContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SQLBaseParserRULE_type_t)
			p.SetState(845)

			if !(p.Precpred(p.GetParserRuleContext(), 5)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
			}
			{
				p.SetState(846)
				p.Match(SQLBaseParserARRAY)
			}

		}
		p.SetState(851)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
	}

	return localctx
}

// ITypeParameterContext is an interface to support dynamic dispatch.
type ITypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeParameterContext differentiates from other interfaces.
	IsTypeParameterContext()
}

type TypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeParameterContext() *TypeParameterContext {
	var p = new(TypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_typeParameter
	return p
}

func (*TypeParameterContext) IsTypeParameterContext() {}

func NewTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeParameterContext {
	var p = new(TypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_typeParameter

	return p
}

func (s *TypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeParameterContext) INTEGER_VALUE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTEGER_VALUE, 0)
}

func (s *TypeParameterContext) Type_t() IType_tContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_tContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_tContext)
}

func (s *TypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterTypeParameter(s)
	}
}

func (s *TypeParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitTypeParameter(s)
	}
}

func (p *SQLBaseParser) TypeParameter() (localctx ITypeParameterContext) {
	localctx = NewTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SQLBaseParserRULE_typeParameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(854)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserINTEGER_VALUE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(852)
			p.Match(SQLBaseParserINTEGER_VALUE)
		}

	case SQLBaseParserADD, SQLBaseParserALL, SQLBaseParserSOME, SQLBaseParserANY, SQLBaseParserAT, SQLBaseParserNO, SQLBaseParserSUBSTRING, SQLBaseParserPOSITION, SQLBaseParserTINYINT, SQLBaseParserSMALLINT, SQLBaseParserINTEGER, SQLBaseParserDATE, SQLBaseParserTIME, SQLBaseParserTIMESTAMP, SQLBaseParserINTERVAL, SQLBaseParserYEAR, SQLBaseParserMONTH, SQLBaseParserDAY, SQLBaseParserHOUR, SQLBaseParserMINUTE, SQLBaseParserSECOND, SQLBaseParserZONE, SQLBaseParserFILTER, SQLBaseParserOVER, SQLBaseParserPARTITION, SQLBaseParserRANGE, SQLBaseParserROWS, SQLBaseParserPRECEDING, SQLBaseParserFOLLOWING, SQLBaseParserCURRENT, SQLBaseParserROW, SQLBaseParserSCHEMA, SQLBaseParserCOMMENT, SQLBaseParserVIEW, SQLBaseParserREPLACE, SQLBaseParserGRANT, SQLBaseParserREVOKE, SQLBaseParserPRIVILEGES, SQLBaseParserPUBLIC, SQLBaseParserOPTION, SQLBaseParserEXPLAIN, SQLBaseParserANALYZE, SQLBaseParserFORMAT, SQLBaseParserTYPE, SQLBaseParserTEXT, SQLBaseParserGRAPHVIZ, SQLBaseParserLOGICAL, SQLBaseParserDISTRIBUTED, SQLBaseParserVALIDATE, SQLBaseParserSHOW, SQLBaseParserTABLES, SQLBaseParserSCHEMAS, SQLBaseParserCATALOGS, SQLBaseParserCOLUMNS, SQLBaseParserCOLUMN, SQLBaseParserUSE, SQLBaseParserPARTITIONS, SQLBaseParserFUNCTIONS, SQLBaseParserTO, SQLBaseParserSYSTEM, SQLBaseParserBERNOULLI, SQLBaseParserPOISSONIZED, SQLBaseParserTABLESAMPLE, SQLBaseParserARRAY, SQLBaseParserMAP, SQLBaseParserSET, SQLBaseParserRESET, SQLBaseParserSESSION, SQLBaseParserDATA, SQLBaseParserSTART, SQLBaseParserTRANSACTION, SQLBaseParserCOMMIT, SQLBaseParserROLLBACK, SQLBaseParserWORK, SQLBaseParserISOLATION, SQLBaseParserLEVEL, SQLBaseParserSERIALIZABLE, SQLBaseParserREPEATABLE, SQLBaseParserCOMMITTED, SQLBaseParserUNCOMMITTED, SQLBaseParserREAD, SQLBaseParserWRITE, SQLBaseParserONLY, SQLBaseParserCALL, SQLBaseParserINPUT, SQLBaseParserOUTPUT, SQLBaseParserCASCADE, SQLBaseParserRESTRICT, SQLBaseParserINCLUDING, SQLBaseParserEXCLUDING, SQLBaseParserPROPERTIES, SQLBaseParserNFD, SQLBaseParserNFC, SQLBaseParserNFKD, SQLBaseParserNFKC, SQLBaseParserIF, SQLBaseParserNULLIF, SQLBaseParserCOALESCE, SQLBaseParserTIME_WITH_TIME_ZONE, SQLBaseParserTIMESTAMP_WITH_TIME_ZONE, SQLBaseParserDOUBLE_PRECISION, SQLBaseParserIDENTIFIER, SQLBaseParserDIGIT_IDENTIFIER, SQLBaseParserQUOTED_IDENTIFIER, SQLBaseParserBACKQUOTED_IDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(853)
			p.type_t(0)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBaseTypeContext is an interface to support dynamic dispatch.
type IBaseTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBaseTypeContext differentiates from other interfaces.
	IsBaseTypeContext()
}

type BaseTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBaseTypeContext() *BaseTypeContext {
	var p = new(BaseTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_baseType
	return p
}

func (*BaseTypeContext) IsBaseTypeContext() {}

func NewBaseTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BaseTypeContext {
	var p = new(BaseTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_baseType

	return p
}

func (s *BaseTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *BaseTypeContext) TIME_WITH_TIME_ZONE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTIME_WITH_TIME_ZONE, 0)
}

func (s *BaseTypeContext) TIMESTAMP_WITH_TIME_ZONE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTIMESTAMP_WITH_TIME_ZONE, 0)
}

func (s *BaseTypeContext) DATE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDATE, 0)
}

func (s *BaseTypeContext) DOUBLE_PRECISION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDOUBLE_PRECISION, 0)
}

func (s *BaseTypeContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *BaseTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BaseTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BaseTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBaseType(s)
	}
}

func (s *BaseTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBaseType(s)
	}
}

func (p *SQLBaseParser) BaseType() (localctx IBaseTypeContext) {
	localctx = NewBaseTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SQLBaseParserRULE_baseType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(856)
			p.Match(SQLBaseParserTIME_WITH_TIME_ZONE)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(857)
			p.Match(SQLBaseParserTIMESTAMP_WITH_TIME_ZONE)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(858)
			p.Match(SQLBaseParserDATE)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(859)
			p.Match(SQLBaseParserDOUBLE_PRECISION)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(860)
			p.Identifier()
		}

	}

	return localctx
}

// IWhenClauseContext is an interface to support dynamic dispatch.
type IWhenClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCondition returns the condition rule contexts.
	GetCondition() IExpressionContext

	// GetResult returns the result rule contexts.
	GetResult() IExpressionContext

	// SetCondition sets the condition rule contexts.
	SetCondition(IExpressionContext)

	// SetResult sets the result rule contexts.
	SetResult(IExpressionContext)

	// IsWhenClauseContext differentiates from other interfaces.
	IsWhenClauseContext()
}

type WhenClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	condition IExpressionContext
	result    IExpressionContext
}

func NewEmptyWhenClauseContext() *WhenClauseContext {
	var p = new(WhenClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_whenClause
	return p
}

func (*WhenClauseContext) IsWhenClauseContext() {}

func NewWhenClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhenClauseContext {
	var p = new(WhenClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_whenClause

	return p
}

func (s *WhenClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhenClauseContext) GetCondition() IExpressionContext { return s.condition }

func (s *WhenClauseContext) GetResult() IExpressionContext { return s.result }

func (s *WhenClauseContext) SetCondition(v IExpressionContext) { s.condition = v }

func (s *WhenClauseContext) SetResult(v IExpressionContext) { s.result = v }

func (s *WhenClauseContext) WHEN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWHEN, 0)
}

func (s *WhenClauseContext) THEN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTHEN, 0)
}

func (s *WhenClauseContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *WhenClauseContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhenClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhenClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhenClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterWhenClause(s)
	}
}

func (s *WhenClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitWhenClause(s)
	}
}

func (p *SQLBaseParser) WhenClause() (localctx IWhenClauseContext) {
	localctx = NewWhenClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SQLBaseParserRULE_whenClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(863)
		p.Match(SQLBaseParserWHEN)
	}
	{
		p.SetState(864)

		var _x = p.Expression()

		localctx.(*WhenClauseContext).condition = _x
	}
	{
		p.SetState(865)
		p.Match(SQLBaseParserTHEN)
	}
	{
		p.SetState(866)

		var _x = p.Expression()

		localctx.(*WhenClauseContext).result = _x
	}

	return localctx
}

// IFilterContext is an interface to support dynamic dispatch.
type IFilterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFilterContext differentiates from other interfaces.
	IsFilterContext()
}

type FilterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFilterContext() *FilterContext {
	var p = new(FilterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_filter
	return p
}

func (*FilterContext) IsFilterContext() {}

func NewFilterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FilterContext {
	var p = new(FilterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_filter

	return p
}

func (s *FilterContext) GetParser() antlr.Parser { return s.parser }

func (s *FilterContext) FILTER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFILTER, 0)
}

func (s *FilterContext) WHERE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWHERE, 0)
}

func (s *FilterContext) BooleanExpression() IBooleanExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanExpressionContext)
}

func (s *FilterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FilterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FilterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterFilter(s)
	}
}

func (s *FilterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitFilter(s)
	}
}

func (p *SQLBaseParser) Filter() (localctx IFilterContext) {
	localctx = NewFilterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SQLBaseParserRULE_filter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(868)
		p.Match(SQLBaseParserFILTER)
	}
	{
		p.SetState(869)
		p.Match(SQLBaseParserT__0)
	}
	{
		p.SetState(870)
		p.Match(SQLBaseParserWHERE)
	}
	{
		p.SetState(871)
		p.booleanExpression(0)
	}
	{
		p.SetState(872)
		p.Match(SQLBaseParserT__2)
	}

	return localctx
}

// IOverContext is an interface to support dynamic dispatch.
type IOverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_expression returns the _expression rule contexts.
	Get_expression() IExpressionContext

	// Get_sortItem returns the _sortItem rule contexts.
	Get_sortItem() ISortItemContext

	// Set_expression sets the _expression rule contexts.
	Set_expression(IExpressionContext)

	// Set_sortItem sets the _sortItem rule contexts.
	Set_sortItem(ISortItemContext)

	// GetPartition returns the partition rule context list.
	GetPartition() []IExpressionContext

	// GetOrderitem returns the orderitem rule context list.
	GetOrderitem() []ISortItemContext

	// SetPartition sets the partition rule context list.
	SetPartition([]IExpressionContext)

	// SetOrderitem sets the orderitem rule context list.
	SetOrderitem([]ISortItemContext)

	// IsOverContext differentiates from other interfaces.
	IsOverContext()
}

type OverContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	_expression IExpressionContext
	partition   []IExpressionContext
	_sortItem   ISortItemContext
	orderitem   []ISortItemContext
}

func NewEmptyOverContext() *OverContext {
	var p = new(OverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_over
	return p
}

func (*OverContext) IsOverContext() {}

func NewOverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverContext {
	var p = new(OverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_over

	return p
}

func (s *OverContext) GetParser() antlr.Parser { return s.parser }

func (s *OverContext) Get_expression() IExpressionContext { return s._expression }

func (s *OverContext) Get_sortItem() ISortItemContext { return s._sortItem }

func (s *OverContext) Set_expression(v IExpressionContext) { s._expression = v }

func (s *OverContext) Set_sortItem(v ISortItemContext) { s._sortItem = v }

func (s *OverContext) GetPartition() []IExpressionContext { return s.partition }

func (s *OverContext) GetOrderitem() []ISortItemContext { return s.orderitem }

func (s *OverContext) SetPartition(v []IExpressionContext) { s.partition = v }

func (s *OverContext) SetOrderitem(v []ISortItemContext) { s.orderitem = v }

func (s *OverContext) OVER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserOVER, 0)
}

func (s *OverContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPARTITION, 0)
}

func (s *OverContext) AllBY() []antlr.TerminalNode {
	return s.GetTokens(SQLBaseParserBY)
}

func (s *OverContext) BY(i int) antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBY, i)
}

func (s *OverContext) ORDER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserORDER, 0)
}

func (s *OverContext) WindowFrame() IWindowFrameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWindowFrameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWindowFrameContext)
}

func (s *OverContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *OverContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OverContext) AllSortItem() []ISortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISortItemContext)(nil)).Elem())
	var tst = make([]ISortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISortItemContext)
		}
	}

	return tst
}

func (s *OverContext) SortItem(i int) ISortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISortItemContext)
}

func (s *OverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterOver(s)
	}
}

func (s *OverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitOver(s)
	}
}

func (p *SQLBaseParser) Over() (localctx IOverContext) {
	localctx = NewOverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SQLBaseParserRULE_over)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(874)
		p.Match(SQLBaseParserOVER)
	}
	{
		p.SetState(875)
		p.Match(SQLBaseParserT__0)
	}
	p.SetState(886)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserPARTITION {
		{
			p.SetState(876)
			p.Match(SQLBaseParserPARTITION)
		}
		{
			p.SetState(877)
			p.Match(SQLBaseParserBY)
		}
		{
			p.SetState(878)

			var _x = p.Expression()

			localctx.(*OverContext)._expression = _x
		}
		localctx.(*OverContext).partition = append(localctx.(*OverContext).partition, localctx.(*OverContext)._expression)
		p.SetState(883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(879)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(880)

				var _x = p.Expression()

				localctx.(*OverContext)._expression = _x
			}
			localctx.(*OverContext).partition = append(localctx.(*OverContext).partition, localctx.(*OverContext)._expression)

			p.SetState(885)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(898)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserORDER {
		{
			p.SetState(888)
			p.Match(SQLBaseParserORDER)
		}
		{
			p.SetState(889)
			p.Match(SQLBaseParserBY)
		}
		{
			p.SetState(890)

			var _x = p.SortItem()

			localctx.(*OverContext)._sortItem = _x
		}
		localctx.(*OverContext).orderitem = append(localctx.(*OverContext).orderitem, localctx.(*OverContext)._sortItem)
		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SQLBaseParserT__1 {
			{
				p.SetState(891)
				p.Match(SQLBaseParserT__1)
			}
			{
				p.SetState(892)

				var _x = p.SortItem()

				localctx.(*OverContext)._sortItem = _x
			}
			localctx.(*OverContext).orderitem = append(localctx.(*OverContext).orderitem, localctx.(*OverContext)._sortItem)

			p.SetState(897)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	p.SetState(901)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SQLBaseParserRANGE || _la == SQLBaseParserROWS {
		{
			p.SetState(900)
			p.WindowFrame()
		}

	}
	{
		p.SetState(903)
		p.Match(SQLBaseParserT__2)
	}

	return localctx
}

// IWindowFrameContext is an interface to support dynamic dispatch.
type IWindowFrameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetFrameType returns the frameType token.
	GetFrameType() antlr.Token

	// SetFrameType sets the frameType token.
	SetFrameType(antlr.Token)

	// GetStartFrame returns the startFrame rule contexts.
	GetStartFrame() IFrameBoundContext

	// GetEndFrame returns the endFrame rule contexts.
	GetEndFrame() IFrameBoundContext

	// SetStartFrame sets the startFrame rule contexts.
	SetStartFrame(IFrameBoundContext)

	// SetEndFrame sets the endFrame rule contexts.
	SetEndFrame(IFrameBoundContext)

	// IsWindowFrameContext differentiates from other interfaces.
	IsWindowFrameContext()
}

type WindowFrameContext struct {
	*antlr.BaseParserRuleContext
	parser     antlr.Parser
	frameType  antlr.Token
	startFrame IFrameBoundContext
	endFrame   IFrameBoundContext
}

func NewEmptyWindowFrameContext() *WindowFrameContext {
	var p = new(WindowFrameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_windowFrame
	return p
}

func (*WindowFrameContext) IsWindowFrameContext() {}

func NewWindowFrameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WindowFrameContext {
	var p = new(WindowFrameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_windowFrame

	return p
}

func (s *WindowFrameContext) GetParser() antlr.Parser { return s.parser }

func (s *WindowFrameContext) GetFrameType() antlr.Token { return s.frameType }

func (s *WindowFrameContext) SetFrameType(v antlr.Token) { s.frameType = v }

func (s *WindowFrameContext) GetStartFrame() IFrameBoundContext { return s.startFrame }

func (s *WindowFrameContext) GetEndFrame() IFrameBoundContext { return s.endFrame }

func (s *WindowFrameContext) SetStartFrame(v IFrameBoundContext) { s.startFrame = v }

func (s *WindowFrameContext) SetEndFrame(v IFrameBoundContext) { s.endFrame = v }

func (s *WindowFrameContext) AllFrameBound() []IFrameBoundContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFrameBoundContext)(nil)).Elem())
	var tst = make([]IFrameBoundContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFrameBoundContext)
		}
	}

	return tst
}

func (s *WindowFrameContext) FrameBound(i int) IFrameBoundContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFrameBoundContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFrameBoundContext)
}

func (s *WindowFrameContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserRANGE, 0)
}

func (s *WindowFrameContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROWS, 0)
}

func (s *WindowFrameContext) BETWEEN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBETWEEN, 0)
}

func (s *WindowFrameContext) AND() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAND, 0)
}

func (s *WindowFrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WindowFrameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WindowFrameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterWindowFrame(s)
	}
}

func (s *WindowFrameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitWindowFrame(s)
	}
}

func (p *SQLBaseParser) WindowFrame() (localctx IWindowFrameContext) {
	localctx = NewWindowFrameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SQLBaseParserRULE_windowFrame)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(913)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(905)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*WindowFrameContext).frameType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserRANGE || _la == SQLBaseParserROWS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*WindowFrameContext).frameType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(906)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).startFrame = _x
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(907)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*WindowFrameContext).frameType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserRANGE || _la == SQLBaseParserROWS) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*WindowFrameContext).frameType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(908)
			p.Match(SQLBaseParserBETWEEN)
		}
		{
			p.SetState(909)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).startFrame = _x
		}
		{
			p.SetState(910)
			p.Match(SQLBaseParserAND)
		}
		{
			p.SetState(911)

			var _x = p.FrameBound()

			localctx.(*WindowFrameContext).endFrame = _x
		}

	}

	return localctx
}

// IFrameBoundContext is an interface to support dynamic dispatch.
type IFrameBoundContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFrameBoundContext differentiates from other interfaces.
	IsFrameBoundContext()
}

type FrameBoundContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFrameBoundContext() *FrameBoundContext {
	var p = new(FrameBoundContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_frameBound
	return p
}

func (*FrameBoundContext) IsFrameBoundContext() {}

func NewFrameBoundContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FrameBoundContext {
	var p = new(FrameBoundContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_frameBound

	return p
}

func (s *FrameBoundContext) GetParser() antlr.Parser { return s.parser }

func (s *FrameBoundContext) CopyFrom(ctx *FrameBoundContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *FrameBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FrameBoundContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BoundedFrameContext struct {
	*FrameBoundContext
	boundType antlr.Token
}

func NewBoundedFrameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BoundedFrameContext {
	var p = new(BoundedFrameContext)

	p.FrameBoundContext = NewEmptyFrameBoundContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FrameBoundContext))

	return p
}

func (s *BoundedFrameContext) GetBoundType() antlr.Token { return s.boundType }

func (s *BoundedFrameContext) SetBoundType(v antlr.Token) { s.boundType = v }

func (s *BoundedFrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BoundedFrameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BoundedFrameContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPRECEDING, 0)
}

func (s *BoundedFrameContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFOLLOWING, 0)
}

func (s *BoundedFrameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBoundedFrame(s)
	}
}

func (s *BoundedFrameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBoundedFrame(s)
	}
}

type UnboundedFrameContext struct {
	*FrameBoundContext
	boundType antlr.Token
}

func NewUnboundedFrameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnboundedFrameContext {
	var p = new(UnboundedFrameContext)

	p.FrameBoundContext = NewEmptyFrameBoundContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FrameBoundContext))

	return p
}

func (s *UnboundedFrameContext) GetBoundType() antlr.Token { return s.boundType }

func (s *UnboundedFrameContext) SetBoundType(v antlr.Token) { s.boundType = v }

func (s *UnboundedFrameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnboundedFrameContext) UNBOUNDED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserUNBOUNDED, 0)
}

func (s *UnboundedFrameContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPRECEDING, 0)
}

func (s *UnboundedFrameContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFOLLOWING, 0)
}

func (s *UnboundedFrameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterUnboundedFrame(s)
	}
}

func (s *UnboundedFrameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitUnboundedFrame(s)
	}
}

type CurrentRowBoundContext struct {
	*FrameBoundContext
}

func NewCurrentRowBoundContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CurrentRowBoundContext {
	var p = new(CurrentRowBoundContext)

	p.FrameBoundContext = NewEmptyFrameBoundContext()
	p.parser = parser
	p.CopyFrom(ctx.(*FrameBoundContext))

	return p
}

func (s *CurrentRowBoundContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CurrentRowBoundContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCURRENT, 0)
}

func (s *CurrentRowBoundContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROW, 0)
}

func (s *CurrentRowBoundContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterCurrentRowBound(s)
	}
}

func (s *CurrentRowBoundContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitCurrentRowBound(s)
	}
}

func (p *SQLBaseParser) FrameBound() (localctx IFrameBoundContext) {
	localctx = NewFrameBoundContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SQLBaseParserRULE_frameBound)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(922)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext()) {
	case 1:
		localctx = NewUnboundedFrameContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(915)
			p.Match(SQLBaseParserUNBOUNDED)
		}
		{
			p.SetState(916)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*UnboundedFrameContext).boundType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserPRECEDING || _la == SQLBaseParserFOLLOWING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*UnboundedFrameContext).boundType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case 2:
		localctx = NewCurrentRowBoundContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(917)
			p.Match(SQLBaseParserCURRENT)
		}
		{
			p.SetState(918)
			p.Match(SQLBaseParserROW)
		}

	case 3:
		localctx = NewBoundedFrameContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(919)
			p.Expression()
		}
		{
			p.SetState(920)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*BoundedFrameContext).boundType = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserPRECEDING || _la == SQLBaseParserFOLLOWING) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*BoundedFrameContext).boundType = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IExplainOptionContext is an interface to support dynamic dispatch.
type IExplainOptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExplainOptionContext differentiates from other interfaces.
	IsExplainOptionContext()
}

type ExplainOptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExplainOptionContext() *ExplainOptionContext {
	var p = new(ExplainOptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_explainOption
	return p
}

func (*ExplainOptionContext) IsExplainOptionContext() {}

func NewExplainOptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExplainOptionContext {
	var p = new(ExplainOptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_explainOption

	return p
}

func (s *ExplainOptionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExplainOptionContext) CopyFrom(ctx *ExplainOptionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExplainOptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainOptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type ExplainFormatContext struct {
	*ExplainOptionContext
	value antlr.Token
}

func NewExplainFormatContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainFormatContext {
	var p = new(ExplainFormatContext)

	p.ExplainOptionContext = NewEmptyExplainOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExplainOptionContext))

	return p
}

func (s *ExplainFormatContext) GetValue() antlr.Token { return s.value }

func (s *ExplainFormatContext) SetValue(v antlr.Token) { s.value = v }

func (s *ExplainFormatContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainFormatContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFORMAT, 0)
}

func (s *ExplainFormatContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTEXT, 0)
}

func (s *ExplainFormatContext) GRAPHVIZ() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGRAPHVIZ, 0)
}

func (s *ExplainFormatContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterExplainFormat(s)
	}
}

func (s *ExplainFormatContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitExplainFormat(s)
	}
}

type ExplainTypeContext struct {
	*ExplainOptionContext
	value antlr.Token
}

func NewExplainTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExplainTypeContext {
	var p = new(ExplainTypeContext)

	p.ExplainOptionContext = NewEmptyExplainOptionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExplainOptionContext))

	return p
}

func (s *ExplainTypeContext) GetValue() antlr.Token { return s.value }

func (s *ExplainTypeContext) SetValue(v antlr.Token) { s.value = v }

func (s *ExplainTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExplainTypeContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTYPE, 0)
}

func (s *ExplainTypeContext) LOGICAL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLOGICAL, 0)
}

func (s *ExplainTypeContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDISTRIBUTED, 0)
}

func (s *ExplainTypeContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserVALIDATE, 0)
}

func (s *ExplainTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterExplainType(s)
	}
}

func (s *ExplainTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitExplainType(s)
	}
}

func (p *SQLBaseParser) ExplainOption() (localctx IExplainOptionContext) {
	localctx = NewExplainOptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SQLBaseParserRULE_explainOption)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(928)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserFORMAT:
		localctx = NewExplainFormatContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(924)
			p.Match(SQLBaseParserFORMAT)
		}
		{
			p.SetState(925)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExplainFormatContext).value = _lt

			_la = p.GetTokenStream().LA(1)

			if !(_la == SQLBaseParserTEXT || _la == SQLBaseParserGRAPHVIZ) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExplainFormatContext).value = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	case SQLBaseParserTYPE:
		localctx = NewExplainTypeContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(926)
			p.Match(SQLBaseParserTYPE)
		}
		{
			p.SetState(927)

			var _lt = p.GetTokenStream().LT(1)

			localctx.(*ExplainTypeContext).value = _lt

			_la = p.GetTokenStream().LA(1)

			if !(((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(SQLBaseParserLOGICAL-119))|(1<<(SQLBaseParserDISTRIBUTED-119))|(1<<(SQLBaseParserVALIDATE-119)))) != 0) {
				var _ri = p.GetErrorHandler().RecoverInline(p)

				localctx.(*ExplainTypeContext).value = _ri
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IQualifiedNameContext is an interface to support dynamic dispatch.
type IQualifiedNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedNameContext differentiates from other interfaces.
	IsQualifiedNameContext()
}

type QualifiedNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedNameContext() *QualifiedNameContext {
	var p = new(QualifiedNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_qualifiedName
	return p
}

func (*QualifiedNameContext) IsQualifiedNameContext() {}

func NewQualifiedNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedNameContext {
	var p = new(QualifiedNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_qualifiedName

	return p
}

func (s *QualifiedNameContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedNameContext) CopyFrom(ctx *QualifiedNameContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *QualifiedNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type DotQualifiedNameContext struct {
	*QualifiedNameContext
}

func NewDotQualifiedNameContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DotQualifiedNameContext {
	var p = new(DotQualifiedNameContext)

	p.QualifiedNameContext = NewEmptyQualifiedNameContext()
	p.parser = parser
	p.CopyFrom(ctx.(*QualifiedNameContext))

	return p
}

func (s *DotQualifiedNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DotQualifiedNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *DotQualifiedNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *DotQualifiedNameContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(SQLBaseParserDOT)
}

func (s *DotQualifiedNameContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDOT, i)
}

func (s *DotQualifiedNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterDotQualifiedName(s)
	}
}

func (s *DotQualifiedNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitDotQualifiedName(s)
	}
}

func (p *SQLBaseParser) QualifiedName() (localctx IQualifiedNameContext) {
	localctx = NewQualifiedNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SQLBaseParserRULE_qualifiedName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	localctx = NewDotQualifiedNameContext(p, localctx)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(930)
		p.Identifier()
	}
	p.SetState(935)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(931)
				p.Match(SQLBaseParserDOT)
			}
			{
				p.SetState(932)
				p.Identifier()
			}

		}
		p.SetState(937)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 115, p.GetParserRuleContext())
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) CopyFrom(ctx *IdentifierContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type BackQuotedIdentifierContext struct {
	*IdentifierContext
}

func NewBackQuotedIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BackQuotedIdentifierContext {
	var p = new(BackQuotedIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *BackQuotedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BackQuotedIdentifierContext) BACKQUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBACKQUOTED_IDENTIFIER, 0)
}

func (s *BackQuotedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterBackQuotedIdentifier(s)
	}
}

func (s *BackQuotedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitBackQuotedIdentifier(s)
	}
}

type QuotedIdentifierAlternativeContext struct {
	*IdentifierContext
}

func NewQuotedIdentifierAlternativeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *QuotedIdentifierAlternativeContext {
	var p = new(QuotedIdentifierAlternativeContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *QuotedIdentifierAlternativeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QuotedIdentifierAlternativeContext) QUOTED_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserQUOTED_IDENTIFIER, 0)
}

func (s *QuotedIdentifierAlternativeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterQuotedIdentifierAlternative(s)
	}
}

func (s *QuotedIdentifierAlternativeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitQuotedIdentifierAlternative(s)
	}
}

type DigitIdentifierContext struct {
	*IdentifierContext
}

func NewDigitIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *DigitIdentifierContext {
	var p = new(DigitIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *DigitIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DigitIdentifierContext) DIGIT_IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDIGIT_IDENTIFIER, 0)
}

func (s *DigitIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterDigitIdentifier(s)
	}
}

func (s *DigitIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitDigitIdentifier(s)
	}
}

type UnquotedIdentifierContext struct {
	*IdentifierContext
}

func NewUnquotedIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnquotedIdentifierContext {
	var p = new(UnquotedIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *UnquotedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnquotedIdentifierContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIDENTIFIER, 0)
}

func (s *UnquotedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterUnquotedIdentifier(s)
	}
}

func (s *UnquotedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitUnquotedIdentifier(s)
	}
}

type NonReservedIdentifierContext struct {
	*IdentifierContext
}

func NewNonReservedIdentifierContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *NonReservedIdentifierContext {
	var p = new(NonReservedIdentifierContext)

	p.IdentifierContext = NewEmptyIdentifierContext()
	p.parser = parser
	p.CopyFrom(ctx.(*IdentifierContext))

	return p
}

func (s *NonReservedIdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonReservedIdentifierContext) NonReserved() INonReservedContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonReservedContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonReservedContext)
}

func (s *NonReservedIdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterNonReservedIdentifier(s)
	}
}

func (s *NonReservedIdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitNonReservedIdentifier(s)
	}
}

func (p *SQLBaseParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SQLBaseParserRULE_identifier)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(943)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SQLBaseParserIDENTIFIER:
		localctx = NewUnquotedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(938)
			p.Match(SQLBaseParserIDENTIFIER)
		}

	case SQLBaseParserDIGIT_IDENTIFIER:
		localctx = NewDigitIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(939)
			p.Match(SQLBaseParserDIGIT_IDENTIFIER)
		}

	case SQLBaseParserQUOTED_IDENTIFIER:
		localctx = NewQuotedIdentifierAlternativeContext(p, localctx)
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(940)
			p.Match(SQLBaseParserQUOTED_IDENTIFIER)
		}

	case SQLBaseParserBACKQUOTED_IDENTIFIER:
		localctx = NewBackQuotedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(941)
			p.Match(SQLBaseParserBACKQUOTED_IDENTIFIER)
		}

	case SQLBaseParserADD, SQLBaseParserALL, SQLBaseParserSOME, SQLBaseParserANY, SQLBaseParserAT, SQLBaseParserNO, SQLBaseParserSUBSTRING, SQLBaseParserPOSITION, SQLBaseParserTINYINT, SQLBaseParserSMALLINT, SQLBaseParserINTEGER, SQLBaseParserDATE, SQLBaseParserTIME, SQLBaseParserTIMESTAMP, SQLBaseParserINTERVAL, SQLBaseParserYEAR, SQLBaseParserMONTH, SQLBaseParserDAY, SQLBaseParserHOUR, SQLBaseParserMINUTE, SQLBaseParserSECOND, SQLBaseParserZONE, SQLBaseParserFILTER, SQLBaseParserOVER, SQLBaseParserPARTITION, SQLBaseParserRANGE, SQLBaseParserROWS, SQLBaseParserPRECEDING, SQLBaseParserFOLLOWING, SQLBaseParserCURRENT, SQLBaseParserROW, SQLBaseParserSCHEMA, SQLBaseParserCOMMENT, SQLBaseParserVIEW, SQLBaseParserREPLACE, SQLBaseParserGRANT, SQLBaseParserREVOKE, SQLBaseParserPRIVILEGES, SQLBaseParserPUBLIC, SQLBaseParserOPTION, SQLBaseParserEXPLAIN, SQLBaseParserANALYZE, SQLBaseParserFORMAT, SQLBaseParserTYPE, SQLBaseParserTEXT, SQLBaseParserGRAPHVIZ, SQLBaseParserLOGICAL, SQLBaseParserDISTRIBUTED, SQLBaseParserVALIDATE, SQLBaseParserSHOW, SQLBaseParserTABLES, SQLBaseParserSCHEMAS, SQLBaseParserCATALOGS, SQLBaseParserCOLUMNS, SQLBaseParserCOLUMN, SQLBaseParserUSE, SQLBaseParserPARTITIONS, SQLBaseParserFUNCTIONS, SQLBaseParserTO, SQLBaseParserSYSTEM, SQLBaseParserBERNOULLI, SQLBaseParserPOISSONIZED, SQLBaseParserTABLESAMPLE, SQLBaseParserARRAY, SQLBaseParserMAP, SQLBaseParserSET, SQLBaseParserRESET, SQLBaseParserSESSION, SQLBaseParserDATA, SQLBaseParserSTART, SQLBaseParserTRANSACTION, SQLBaseParserCOMMIT, SQLBaseParserROLLBACK, SQLBaseParserWORK, SQLBaseParserISOLATION, SQLBaseParserLEVEL, SQLBaseParserSERIALIZABLE, SQLBaseParserREPEATABLE, SQLBaseParserCOMMITTED, SQLBaseParserUNCOMMITTED, SQLBaseParserREAD, SQLBaseParserWRITE, SQLBaseParserONLY, SQLBaseParserCALL, SQLBaseParserINPUT, SQLBaseParserOUTPUT, SQLBaseParserCASCADE, SQLBaseParserRESTRICT, SQLBaseParserINCLUDING, SQLBaseParserEXCLUDING, SQLBaseParserPROPERTIES, SQLBaseParserNFD, SQLBaseParserNFC, SQLBaseParserNFKD, SQLBaseParserNFKC, SQLBaseParserIF, SQLBaseParserNULLIF, SQLBaseParserCOALESCE:
		localctx = NewNonReservedIdentifierContext(p, localctx)
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(942)
			p.NonReserved()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// INonReservedContext is an interface to support dynamic dispatch.
type INonReservedContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonReservedContext differentiates from other interfaces.
	IsNonReservedContext()
}

type NonReservedContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonReservedContext() *NonReservedContext {
	var p = new(NonReservedContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SQLBaseParserRULE_nonReserved
	return p
}

func (*NonReservedContext) IsNonReservedContext() {}

func NewNonReservedContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonReservedContext {
	var p = new(NonReservedContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SQLBaseParserRULE_nonReserved

	return p
}

func (s *NonReservedContext) GetParser() antlr.Parser { return s.parser }

func (s *NonReservedContext) SHOW() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSHOW, 0)
}

func (s *NonReservedContext) TABLES() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTABLES, 0)
}

func (s *NonReservedContext) COLUMNS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCOLUMNS, 0)
}

func (s *NonReservedContext) COLUMN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCOLUMN, 0)
}

func (s *NonReservedContext) PARTITIONS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPARTITIONS, 0)
}

func (s *NonReservedContext) FUNCTIONS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFUNCTIONS, 0)
}

func (s *NonReservedContext) SCHEMAS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSCHEMAS, 0)
}

func (s *NonReservedContext) CATALOGS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCATALOGS, 0)
}

func (s *NonReservedContext) SESSION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSESSION, 0)
}

func (s *NonReservedContext) ADD() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserADD, 0)
}

func (s *NonReservedContext) FILTER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFILTER, 0)
}

func (s *NonReservedContext) AT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserAT, 0)
}

func (s *NonReservedContext) OVER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserOVER, 0)
}

func (s *NonReservedContext) PARTITION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPARTITION, 0)
}

func (s *NonReservedContext) RANGE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserRANGE, 0)
}

func (s *NonReservedContext) ROWS() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROWS, 0)
}

func (s *NonReservedContext) PRECEDING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPRECEDING, 0)
}

func (s *NonReservedContext) FOLLOWING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFOLLOWING, 0)
}

func (s *NonReservedContext) CURRENT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCURRENT, 0)
}

func (s *NonReservedContext) ROW() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROW, 0)
}

func (s *NonReservedContext) MAP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMAP, 0)
}

func (s *NonReservedContext) ARRAY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserARRAY, 0)
}

func (s *NonReservedContext) TINYINT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTINYINT, 0)
}

func (s *NonReservedContext) SMALLINT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSMALLINT, 0)
}

func (s *NonReservedContext) INTEGER() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTEGER, 0)
}

func (s *NonReservedContext) DATE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDATE, 0)
}

func (s *NonReservedContext) TIME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTIME, 0)
}

func (s *NonReservedContext) TIMESTAMP() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTIMESTAMP, 0)
}

func (s *NonReservedContext) INTERVAL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINTERVAL, 0)
}

func (s *NonReservedContext) ZONE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserZONE, 0)
}

func (s *NonReservedContext) YEAR() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserYEAR, 0)
}

func (s *NonReservedContext) MONTH() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMONTH, 0)
}

func (s *NonReservedContext) DAY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDAY, 0)
}

func (s *NonReservedContext) HOUR() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserHOUR, 0)
}

func (s *NonReservedContext) MINUTE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserMINUTE, 0)
}

func (s *NonReservedContext) SECOND() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSECOND, 0)
}

func (s *NonReservedContext) EXPLAIN() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEXPLAIN, 0)
}

func (s *NonReservedContext) ANALYZE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserANALYZE, 0)
}

func (s *NonReservedContext) FORMAT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserFORMAT, 0)
}

func (s *NonReservedContext) TYPE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTYPE, 0)
}

func (s *NonReservedContext) TEXT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTEXT, 0)
}

func (s *NonReservedContext) GRAPHVIZ() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGRAPHVIZ, 0)
}

func (s *NonReservedContext) LOGICAL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLOGICAL, 0)
}

func (s *NonReservedContext) DISTRIBUTED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDISTRIBUTED, 0)
}

func (s *NonReservedContext) VALIDATE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserVALIDATE, 0)
}

func (s *NonReservedContext) TABLESAMPLE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTABLESAMPLE, 0)
}

func (s *NonReservedContext) SYSTEM() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSYSTEM, 0)
}

func (s *NonReservedContext) BERNOULLI() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserBERNOULLI, 0)
}

func (s *NonReservedContext) POISSONIZED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPOISSONIZED, 0)
}

func (s *NonReservedContext) USE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserUSE, 0)
}

func (s *NonReservedContext) TO() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTO, 0)
}

func (s *NonReservedContext) SET() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSET, 0)
}

func (s *NonReservedContext) RESET() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserRESET, 0)
}

func (s *NonReservedContext) VIEW() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserVIEW, 0)
}

func (s *NonReservedContext) REPLACE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserREPLACE, 0)
}

func (s *NonReservedContext) IF() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserIF, 0)
}

func (s *NonReservedContext) NULLIF() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNULLIF, 0)
}

func (s *NonReservedContext) COALESCE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCOALESCE, 0)
}

func (s *NonReservedContext) NFD() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFD, 0)
}

func (s *NonReservedContext) NFC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFC, 0)
}

func (s *NonReservedContext) NFKD() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFKD, 0)
}

func (s *NonReservedContext) NFKC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNFKC, 0)
}

func (s *NonReservedContext) POSITION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPOSITION, 0)
}

func (s *NonReservedContext) NO() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserNO, 0)
}

func (s *NonReservedContext) DATA() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserDATA, 0)
}

func (s *NonReservedContext) START() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSTART, 0)
}

func (s *NonReservedContext) TRANSACTION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserTRANSACTION, 0)
}

func (s *NonReservedContext) COMMIT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCOMMIT, 0)
}

func (s *NonReservedContext) ROLLBACK() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserROLLBACK, 0)
}

func (s *NonReservedContext) WORK() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWORK, 0)
}

func (s *NonReservedContext) ISOLATION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserISOLATION, 0)
}

func (s *NonReservedContext) LEVEL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserLEVEL, 0)
}

func (s *NonReservedContext) SERIALIZABLE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSERIALIZABLE, 0)
}

func (s *NonReservedContext) REPEATABLE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserREPEATABLE, 0)
}

func (s *NonReservedContext) COMMITTED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCOMMITTED, 0)
}

func (s *NonReservedContext) UNCOMMITTED() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserUNCOMMITTED, 0)
}

func (s *NonReservedContext) READ() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserREAD, 0)
}

func (s *NonReservedContext) WRITE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserWRITE, 0)
}

func (s *NonReservedContext) ONLY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserONLY, 0)
}

func (s *NonReservedContext) COMMENT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCOMMENT, 0)
}

func (s *NonReservedContext) CALL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCALL, 0)
}

func (s *NonReservedContext) GRANT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserGRANT, 0)
}

func (s *NonReservedContext) REVOKE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserREVOKE, 0)
}

func (s *NonReservedContext) PRIVILEGES() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPRIVILEGES, 0)
}

func (s *NonReservedContext) PUBLIC() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPUBLIC, 0)
}

func (s *NonReservedContext) OPTION() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserOPTION, 0)
}

func (s *NonReservedContext) SUBSTRING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSUBSTRING, 0)
}

func (s *NonReservedContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSCHEMA, 0)
}

func (s *NonReservedContext) CASCADE() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserCASCADE, 0)
}

func (s *NonReservedContext) RESTRICT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserRESTRICT, 0)
}

func (s *NonReservedContext) INPUT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINPUT, 0)
}

func (s *NonReservedContext) OUTPUT() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserOUTPUT, 0)
}

func (s *NonReservedContext) INCLUDING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserINCLUDING, 0)
}

func (s *NonReservedContext) EXCLUDING() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserEXCLUDING, 0)
}

func (s *NonReservedContext) PROPERTIES() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserPROPERTIES, 0)
}

func (s *NonReservedContext) ALL() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserALL, 0)
}

func (s *NonReservedContext) SOME() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserSOME, 0)
}

func (s *NonReservedContext) ANY() antlr.TerminalNode {
	return s.GetToken(SQLBaseParserANY, 0)
}

func (s *NonReservedContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonReservedContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonReservedContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.EnterNonReserved(s)
	}
}

func (s *NonReservedContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SQLBaseListener); ok {
		listenerT.ExitNonReserved(s)
	}
}

func (p *SQLBaseParser) NonReserved() (localctx INonReservedContext) {
	localctx = NewNonReservedContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SQLBaseParserRULE_nonReserved)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(945)
		_la = p.GetTokenStream().LA(1)

		if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<SQLBaseParserADD)|(1<<SQLBaseParserALL)|(1<<SQLBaseParserSOME)|(1<<SQLBaseParserANY)|(1<<SQLBaseParserAT))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(SQLBaseParserNO-32))|(1<<(SQLBaseParserSUBSTRING-32))|(1<<(SQLBaseParserPOSITION-32))|(1<<(SQLBaseParserTINYINT-32))|(1<<(SQLBaseParserSMALLINT-32))|(1<<(SQLBaseParserINTEGER-32))|(1<<(SQLBaseParserDATE-32))|(1<<(SQLBaseParserTIME-32))|(1<<(SQLBaseParserTIMESTAMP-32))|(1<<(SQLBaseParserINTERVAL-32))|(1<<(SQLBaseParserYEAR-32))|(1<<(SQLBaseParserMONTH-32))|(1<<(SQLBaseParserDAY-32))|(1<<(SQLBaseParserHOUR-32))|(1<<(SQLBaseParserMINUTE-32))|(1<<(SQLBaseParserSECOND-32))|(1<<(SQLBaseParserZONE-32)))) != 0) || (((_la-84)&-(0x1f+1)) == 0 && ((1<<uint((_la-84)))&((1<<(SQLBaseParserFILTER-84))|(1<<(SQLBaseParserOVER-84))|(1<<(SQLBaseParserPARTITION-84))|(1<<(SQLBaseParserRANGE-84))|(1<<(SQLBaseParserROWS-84))|(1<<(SQLBaseParserPRECEDING-84))|(1<<(SQLBaseParserFOLLOWING-84))|(1<<(SQLBaseParserCURRENT-84))|(1<<(SQLBaseParserROW-84))|(1<<(SQLBaseParserSCHEMA-84))|(1<<(SQLBaseParserCOMMENT-84))|(1<<(SQLBaseParserVIEW-84))|(1<<(SQLBaseParserREPLACE-84))|(1<<(SQLBaseParserGRANT-84))|(1<<(SQLBaseParserREVOKE-84))|(1<<(SQLBaseParserPRIVILEGES-84))|(1<<(SQLBaseParserPUBLIC-84))|(1<<(SQLBaseParserOPTION-84))|(1<<(SQLBaseParserEXPLAIN-84))|(1<<(SQLBaseParserANALYZE-84))|(1<<(SQLBaseParserFORMAT-84)))) != 0) || (((_la-116)&-(0x1f+1)) == 0 && ((1<<uint((_la-116)))&((1<<(SQLBaseParserTYPE-116))|(1<<(SQLBaseParserTEXT-116))|(1<<(SQLBaseParserGRAPHVIZ-116))|(1<<(SQLBaseParserLOGICAL-116))|(1<<(SQLBaseParserDISTRIBUTED-116))|(1<<(SQLBaseParserVALIDATE-116))|(1<<(SQLBaseParserSHOW-116))|(1<<(SQLBaseParserTABLES-116))|(1<<(SQLBaseParserSCHEMAS-116))|(1<<(SQLBaseParserCATALOGS-116))|(1<<(SQLBaseParserCOLUMNS-116))|(1<<(SQLBaseParserCOLUMN-116))|(1<<(SQLBaseParserUSE-116))|(1<<(SQLBaseParserPARTITIONS-116))|(1<<(SQLBaseParserFUNCTIONS-116))|(1<<(SQLBaseParserTO-116))|(1<<(SQLBaseParserSYSTEM-116))|(1<<(SQLBaseParserBERNOULLI-116))|(1<<(SQLBaseParserPOISSONIZED-116))|(1<<(SQLBaseParserTABLESAMPLE-116))|(1<<(SQLBaseParserARRAY-116))|(1<<(SQLBaseParserMAP-116)))) != 0) || (((_la-148)&-(0x1f+1)) == 0 && ((1<<uint((_la-148)))&((1<<(SQLBaseParserSET-148))|(1<<(SQLBaseParserRESET-148))|(1<<(SQLBaseParserSESSION-148))|(1<<(SQLBaseParserDATA-148))|(1<<(SQLBaseParserSTART-148))|(1<<(SQLBaseParserTRANSACTION-148))|(1<<(SQLBaseParserCOMMIT-148))|(1<<(SQLBaseParserROLLBACK-148))|(1<<(SQLBaseParserWORK-148))|(1<<(SQLBaseParserISOLATION-148))|(1<<(SQLBaseParserLEVEL-148))|(1<<(SQLBaseParserSERIALIZABLE-148))|(1<<(SQLBaseParserREPEATABLE-148))|(1<<(SQLBaseParserCOMMITTED-148))|(1<<(SQLBaseParserUNCOMMITTED-148))|(1<<(SQLBaseParserREAD-148))|(1<<(SQLBaseParserWRITE-148))|(1<<(SQLBaseParserONLY-148))|(1<<(SQLBaseParserCALL-148))|(1<<(SQLBaseParserINPUT-148))|(1<<(SQLBaseParserOUTPUT-148))|(1<<(SQLBaseParserCASCADE-148))|(1<<(SQLBaseParserRESTRICT-148))|(1<<(SQLBaseParserINCLUDING-148))|(1<<(SQLBaseParserEXCLUDING-148))|(1<<(SQLBaseParserPROPERTIES-148))|(1<<(SQLBaseParserNFD-148))|(1<<(SQLBaseParserNFC-148)))) != 0) || (((_la-180)&-(0x1f+1)) == 0 && ((1<<uint((_la-180)))&((1<<(SQLBaseParserNFKD-180))|(1<<(SQLBaseParserNFKC-180))|(1<<(SQLBaseParserIF-180))|(1<<(SQLBaseParserNULLIF-180))|(1<<(SQLBaseParserCOALESCE-180)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

func (p *SQLBaseParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 5:
		var t *QueryTermContext = nil
		if localctx != nil {
			t = localctx.(*QueryTermContext)
		}
		return p.QueryTerm_Sempred(t, predIndex)

	case 16:
		var t *RelationContext = nil
		if localctx != nil {
			t = localctx.(*RelationContext)
		}
		return p.Relation_Sempred(t, predIndex)

	case 24:
		var t *BooleanExpressionContext = nil
		if localctx != nil {
			t = localctx.(*BooleanExpressionContext)
		}
		return p.BooleanExpression_Sempred(t, predIndex)

	case 27:
		var t *ValueExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ValueExpressionContext)
		}
		return p.ValueExpression_Sempred(t, predIndex)

	case 28:
		var t *PrimaryExpressionContext = nil
		if localctx != nil {
			t = localctx.(*PrimaryExpressionContext)
		}
		return p.PrimaryExpression_Sempred(t, predIndex)

	case 34:
		var t *Type_tContext = nil
		if localctx != nil {
			t = localctx.(*Type_tContext)
		}
		return p.Type_t_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SQLBaseParser) QueryTerm_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLBaseParser) Relation_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLBaseParser) BooleanExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLBaseParser) ValueExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 1)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 4)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLBaseParser) PrimaryExpression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 6:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 10)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SQLBaseParser) Type_t_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
