// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketstoreClient is the client API for Marketstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketstoreClient interface {
	Query(ctx context.Context, in *MultiQueryRequest, opts ...grpc.CallOption) (*MultiQueryResponse, error)
	Create(ctx context.Context, in *MultiCreateRequest, opts ...grpc.CallOption) (*MultiServerResponse, error)
	Write(ctx context.Context, in *MultiWriteRequest, opts ...grpc.CallOption) (*MultiServerResponse, error)
	Destroy(ctx context.Context, in *MultiKeyRequest, opts ...grpc.CallOption) (*MultiServerResponse, error)
	ListSymbols(ctx context.Context, in *ListSymbolsRequest, opts ...grpc.CallOption) (*ListSymbolsResponse, error)
	ServerVersion(ctx context.Context, in *ServerVersionRequest, opts ...grpc.CallOption) (*ServerVersionResponse, error)
}

type marketstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketstoreClient(cc grpc.ClientConnInterface) MarketstoreClient {
	return &marketstoreClient{cc}
}

func (c *marketstoreClient) Query(ctx context.Context, in *MultiQueryRequest, opts ...grpc.CallOption) (*MultiQueryResponse, error) {
	out := new(MultiQueryResponse)
	err := c.cc.Invoke(ctx, "/proto.Marketstore/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketstoreClient) Create(ctx context.Context, in *MultiCreateRequest, opts ...grpc.CallOption) (*MultiServerResponse, error) {
	out := new(MultiServerResponse)
	err := c.cc.Invoke(ctx, "/proto.Marketstore/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketstoreClient) Write(ctx context.Context, in *MultiWriteRequest, opts ...grpc.CallOption) (*MultiServerResponse, error) {
	out := new(MultiServerResponse)
	err := c.cc.Invoke(ctx, "/proto.Marketstore/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketstoreClient) Destroy(ctx context.Context, in *MultiKeyRequest, opts ...grpc.CallOption) (*MultiServerResponse, error) {
	out := new(MultiServerResponse)
	err := c.cc.Invoke(ctx, "/proto.Marketstore/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketstoreClient) ListSymbols(ctx context.Context, in *ListSymbolsRequest, opts ...grpc.CallOption) (*ListSymbolsResponse, error) {
	out := new(ListSymbolsResponse)
	err := c.cc.Invoke(ctx, "/proto.Marketstore/ListSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketstoreClient) ServerVersion(ctx context.Context, in *ServerVersionRequest, opts ...grpc.CallOption) (*ServerVersionResponse, error) {
	out := new(ServerVersionResponse)
	err := c.cc.Invoke(ctx, "/proto.Marketstore/ServerVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketstoreServer is the server API for Marketstore service.
// All implementations must embed UnimplementedMarketstoreServer
// for forward compatibility
type MarketstoreServer interface {
	Query(context.Context, *MultiQueryRequest) (*MultiQueryResponse, error)
	Create(context.Context, *MultiCreateRequest) (*MultiServerResponse, error)
	Write(context.Context, *MultiWriteRequest) (*MultiServerResponse, error)
	Destroy(context.Context, *MultiKeyRequest) (*MultiServerResponse, error)
	ListSymbols(context.Context, *ListSymbolsRequest) (*ListSymbolsResponse, error)
	ServerVersion(context.Context, *ServerVersionRequest) (*ServerVersionResponse, error)
	mustEmbedUnimplementedMarketstoreServer()
}

// UnimplementedMarketstoreServer must be embedded to have forward compatible implementations.
type UnimplementedMarketstoreServer struct {
}

func (UnimplementedMarketstoreServer) Query(context.Context, *MultiQueryRequest) (*MultiQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMarketstoreServer) Create(context.Context, *MultiCreateRequest) (*MultiServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMarketstoreServer) Write(context.Context, *MultiWriteRequest) (*MultiServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedMarketstoreServer) Destroy(context.Context, *MultiKeyRequest) (*MultiServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedMarketstoreServer) ListSymbols(context.Context, *ListSymbolsRequest) (*ListSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbols not implemented")
}
func (UnimplementedMarketstoreServer) ServerVersion(context.Context, *ServerVersionRequest) (*ServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerVersion not implemented")
}
func (UnimplementedMarketstoreServer) mustEmbedUnimplementedMarketstoreServer() {}

// UnsafeMarketstoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketstoreServer will
// result in compilation errors.
type UnsafeMarketstoreServer interface {
	mustEmbedUnimplementedMarketstoreServer()
}

func RegisterMarketstoreServer(s grpc.ServiceRegistrar, srv MarketstoreServer) {
	s.RegisterService(&Marketstore_ServiceDesc, srv)
}

func _Marketstore_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketstoreServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketstore/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketstoreServer).Query(ctx, req.(*MultiQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketstore_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketstoreServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketstore/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketstoreServer).Create(ctx, req.(*MultiCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketstore_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketstoreServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketstore/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketstoreServer).Write(ctx, req.(*MultiWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketstore_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketstoreServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketstore/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketstoreServer).Destroy(ctx, req.(*MultiKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketstore_ListSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketstoreServer).ListSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketstore/ListSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketstoreServer).ListSymbols(ctx, req.(*ListSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketstore_ServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketstoreServer).ServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Marketstore/ServerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketstoreServer).ServerVersion(ctx, req.(*ServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Marketstore_ServiceDesc is the grpc.ServiceDesc for Marketstore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marketstore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Marketstore",
	HandlerType: (*MarketstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Marketstore_Query_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Marketstore_Create_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Marketstore_Write_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Marketstore_Destroy_Handler,
		},
		{
			MethodName: "ListSymbols",
			Handler:    _Marketstore_ListSymbols_Handler,
		},
		{
			MethodName: "ServerVersion",
			Handler:    _Marketstore_ServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketstore.proto",
}
